{"version":3,"sources":["pages/indices/indexTemplates/view.js","components/AntTabs/index.js","redux/actions/indexTemplateActions.js","components/Json2Html/index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","edit","width","minHeight","Divider","styled","MuiDivider","spacing","Box","MuiBox","positions","Card","MuiCard","Typography","MuiTypography","Button","MuiButton","palette","tabs","label","connect","store","indexTemplateReducers","dispatch","template","templates","history","useHistory","classes","useState","selectedTemplate","setSelectedTemplate","indexPatternText","setIndexPatternText","tabIndex","setTabIndex","mappingMode","setMappingMode","settingMode","setSettingMode","mappingsJson","setMappingsJson","settingsJson","setSettingsJson","openMessage","setOpenMessage","useEffect","setIndexTemplateAction","setIndexTemplatesAction","location","pathname","substring","lastIndexOf","join","JSON","stringify","Fragment","title","variant","gutterBottom","display","my","container","item","xs","align","value","onChange","event","push","handleTemplateChange","target","style","map","sort","name","key","color","onClick","className","placeholder","disabled","index","component","row","checked","control","m","overflow","Json2html","json","type","autoFocus","open","fullWidth","Tab","withStyles","root","textTransform","fontWeight","typography","fontWeightRegular","marginRight","opacity","fontWeightMedium","selected","props","disableRipple","AntTabs","React","state","setState","indicatorColor","textColor","scrollButtons","tab","id","icon","role","hidden","aria-labelledby","client","Client","call","uri","then","response","SET_INDEX_TEMPLATES","payload","data","filter","startsWith","addIndexTemplateAction","index_patterns","settings","mappings","method","deleteIndexTemplateAction","SET_INDEX_TEMPLATE","Render","validJson","parse","error","topFields","val","undefined","cursor","flatJsonMap","flat","formatKeyFlatJsonMap","Object","keys","forEach","replaceKey","replace","sortKey","suffix","border","cellSpacing","cellPadding","field","endsWith","obj","etc","k","find","o","MappingsJson2html","flatSettingsMap","mt","SettingsJson2html"],"mappings":"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","file":"static/js/48.08617dea.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport AntTabs from \"~/components/AntTabs\";\r\nimport Json2html from \"~/components/Json2Html\"\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton, \r\n    Card as MuiCard,\r\n    CardContent, \r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid, \r\n    InputLabel,\r\n    MenuItem, \r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    TextareaAutosize,\r\n    TextField,\r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {palette, positions, spacing} from \"@material-ui/system\";\r\nimport {connect} from \"react-redux\";\r\nimport {setIndexTemplateAction, setIndexTemplatesAction} from \"../../../redux/actions/indexTemplateActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    edit: {\r\n        width: '100%',\r\n        minHeight: '500px'\r\n    },\r\n}));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions, palette);\r\n\r\nconst tabs = [{label: \"매핑\"}, {label: \"셋팅\"}]\r\n\r\nlet message = \"\"\r\nfunction View({ dispatch, template, templates}) {\r\n    const history = useHistory()\r\n    const classes = useStyles();\r\n    const [selectedTemplate, setSelectedTemplate] = useState(\"\")\r\n    const [indexPatternText, setIndexPatternText] = useState(\"\")\r\n\r\n    const [tabIndex, setTabIndex] = useState(0)\r\n\r\n    const [mappingMode, setMappingMode] = useState(\"form\")\r\n    const [settingMode, setSettingMode] = useState(\"form\")\r\n\r\n    const [mappingsJson, setMappingsJson] = useState(\"\")\r\n    const [settingsJson, setSettingsJson] = useState(\"\")\r\n\r\n    const [openMessage, setOpenMessage] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (selectedTemplate !== \"\") {\r\n            dispatch(setIndexTemplateAction({template: selectedTemplate}))\r\n            dispatch(setIndexTemplatesAction())\r\n        } else {\r\n            // eslint-disable-next-line no-restricted-globals\r\n            setSelectedTemplate(location.pathname.substring(location.pathname.lastIndexOf(\"/\") + 1))\r\n        }\r\n    }, [selectedTemplate]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setIndexPatternText((template['index_patterns'] || []).join(\",\"))\r\n    }, [template['index_patterns']]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setMappingsJson(JSON.stringify((template['mappings'] || {}), null, 4))\r\n        // setMappingsJson(JSON.stringify(((template['mappings'] || {})['properties']), null, 4))\r\n\r\n    }, [template['mappings']]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setSettingsJson(JSON.stringify(((template['settings'] || {})['index']), null, 4))\r\n    }, [template['settings']]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleTemplateChange(template) {\r\n        history.push(`../indices-templates/${template}`)\r\n        setSelectedTemplate(template)\r\n    }\r\n    function handleTabChane(index) {\r\n        setTabIndex(index)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"템플릿 조회\"/>\r\n\r\n            <Typography variant=\"h3\"\r\n                        gutterBottom\r\n                        display=\"inline\"\r\n            >\r\n                템플릿 조회\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <Box align={'left'}>\r\n                        <FormControl>\r\n                            <InputLabel>템플릿</InputLabel>\r\n                            <Select value={selectedTemplate}\r\n                                    onChange={event => handleTemplateChange(event.target.value)}\r\n                                    style={{minWidth: 250}}\r\n                            >\r\n                                {\r\n                                    templates.map(template => template['name']).sort().map(name => <MenuItem key={name} value={name}>{name}</MenuItem>)\r\n                                    // templates.map(template => <MenuItem key={template['name']} value={template['name']}>{template['name']}</MenuItem>)\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n\r\n\r\n                    <Box align={'right'}>\r\n\r\n                        <Button variant=\"outlined\"\r\n                                color={\"primary\"}\r\n                                onClick={() => history.push(`${selectedTemplate}/edit`)}\r\n                        >수정</Button>\r\n                    </Box>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <TextField label=\"인덱스 패턴\"\r\n                           placeholder={\"access-log-*,error-log-*\"}\r\n                           value={indexPatternText}\r\n                           onChange={event => setIndexPatternText(event.target.value)}\r\n                           disabled\r\n                />\r\n            </FormControl>\r\n\r\n            <br/><br/>\r\n\r\n\r\n            <AntTabs tabs={tabs}\r\n                     tabIndex={tabIndex}\r\n                     onChange={handleTabChane}\r\n            />\r\n\r\n            <br/>\r\n\r\n\r\n            <Box display={tabIndex === 0 ? \"block\" : \"none\"}>\r\n                {/* 맵핑 */}\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup row onChange={event => setMappingMode(event.target.value)}>\r\n                        <FormControlLabel value=\"form\"\r\n                                          checked={mappingMode === \"form\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"폼\"\r\n                        />\r\n                        <FormControlLabel value=\"json\"\r\n                                          checked={mappingMode === \"json\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"json\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                {\r\n                    mappingMode === \"form\" ?\r\n                        <Card>\r\n                            <CardContent m={0}>\r\n                                <Box style={{overflow: \"auto\", minWidth: \"700px\"}}>\r\n                                    {Json2html({json: mappingsJson, type: \"mappings\"})}\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                        :\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <TextareaAutosize className={classes.edit}\r\n                                                      value={mappingsJson}\r\n                                                      onChange={event => setMappingsJson(event.target.value)}\r\n                                                      autoFocus\r\n                                                      disabled\r\n                                    />\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                }\r\n            </Box>\r\n\r\n            <Box display={tabIndex === 1 ? \"block\" : \"none\"}>\r\n                {/* 설정 */}\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup row onChange={event => setSettingMode(event.target.value)}>\r\n                        <FormControlLabel value=\"form\"\r\n                                          checked={settingMode === \"form\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"폼\"\r\n                        />\r\n                        <FormControlLabel value=\"json\"\r\n                                          checked={settingMode === \"json\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"json\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                {\r\n                    settingMode === \"form\" ?\r\n                        <Card>\r\n                            <CardContent m={0}>\r\n                                {Json2html({json: template, type: \"settings\"})}\r\n                            </CardContent>\r\n                        </Card>\r\n                        :\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <TextareaAutosize className={classes.edit}\r\n                                                      value={settingsJson}\r\n                                                      onChange={event => setSettingsJson(event.target.value)}\r\n                                                      disabled\r\n                                    />\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                }\r\n            </Box>\r\n\r\n            <Dialog open={openMessage}\r\n                    fullWidth={true}>\r\n                <DialogTitle>오류</DialogTitle>\r\n                <DialogContent>\r\n                    {message}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={() => setOpenMessage(false)}>\r\n                        확인\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.indexTemplateReducers}))(View);","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"} />)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;","import Client from '~/Client'\r\nimport {SET_INDEX_TEMPLATES, SET_INDEX_TEMPLATE} from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexTemplatesAction = () => dispatch => client.call({\r\n    uri: '/elasticsearch/_cat/templates?format=json'\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_TEMPLATES,\r\n    payload: response.data.filter(template => !template['name'].startsWith(\".\"))\r\n}))\r\n\r\n\r\nexport const addIndexTemplateAction = ({template, index_patterns, settings, mappings}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"PUT\",\r\n    data: {\r\n        index_patterns,\r\n        settings,\r\n        mappings\r\n    }\r\n})\r\n\r\nexport const deleteIndexTemplateAction = ({template}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"DELETE\",\r\n})\r\n\r\nexport const setIndexTemplateAction = ({ template }) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`\r\n}).then(response => dispatch({type: SET_INDEX_TEMPLATE, payload: response.data[template]}))","import React from \"react\";\r\nimport {\r\n    Box,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\nimport flat from \"flat\";\r\nimport styled from \"styled-components\";\r\nimport {positions, spacing} from \"@material-ui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\n\r\nfunction SettingsJson2html(settings) {\r\n    if (!settings) {\r\n        return null\r\n    }\r\n\r\n    const flatSettingsMap = flat(settings['settings'] ? settings['settings'] : settings)\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        주요항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>샤드 갯수</TableCell>\r\n                                <TableCell>레플리카 갯수</TableCell>\r\n                                <TableCell>리프레쉬 간격</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_shards']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_replicas']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['defaults']||{})['index']||{})['refresh_interval']|| '-')}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        기타항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>키</TableCell>\r\n                                <TableCell>값</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                Object.keys(flatSettingsMap||{}).map(key => {\r\n                                    return (\r\n                                        <TableRow key={key}>\r\n                                            <TableCell>{key}</TableCell>\r\n                                            <TableCell>{flatSettingsMap[key]||''}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MappingsJson2html(json) {\r\n    const topFields = [\r\n        {title: \"타입\", key: \"type\", component: (val) => {return val}},\r\n        // {title: \"색인\", key: \"enabled\", component: (val) => {return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>}},\r\n        {title: \"색인\", key: \"enabled\", component: (val) => {\r\n            if (val !== undefined && val !== null && val === false) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                    </React.Fragment>\r\n                )\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }},\r\n        {title: \"분석기\", key: \"analyzer\", component: (val) => {return val}},\r\n        {title: \"copy_to\", key: \"copy_to\", component: (val) => {return val}},\r\n        {title: \"ignore_above\", key: \"ignore_above\", component: (val) => {return val}},\r\n        {title: \"null_value\", key: \"null_value\", component: (val) => {return val}},\r\n        {title: \"doc_values\", key: \"doc_values\", component: (val) => {return val}},\r\n        {title: \"similarity\", key: \"similarity\", component: (val) => {return val||\"\"}},\r\n        {title: \"term_vector\", key: \"term_vector\", component: (val) => {return val}},\r\n        {title: \"store\", key: \"store\", component: (val) => {\r\n                if (val !== undefined && val !== null && val === false) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                        </React.Fragment>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n            // return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>\r\n        }}\r\n    ]\r\n\r\n    const flatJsonMap = flat(json['properties'] ? json['properties'] : json)\r\n\r\n    let formatKeyFlatJsonMap = {}\r\n    Object.keys(flatJsonMap).forEach(key => {\r\n        const replaceKey = key.replace(/\\.properties/gi, \"\")\r\n\r\n        const sortKey = replaceKey.substring(0, replaceKey.lastIndexOf(\".\"))\r\n        const suffix = replaceKey.substring(replaceKey.lastIndexOf(\".\") + 1)\r\n        if (!formatKeyFlatJsonMap[sortKey]) {\r\n            formatKeyFlatJsonMap[sortKey] = {}\r\n        }\r\n        formatKeyFlatJsonMap[sortKey][suffix] = flatJsonMap[key]\r\n    })\r\n\r\n    return (\r\n        <table border={1} width={\"100%\"} cellSpacing={0} cellPadding={8}>\r\n            <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>이름</th>\r\n                {\r\n                    topFields.map(field => <th key={field['title']}>{field['title']}</th>)\r\n                }\r\n                <th>기타설정</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                Object.keys(formatKeyFlatJsonMap)\r\n                    .filter(key => !key.endsWith(\".copy_to\")).map((key, index) => {\r\n                    const obj = formatKeyFlatJsonMap[key]\r\n\r\n                    const etc = Object.keys(obj).map(k => {\r\n                        const o = topFields.find(m => m['key'] === k)\r\n                        return o ? null : k + \": \" + obj[k]\r\n                    }).filter(o => o)\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td align={\"center\"}>{index + 1}</td>\r\n                            <td>{key.replace(/\\.fields/gi, \"\")}</td>\r\n                            {\r\n                                topFields.map(field => <td key={field['title']} align={\"center\"}>{field['component'](obj[field['key']])}</td>)\r\n                            }\r\n                            <td>\r\n                                {etc.join(\", \")}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nfunction Render({json, type}) {\r\n    let validJson = json\r\n    try {\r\n        if (typeof json === 'string') {\r\n            validJson = JSON.parse(json)\r\n        }\r\n    } catch (error) {\r\n        // console.warn(\"parsing error\", typeof json)\r\n    }\r\n\r\n    if (validJson && type === \"mappings\") {\r\n        return MappingsJson2html(validJson)\r\n    } else if (validJson && type === \"settings\") {\r\n        return SettingsJson2html(validJson)\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Box style={{minHeight: \"150px\"}}>\r\n                </Box>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Render\r\n"],"sourceRoot":""}
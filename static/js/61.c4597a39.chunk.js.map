{"version":3,"sources":["components/DynamicTable/index.js","pages/analysis/dictionary/Set.js","pages/analysis/dictionary/Synonym.js","pages/analysis/dictionary/Space.js","pages/analysis/dictionary/Synonym2Way.js","pages/analysis/dictionary/Custom.js","pages/analysis/dictionary/WrapperTabPanel.js","utils.js"],"names":["useStyles","makeStyles","theme","input","border","DynamicTable","dataList","from","limit","showCheckBox","onSelectClick","isEdit","onUpdate","onDelete","classes","useState","selected","setSelected","array","setArray","useEffect","map","data","fields","field","rowCount","forEach","length","rows","i","cols","j","push","id","text","splice","TableContainer","component","Paper","Table","size","TableHead","TableRow","index","Fragment","key","TableCell","padding","Checkbox","defaultChecked","onChange","event","checked","ids","row","handleSelectAllClick","target","Box","align","TableBody","rowIdx","col","colIdx","includes","concat","filter","select","InputBase","className","value","cloneArray","slice","handleChange","fullWidth","b","justifyContent","display","width","IconButton","iconButton","onClick","updateFields","console","log","handleEdit","OfflinePin","Delete","prototype","PropTypes","isRequired","Button","styled","MuiButton","spacing","sizing","palette","MuiBox","formControl","minWidth","form","alignItems","marginLeft","flex","borderBottom","divider","height","margin","right","textAlign","checkedList","searchedKeyword","connect","store","authUser","dsearchReducers","dictionary","setting","result","dataSet","dispatch","useDispatch","searchColumns","setSearchColumns","isMatch","setMatch","mode","setMode","pageNum","setPageNum","rowSize","newCreateId","React","useRef","newCreateKeyword","newCreateValue","newKeyword","deleteDialogOpen","setDeleteDialogOpen","createDialogOpen","setCreateDialogOpen","message","setMessage","toggleCheckbox","handlePagination","setDictionary","handleSearchClick","keyword","current","a","deleteDictionary","utils","sleep","handleCreateData","createId","createKeyword","createValue","createDictionary","msg","undefined","setTimeout","column","hits","hit","createLabels","colId","find","colKeyword","colValue","Card","CardContent","Grid","container","item","xs","FormControl","Select","MenuItem","placeholder","inputRef","onKeyUp","keyCode","type","aria-label","Search","color","md","variant","mx","downloadDictionary","role","analysis","disabled","m","Dialog","open","onClose","DialogTitle","style","cursor","DialogContent","TextField","label","autoFocus","onKeyPress","e","m5","mt","DialogActions","mr","DialogContentText","createSearchColumn","window","confirm","checkedListId","columns","reduce","o","k","Object","assign","updateDictionary","ml","dictionaryReducers","activeIndex","settings","Viewer","Set","Synonym","Space","Synonym2Way","Custom","ms","Promise","resolve"],"mappings":"geAmBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CAAEC,OAAQ,WAGrB,SAASC,EAAT,GAA4J,IAArIC,EAAoI,EAApIA,SAAoI,IAA1HC,YAA0H,MAAnH,EAAmH,MAAhHC,aAAgH,MAAxG,IAAwG,MAAhGC,oBAAgG,SAA1EC,EAA0E,EAA1EA,cAA0E,IAA3DC,cAA2D,aAA3CC,gBAA2C,MAAhC,aAAgC,MAAtBC,gBAAsB,MAAX,aAAW,EACjJC,EAAUd,IADuI,EAEvHe,mBAAS,IAF8G,mBAEhJC,EAFgJ,KAEtIC,EAFsI,OAG7HF,mBAAS,IAHoH,mBAGhJG,EAHgJ,KAGzIC,EAHyI,KAKvJC,qBAAU,WACND,EAAS,YAAIb,EAASe,KAAI,SAAAC,GAAI,OAAIA,EAAKA,YACxC,CAAChB,IAEJc,qBAAU,WACNH,EAAY,MACb,CAACR,IAGJ,IAAMc,EAASjB,EAASe,KAAI,SAAAC,GAAI,OAAIA,EAAKE,SAErCC,EAAW,EACfnB,EAASoB,SAAQ,SAAAJ,GAAI,OAAIG,EAAWH,EAAKA,KAAKK,OAASF,EAAWH,EAAKA,KAAKK,OAASF,KAGrF,IADA,IAAIG,EAAO,GACFC,EAAI,EAAGA,EAAIJ,EAAUI,IAAK,CAE/B,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIR,EAAOI,OAAQI,IAC3Bb,EAAMa,KACqB,kBAAhBb,EAAMa,GAAGF,GAChBC,EAAKE,KAAK,CAACC,GAAIf,EAAMa,GAAGF,GAAIK,KAAMhB,EAAMa,GAAGF,KAE3CC,EAAKE,KAAK,CAACC,GAAIf,EAAMa,GAAGF,GAAT,GAAmBK,KAAMhB,EAAMa,GAAGF,GAAT,QAIpDD,EAAKI,KAAKF,GAmCd,OAjCAF,EAAOA,EAAKO,OAAO5B,EAAMC,GAkCrB,kBAAC4B,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAOC,KAAK,SACR,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEQnB,EAAOF,KAAI,SAACG,EAAOmB,GAAR,OACP,kBAAC,IAAMC,SAAP,CAAgBC,IAAKrB,GAEbf,GAA0B,IAAVkC,EACZ,kBAACG,EAAA,EAAD,CAAWC,QAAQ,YACf,kBAACC,EAAA,EAAD,CAAUC,gBAAgB,EAAOC,SAAU,SAACC,GAAD,OA1CvF,SAA8BC,GAC1B,IAAIC,EAAM,GACVzB,EAAKF,SAAQ,SAAA4B,GACT5C,EAAc4C,EAAI,GAAGrB,GAAImB,GACzBC,EAAIrB,KAAKsB,EAAI,GAAGrB,OAEVhB,EAAVmC,EAAsBC,EAAmB,IAoCqDE,CAAqBJ,EAAMK,OAAOJ,aAG5F,KAER,kBAACN,EAAA,EAAD,KAAYtB,OAKpBf,GAAgBE,EACZ,kBAACmC,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,CAAKC,MAAO,UAAZ,iBAKJ,OAIhB,kBAACC,EAAA,EAAD,KAEQ/B,EAAKP,KAAI,SAACS,EAAM8B,GACZ,OACI,kBAAClB,EAAA,EAAD,CAAUG,IAAKe,GAEP9B,EAAKT,KAAI,SAACwC,EAAKC,GACX,OACI,kBAAC,IAAMlB,SAAP,CAAgBC,IAAKiB,GAEbrD,GAA2B,IAAXqD,EACZ,kBAAChB,EAAA,EAAD,CAAWC,QAAQ,YACf,kBAACC,EAAA,EAAD,CAAUI,QAASpC,EAAS+C,SAASF,EAAI5B,IAC/BiB,SAAU,SAACC,GAAD,OApErDlB,EAoEkF4B,EAAI5B,GApElFmB,EAoEsFD,EAAMK,OAAOJ,QAnE9H1C,EAAcuB,EAAImB,QACRnC,EAAVmC,EAAsBpC,EAASgD,OAAO/B,GAAmBjB,EAASiD,QAAO,SAAAC,GAAM,OAAIA,IAAWjC,MAFlG,IAA2BA,EAAImB,MAwEyB,KAER,kBAACN,EAAA,EAAD,KAEQrC,GAAgBE,EAEZ,kBAACwD,EAAA,EAAD,CAAWC,UAAWtD,EAAQX,MACnBkE,MAAOR,EAAI3B,MAAO,GAElBgB,SAAU,SAACC,GAAD,OA7EjF,SAAsBA,EAAOlB,EAAI6B,EAAQF,GACrC,IAAIU,EAAapD,EAAMqD,QACvBD,EAAWR,GAAQF,GAAnB,KAAqCT,EAAMK,OAAOa,MAClDlD,EAASmD,GA0E+EE,CAAarB,EAAOU,EAAI5B,GAAI6B,EAAQF,IACzDa,WAAS,EACTC,EAAG,IAIdb,EAAI3B,UAQ5BzB,GAAgBE,EACZ,kBAACmC,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,CAAKC,MAAO,SAAUiB,eAAgB,gBAAiBC,QAAQ,OAAOC,MAAM,QACxE,kBAACpB,EAAA,EAAD,MACA,kBAACqB,EAAA,EAAD,CAAYtC,KAAM,QACN4B,UAAWtD,EAAQiE,WACnBC,QAAS,kBA5FrE,SAAoB/C,EAAI2B,GAGpB,IAFA,IAAI9B,EAAO,GACPmD,EAAe,GACVpD,EAAI,EAAGA,EAAIX,EAAMS,OAAQE,IAC9BC,EAAKE,KAAKd,EAAMW,GAAG+B,GAAT,MAA4B,IACtCsB,QAAQC,IAAI5D,EAAOM,IACnBoD,EAAajD,KAAKT,EAAOM,IAAM,IAEnCjB,EAASqB,EAAIH,EAAMmD,GAoFoDG,CAAWtD,EAAK,GAAL,GAAe8B,KAEjD,kBAACyB,EAAA,EAAD,OAEJ,kBAACP,EAAA,EAAD,CAAYtC,KAAM,QACN4B,UAAWtD,EAAQiE,WACnBC,QAAS,kBAxF/C/C,EAwFkEH,EAAK,GAAL,QAvFpFjB,EAASoB,GADb,IAAsBA,IA0F8B,kBAACqD,EAAA,EAAD,SAMZ,YAY5CjF,EAAakF,UAAY,CACrBjF,SAAUkF,IAAUtE,MAAMuE,YAGfpF,Q,sDChKTqF,EAASC,YAAOC,IAAPD,CAAkBE,IAASC,IAAQC,KAC5CtC,EAAMkC,YAAOK,IAAPL,CAAeE,IAASC,KAE9B9F,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrC+F,YAAa,CAAEC,SAAU,KACzBhC,OAAQ,CAAEgC,SAAU,IACpBC,KAAM,CAAEpD,QAAS,UAAW6B,QAAS,OAAQwB,WAAY,SAAUvB,MAAO,KAC1E1E,MAAO,CAAEkG,WAAYnG,EAAM2F,QAAQ,GAAIS,KAAM,EAAGC,aAAc,iBAAkB,UAAW,CAAEA,aAAc,oBAC3GxB,WAAY,CAAChC,QAAS,GACtByD,QAAS,CAAEC,OAAQ,GAAIC,OAAQ,GAC/BC,MAAO,CAAEC,UAAW,aAGpBC,GAAc,GACdC,GAAkB,GA0aPC,oBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,YADrBF,EAzaf,YAA0D,IAA3CI,EAA0C,EAA1CA,WAAYF,EAA8B,EAA9BA,SAAUG,EAAoB,EAApBA,QAC3BC,EAD+C,EAAXC,QACnBH,IAAe,GAChCI,EAAWC,cACX1G,EAAUd,IAHqC,EAIXe,mBAAS,oBAJE,mBAI9C0G,EAJ8C,KAI/BC,EAJ+B,OAMzB3G,oBAAS,GANgB,mBAM9C4G,EAN8C,KAMrCC,EANqC,OAO7B7G,mBAAS,QAPoB,mBAO9C8G,EAP8C,KAOxCC,EAPwC,OAQvB/G,mBAAS,GARc,mBAQ9CgH,EAR8C,KAQrCC,EARqC,OASnCjH,mBAAS,IAApBkH,EAT8C,oBAY/CC,EAAcC,IAAMC,OAAO,MAC3BC,GAAmBF,IAAMC,OAAO,MAChCE,GAAiBH,IAAMC,OAAO,MAC9BG,GAAaJ,IAAMC,OAAO,CAAC/D,MAAO,KAfa,GAiBL8D,IAAMpH,UAAS,GAjBV,qBAiB9CyH,GAjB8C,MAiB5BC,GAjB4B,SAkBLN,IAAMpH,UAAS,GAlBV,qBAkB9C2H,GAlB8C,MAkB5BC,GAlB4B,SAmBvBR,IAAMpH,SAAS,IAnBQ,qBAmB9C6H,GAnB8C,MAmBrCC,GAnBqC,MAkCrD,SAASC,GAAe7G,EAAImB,GACxByD,GAAczD,EAAUyD,GAAY7C,OAAO/B,GAAM4E,GAAY5C,QAAO,SAAAC,GAAM,OAAIA,IAAWjC,KAG7F,SAAS8G,GAAiBhB,GAEnBA,EAAUV,EAAM,cAGnBW,EAAWD,GACXR,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASb,GAAiBW,KAGnF,SAASwB,KACL,IAAIC,EAAUX,GAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXT,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IApDhB,8CAsErD,8BAAA2B,EAAA,sDACQF,EAAUX,GAAWY,QAAQ9E,MACxBxC,EAAI,EAFjB,YAEoBA,EAAIgF,GAAYlF,QAFpC,gCAGc0H,YAAiBlC,EAAYN,GAAYhF,IAHvD,OAE4CA,IAF5C,6BAKIgF,GAAc,GACd4B,IAAoB,GANxB,UAOUa,IAAMC,MAAM,KAPtB,QAQIhC,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IARrE,6CAtEqD,+BAiFtC+B,KAjFsC,8EAiFrD,oCAAAJ,EAAA,6DACQK,EAAW,GACXC,EAAgB,GAChBC,EAAc,GAEQ,MAAvBzB,EAAYiB,UACXM,EAAWvB,EAAYiB,QAAQ9E,OAEJ,MAA5BgE,GAAiBc,UAChBO,EAAgBrB,GAAiBc,QAAQ9E,OAEhB,MAA1BiE,GAAea,UACdQ,EAAcrB,GAAea,QAAQ9E,OAZ7C,SAcUuF,YAAiBzC,EAAY,CAAClF,GAAIwH,EAAUP,QAASQ,EAAerF,MAAOsF,IAdrF,cAgBQE,EAAM,QACMC,IAAbL,GAAuC,OAAbA,GAAkC,KAAbA,GAAmBA,EAAS9H,OAAS,IACnFuD,QAAQC,IAAI,WAAYsE,EAAUA,EAAS9H,QAC3CkI,GAAOJ,QAGUK,IAAlBJ,GAAiD,OAAlBA,GAA4C,KAAlBA,GAAwBA,EAAc/H,OAAS,IACvGuD,QAAQC,IAAI,gBAAiBuE,EAAeA,EAAc/H,SAC/C,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOH,QAGQI,IAAhBH,GAA6C,OAAhBA,GAAwC,KAAhBA,GAAsBA,EAAYhI,OAAS,IAC/FuD,QAAQC,IAAI,cAAewE,EAAaA,EAAYhI,SACzC,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOF,GAGe,MAAvBzB,EAAYiB,UACXjB,EAAYiB,QAAQ9E,MAAQ,IAED,MAA5BgE,GAAiBc,UAChBd,GAAiBc,QAAQ9E,MAAQ,IAER,MAA1BiE,GAAea,UACdb,GAAea,QAAQ9E,MAAQ,IA7CvC,UA+CUiF,IAAMC,MAAM,KA/CtB,QAgDQL,EAAUX,GAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IACjEoB,GAAW,IAAMgB,EAAM,+DACvBE,YAAW,WACPlB,GAAW,MACZ,KArDP,6CAjFqD,sBAsBrDzH,qBAAU,WACN,IAAI8H,EAAUX,GAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASuB,EAASzB,MACxE,IAgHH,IAAInH,GAAW8G,EAAO,QAAY/F,KAAI,SAAC2I,EAAQrH,GAC3C,IAAMsH,EAAQ5C,EAAM,MAAY,GAChC,MAAO,CACH7F,MAAOwI,EAAM,MACb1I,KAAM2I,EAAK5I,KAAI,SAAA6I,GAAG,MAAK,CAACjI,GAAIiI,EAAG,GAAQhI,KAAOgI,EAAG,YAAgBF,EAAM,OAAa,WAIxFG,GAAe,GACbC,GAAQhD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,OAAnBA,EAAM,QAChDM,GAAalD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,YAAnBA,EAAM,QACrDO,GAAWnD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,UAAnBA,EAAM,QAWzD,OAVII,KACAD,GAAalI,GAAKmI,GAAK,OAEvBE,KACAH,GAAajB,QAAUoB,GAAU,OAEjCC,KACAJ,GAAa9F,MAAQkG,GAAQ,OAI7B,kBAAC,IAAM3H,SAAP,KACI,6BACA,kBAAC4H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAKzG,UAAWtD,EAAQqF,KAAMvB,QAAS,UAE/BwC,EAAO,SAAeA,EAAO,QAAYzF,OAAS,EAC9C,kBAACmJ,EAAA,EAAD,CAAa1G,UAAWtD,EAAQoD,QAC5B,kBAAC6G,EAAA,EAAD,CAAQ1G,MAAOoD,EACPvE,SAhJhD,SAA4BC,GACxB,IAAI+F,EAAUX,GAAWY,QAAQ9E,MACjCwC,GAAc,GACda,EAAiBvE,EAAMK,OAAOa,OAC9BkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAAS/F,EAAMK,OAAOa,MAAOoD,MA8I7C,kBAACuD,EAAA,EAAD,CAAU3G,MAAO,oBAAjB,iBAEK+C,EAAO,SAAe,IAClB/F,KAAI,SAAA2I,GAAM,OAAI,kBAACgB,EAAA,EAAD,CAAUnI,IAAKmH,EAAM,KAAU3F,MAAO2F,EAAM,MAAWA,EAAM,YAK5F,KAGR,kBAAC7F,EAAA,EAAD,CACIC,UAAWtD,EAAQX,MACnB8K,YAAY,eACZC,SAAU3C,GAGV4C,QA9HhC,SAA8BhI,GACJ,KAAlBA,EAAMiI,SACNnC,QA8HoB,kBAACnE,EAAA,EAAD,CAAYuG,KAAK,SACLjH,UAAWtD,EAAQiE,WACnBuG,aAAW,SACXtG,QAASiE,IAEjB,kBAACsC,EAAA,EAAD,OAGJ,kBAACvI,EAAA,EAAD,CAAUwI,MAAM,UACNnH,MAAOsD,EACPzE,SAnJtC,SAA8BC,GAC1B,IAAI+F,EAAUX,GAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXJ,EAASzE,EAAMK,OAAOJ,SACtBmE,EAASyB,YAAc7B,EAAY,EAAGc,EAAS9E,EAAMK,OAAOJ,QAAS8F,EAASzB,OAyG1D,8BA0CJ,kBAACiD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGrH,UAAWtD,EAAQ6F,OAC/B,SAATkB,EAEO,kBAAC,EAAD,CAAQ6D,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM4G,YAAmBzE,KAH1C,4BAQA,kBAAC,IAAMvE,SAAP,KACQ,kBAAC,EAAD,CAAQ8I,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WACL2D,IAAoB,KAJ5B,gBAOA,kBAAC,EAAD,CAAQ+C,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAW6B,GAAYlF,OAAS,GAAG8G,IAAoB,KAHpE,iBAShB,kBAAC,EAAD,CAAQiD,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM+D,GAAiBhB,KAHxC,4BAKCd,EAAS4E,KAAKC,SAAW,kBAAC,EAAD,CAAQJ,QAAQ,WAClCF,MAAM,UACNxG,QAAS,kBAAM8C,EAAiB,SAATD,EAAkB,OAAS,SAClD8D,GAAI,GACD,SAAT9D,EAAkB,eAAO,gBACzB,uCAIV,6BAEA,kBAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAC9E,QAAS,GACrB,kBAAC6E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,EACNC,MAAO,MAGzB,kBAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,GACNC,MAAO,MAGzB,kBAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,GACNC,MAAO,MAGzB,kBAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,GACNC,MAAO,OAK7B,6BAEA,kBAACkK,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CAAKnH,MAAO,UACR,kBAAC,EAAD,CAAQgI,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAsB,IAAZhE,GAFlB,gBAMA,kBAAC,EAAD,CAAK1F,UAAW,OAAQ2J,EAAG,GACW,KAAhC3E,EAAM,aAAmB,GAAW,EAAIU,EAAU,EADxD,MAC8DV,EAAM,aAAmB,GAEvF,kBAAC,EAAD,CAAQqE,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAWhE,EAAU,KAAQV,EAAM,aAAmB,IAAuC,KAAhCA,EAAM,aAAmB,IAF9F,qBAcpB,kBAAC4E,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAMxD,GACNyD,QAAS,kBAAMxD,IAAoB,KAEnC,kBAACyD,EAAA,EAAD,CAAaC,MAAO,CAACC,OAAQ,SAA7B,gBAGA,kBAACC,EAAA,EAAD,KAEQpC,GAAalI,GACT,kBAACyI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAalI,GAA1B,MAEJ,kBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAalI,GACpByJ,QAAS,WACTgB,WAAW,EACXxB,SAAUhD,EACVyE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAajB,QACT,kBAACwB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAKgC,GAAI,GAAT,IAAc1C,GAAajB,QAA3B,MAEJ,kBAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAajB,QACpBwC,QAAS,WACTgB,WAAW,EACXxB,SAAU7C,GACVsE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAa9F,MACT,kBAACqG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAKiC,GAAI,GAAT,IAAc3C,GAAa9F,MAA3B,MAEJ,kBAACqG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAa9F,MACpBqH,QAAS,WACTgB,WAAW,EACXxB,SAAU5C,GACVqE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,MAGZ,kBAACuD,EAAA,EAAD,KAEoB,KAAZnE,GACA,kBAAC,EAAD,CAAKoE,GAAI,GAAIX,MAAO,CAACb,MAAO,QAA5B,IAAqC,+BAAK5C,GAAL,MAC/B,qCAEV,kBAAC,EAAD,CAAQ5D,QAASwE,GAAkBgC,MAAM,aAAzC,gBAGA,kBAAC,EAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAM2D,IAAoB,IAAQ6C,MAAM,WAAnE,kBAOR,kBAACS,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAM1D,GACN2D,QAAS,kBAAM1D,IAAoB,KAEnC,kBAAC2D,EAAA,EAAD,CAAaC,MAAO,CAACC,OAAQ,SAA7B,iBAGA,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACKpG,GAAYlF,OADjB,mGAIJ,kBAACoL,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQ/H,QA5Z6B,4CA4ZFwG,MAAM,aAAzC,gBAGA,kBAAC,EAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAMyD,IAAoB,IAAQ+C,MAAM,WAAnE,sB,UC/ad9F,GAASC,YAAOC,IAAPD,CAAkBE,IAASC,IAAQC,KAC5CtC,GAAMkC,YAAOK,IAAPL,CAAeE,IAASC,KAE9B9F,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC+F,YAAa,CAAEC,SAAU,KACzBhC,OAAQ,CAAEgC,SAAU,IACpBC,KAAM,CAAEpD,QAAS,UAAW6B,QAAS,OAAQwB,WAAY,SAAUvB,MAAO,KAC1E1E,MAAO,CAAEkG,WAAYnG,EAAM2F,QAAQ,GAAIS,KAAM,EAAGC,aAAc,iBAAkB,UAAW,CAAEA,aAAc,oBAC3GxB,WAAY,CAAChC,QAAS,GACtByD,QAAS,CAAEC,OAAQ,GAAIC,OAAQ,GAC/BC,MAAO,CAAEC,UAAW,aAGpBC,GAAc,GACdC,GAAkB,GAybPC,oBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,YADrBF,EAxbf,YAAsE,IAA1CI,EAAyC,EAAzCA,WAAYF,EAA6B,EAA7BA,SAAUG,EAAmB,EAAnBA,QACxCC,EAD2D,EAAVC,QAChCH,IAAe,GAChCI,EAAWC,cACX1G,EAAUd,KAHiD,EAIvBe,mBAAS,oBAJc,mBAI1D0G,EAJ0D,KAI3CC,EAJ2C,OAMrC3G,oBAAS,GAN4B,mBAM1D4G,EAN0D,KAMjDC,EANiD,OAOzC7G,mBAAS,QAPgC,mBAO1D8G,EAP0D,KAOpDC,EAPoD,OAQnC/G,mBAAS,GAR0B,mBAQ1DgH,EAR0D,KAQjDC,EARiD,OAS/CjH,mBAAS,IAApBkH,EAT0D,oBAY3DC,EAAcC,IAAMC,OAAO,MAC3BC,EAAmBF,IAAMC,OAAO,MAChCE,EAAiBH,IAAMC,OAAO,MAC9BG,EAAaJ,IAAMC,OAAO,CAAC/D,MAAO,KAfyB,GAiBjB8D,IAAMpH,UAAS,GAjBE,qBAiB1DyH,GAjB0D,MAiBxCC,GAjBwC,SAkBjBN,IAAMpH,UAAS,GAlBE,qBAkB1D2H,GAlB0D,MAkBxCC,GAlBwC,SAmBnCR,IAAMpH,SAAS,IAnBoB,qBAmB1D6H,GAnB0D,MAmBjDC,GAnBiD,MAqCjE,SAASE,GAAiBhB,GAEnBA,EAAUV,EAAM,cAInBW,EAAWD,GACXR,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASb,GAAiBW,KAGnF,SAASwB,KACL,IAAIC,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXT,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IApDJ,8CAsEjE,8BAAA2B,EAAA,sDACQF,EAAUX,EAAWY,QAAQ9E,MACxBxC,EAAI,EAFjB,YAEoBA,EAAIgF,GAAYlF,QAFpC,gCAGc0H,YAAiBlC,EAAYN,GAAYhF,IAHvD,OAE4CA,IAF5C,6BAKIgF,GAAc,GACd4B,IAAoB,GANxB,UAOUa,IAAMC,MAAM,KAPtB,QAQIhC,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IARrE,6CAtEiE,+BAiFlD+B,KAjFkD,8EAiFjE,sCAAAJ,EAAA,6DACQK,EAAW,GACXC,EAAgB,GAChBC,EAAc,GAEQ,MAAvBzB,EAAYiB,UACXM,EAAWvB,EAAYiB,QAAQ9E,OAEJ,MAA5BgE,EAAiBc,UAChBO,EAAgBrB,EAAiBc,QAAQ9E,OAEhB,MAA1BiE,EAAea,UACdQ,EAAcrB,EAAea,QAAQ9E,OAZ7C,SAeUuF,YAAiBzC,EAAY,CAAClF,GAAIwH,EAAUP,QAASQ,EAAerF,MAAOsF,IAfrF,cAgBUuD,EAAkC,KAAbzD,EAAkB,KAAyB,KAAlBC,EAAuB,UAAY,QAEnFG,EAAM,QACMC,IAAbL,GAAuC,OAAbA,GAAkC,KAAbA,GAAmBA,EAAS9H,OAAS,IACnFkI,GAAOJ,QAGUK,IAAlBJ,GAAiD,OAAlBA,GAA4C,KAAlBA,GAAwBA,EAAc/H,OAAS,KAC5F,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOH,QAGQI,IAAhBH,GAA6C,OAAhBA,GAAwC,KAAhBA,GAAsBA,EAAYhI,OAAS,KACpF,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOF,GAGe,MAAvBzB,EAAYiB,UACXjB,EAAYiB,QAAQ9E,MAAQ,IAED,MAA5BgE,EAAiBc,UAChBd,EAAiBc,QAAQ9E,MAAQ,IAER,MAA1BiE,EAAea,UACdb,EAAea,QAAQ9E,MAAQ,IA5CvC,UA+CUiF,IAAMC,MAAM,KA/CtB,QAgDQL,EAAUX,EAAWY,QAAQ9E,MACjCuD,GAAS,GACTF,EAAiBwF,GACjB3F,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IACjEoB,GAAW,IAAMgB,EAAM,+DACvBE,YAAW,WACPlB,GAAW,MACZ,KAvDP,6CAjFiE,oEA2IjE,WAAkC5G,GAAlC,SAAAmH,EAAA,yDACS+D,OAAOC,QAAQ,sFADxB,0CAEe,GAFf,cAIIvG,GAAcA,GAAY5C,QAAO,SAAAoJ,GAAa,OAAIA,IAAkBpL,KAJxE,SAKUoH,YAAiBlC,EAAYlF,GALvC,uBAMUqH,IAAMC,MAAM,KANtB,OAOIR,GAAiBhB,GAPrB,4CA3IiE,oEAsJjE,WAAkC9F,EAAIqB,EAAKgK,GAA3C,eAAAlE,EAAA,yDACS+D,OAAOC,QAAQ,sFADxB,0CAEe,GAFf,cAKQ9L,EAAOgM,EAAQC,QAAO,SAACC,EAAGC,EAAG5L,GAC7B,OAAO6L,OAAOC,OAAPD,OAAA,KAAAA,CAAA,GAAiBtG,EAAO,QAAYvF,GAAnB,KAAgCyB,EAAIzB,IAAK2L,KAClE,IAPP,SASUI,YAAiBzG,EAAYlF,EAAIX,GAT3C,uBAUUgI,IAAMC,MAAM,KAVtB,OAWIR,GAAiBhB,GAXrB,4CAtJiE,sBAqBjE3G,qBAAU,WACN,IAAI8H,EAAUX,EAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASuB,EAASzB,MACxE,IA4IH,IAAInH,GAAW8G,EAAO,QAAY/F,KAAI,SAAA2I,GAClC,IAAMC,EAAQ5C,EAAM,MAAY,GAChC,MAAO,CACH7F,MAAOwI,EAAM,MACb1I,KAAM2I,EAAK5I,KAAI,SAAA6I,GAAG,MAAK,CAACjI,GAAIiI,EAAG,GAAQhI,KAAOgI,EAAG,YAAgBF,EAAM,OAAa,WAIxFG,GAAe,GACbC,GAAQhD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,OAAnBA,EAAM,QAChDM,GAAalD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,YAAnBA,EAAM,QACrDO,GAAWnD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,UAAnBA,EAAM,QAWzD,OAVII,KACAD,GAAalI,GAAKmI,GAAK,OAEvBE,KACAH,GAAajB,QAAUoB,GAAU,OAEjCC,KACAJ,GAAa9F,MAAQkG,GAAQ,OAI7B,oCACI,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKzG,UAAWtD,EAAQqF,KAAMvB,QAAS,UAE/BwC,EAAO,SAAeA,EAAO,QAAYzF,OAAS,EAC9C,kBAACmJ,EAAA,EAAD,CAAa1G,UAAWtD,EAAQoD,QAC5B,kBAAC6G,EAAA,EAAD,CAAQ1G,MAAOoD,EACPvE,SA5KhD,SAA4BC,GACxB,IAAI+F,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACda,EAAiBvE,EAAMK,OAAOa,OAC9BkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAAS/F,EAAMK,OAAOa,MAAOoD,MA0K7C,kBAACuD,EAAA,EAAD,CAAU3G,MAAO,oBAAjB,iBAEK+C,EAAO,SAAe,IAClB/F,KAAI,SAAA2I,GAAM,OAAI,kBAACgB,EAAA,EAAD,CAAUnI,IAAKmH,EAAM,KAAU3F,MAAO2F,EAAM,MAAWA,EAAM,YAK5F,KAER,kBAAC7F,EAAA,EAAD,CACIC,UAAWtD,EAAQX,MACnB8K,YAAY,eACZC,SAAU3C,EAGV4C,QAxJhC,SAA8BhI,GACJ,KAAlBA,EAAMiI,SACNnC,QAyJoB,kBAACnE,EAAA,EAAD,CAAYuG,KAAK,SACLjH,UAAWtD,EAAQiE,WACnBuG,aAAW,SACXtG,QAASiE,IAEjB,kBAACsC,EAAA,EAAD,OAGJ,kBAACvI,EAAA,EAAD,CAAUwI,MAAM,UACNnH,MAAOsD,EACPzE,SA9KtC,SAA8BC,GAC1B,IAAI+F,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXJ,EAASzE,EAAMK,OAAOJ,SACtBmE,EAASyB,YAAc7B,EAAY,EAAGc,EAAS9E,EAAMK,OAAOJ,QAAS8F,EAASzB,KAyK5CrE,QAASuE,IArCvB,8BA2CJ,kBAAC+C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGrH,UAAWtD,EAAQ6F,OAC/B,SAATkB,EAEO,kBAAC,GAAD,CAAQ6D,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM4G,YAAmBzE,KAH1C,4BAQA,kBAAC,IAAMvE,SAAP,KACQ,kBAAC,GAAD,CAAQ8I,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAO2D,IAAoB,KAHxC,gBAKA,kBAAC,GAAD,CAAQ+C,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAW6B,GAAYlF,OAAS,GAAG8G,IAAoB,KAHpE,iBAShB,kBAAC,GAAD,CAAQiD,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM+D,GAAiBhB,KAHxC,4BAKEd,EAAS4E,KAAKC,SAAW,kBAAC,GAAD,CAAQJ,QAAQ,WACnCF,MAAM,UACNxG,QAAS,kBAAM8C,EAAiB,SAATD,EAAkB,OAAS,SAClD8D,GAAI,GACD,SAAT9D,EAAkB,eAAO,gBACzB,uCAKV,6BAEA,kBAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAC9E,QAAS,GACrB,kBAAC6E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdlH,QAAQ,EACRD,cA3PtC,SAAwBuB,EAAImB,GACxByD,GAAczD,EAAUyD,GAAY7C,OAAO/B,GAAM4E,GAAY5C,QAAO,SAAAC,GAAM,OAAIA,IAAWjC,MA2PvDrB,SA7R2B,iDA8R3BC,SA9R2B,iDAmSjD,6BAEA,kBAAC6J,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAKnH,MAAO,UACR,kBAAC,GAAD,CAAQgI,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAsB,IAAZhE,GAFlB,gBAMA,kBAAC,GAAD,CAAK1F,UAAW,OAAQ2J,EAAG,GACW,KAAhC3E,EAAM,aAAmB,GAAW,EAAIU,EAAU,EADxD,MAC8DV,EAAM,aAAmB,GAEvF,kBAAC,GAAD,CAAQqE,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAWhE,EAAU,KAAQV,EAAM,aAAmB,IAAuC,KAAhCA,EAAM,aAAmB,IAF9F,qBAepB,kBAAC4E,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAMxD,GACNyD,QAAS,kBAAMxD,IAAoB,KAEnC,kBAACyD,EAAA,EAAD,CAAaC,MAAO,CAAEC,OAAQ,SAA9B,gBAGA,kBAACC,EAAA,EAAD,KAGQpC,GAAalI,GACT,kBAACyI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAalI,GAA1B,MAEJ,kBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAalI,GACpByJ,QAAS,WACTgB,WAAW,EACXxB,SAAUhD,EACVyE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAKzD,KAGJW,GAAajB,QACT,kBAACwB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAajB,QAA1B,MAEJ,kBAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAajB,QACpBwC,QAAS,WACTgB,WAAW,EACXxB,SAAU7C,EACVsE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAa9F,MACT,kBAACqG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAa9F,MAA1B,MAEJ,kBAACqG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAa9F,MACpBqH,QAAS,WACTgB,WAAW,EACXxB,SAAU5C,EACVqE,WACI,SAACC,GACiB,UAAVA,EAAE/J,KAAiB2G,UAO3C,MAIZ,kBAACuD,EAAA,EAAD,KAEoB,KAAZnE,GACA,kBAAC,GAAD,CAAKoE,GAAI,GAAIX,MAAO,CAACb,MAAO,QAA5B,IAAqC,+BAAK5C,GAAL,MAC/B,qCAEV,kBAAC,GAAD,CAAQ5D,QAASwE,GAAkBgC,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAM2D,IAAoB,IAAQ6C,MAAM,WAAnE,kBAOR,kBAACS,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAM1D,GACN2D,QAAS,kBAAM1D,IAAoB,KAEnC,kBAAC2D,EAAA,EAAD,CAAaC,MAAO,CAAEC,OAAQ,SAA9B,iBAGA,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACKpG,GAAYlF,OADjB,mGAIJ,kBAACoL,EAAA,EAAD,KACI,kBAAC,GAAD,CAAQ/H,QAzayC,4CAyadwG,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAMyD,IAAoB,IAAQ+C,MAAM,WAAnE,sBC1bd9F,GAASC,YAAOC,IAAPD,CAAkBE,IAASC,IAAQC,KAC5CtC,GAAMkC,YAAOK,IAAPL,CAAeE,IAASC,KAE9B9F,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC+F,YAAa,CAAEC,SAAU,KACzBhC,OAAQ,CAAEgC,SAAU,IACpBC,KAAM,CAAEpD,QAAS,UAAW6B,QAAS,OAAQwB,WAAY,SAAUvB,MAAO,KAC1E1E,MAAO,CAAEkG,WAAYnG,EAAM2F,QAAQ,GAAIS,KAAM,EAAGC,aAAc,iBAAkB,UAAW,CAAEA,aAAc,oBAC3GxB,WAAY,CAAChC,QAAS,GACtByD,QAAS,CAAEC,OAAQ,GAAIC,OAAQ,GAC/BC,MAAO,CAAEC,UAAW,aAGpBC,GAAc,GACdC,GAAkB,GA8aPC,oBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,YADrBF,EA7af,YAA4D,IAA3CI,EAA0C,EAA1CA,WAAYF,EAA8B,EAA9BA,SAAUG,EAAoB,EAApBA,QAC7BC,EADiD,EAAXC,QACrBH,IAAe,GAChCI,EAAWC,cACX1G,EAAUd,KAHuC,EAIbe,mBAAS,oBAJI,mBAIhD0G,EAJgD,KAIjCC,EAJiC,OAM3B3G,oBAAS,GANkB,mBAMhD4G,EANgD,KAMvCC,EANuC,OAO/B7G,mBAAS,QAPsB,mBAOhD8G,EAPgD,KAO1CC,EAP0C,OAQzB/G,mBAAS,GARgB,mBAQhDgH,EARgD,KAQvCC,EARuC,OASrCjH,mBAAS,IAApBkH,EATgD,oBAYjDC,EAAcC,IAAMC,OAAO,MAC3BC,EAAmBF,IAAMC,OAAO,MAChCE,EAAiBH,IAAMC,OAAO,MAC9BG,EAAaJ,IAAMC,OAAO,CAAC/D,MAAO,KAfe,GAiBP8D,IAAMpH,UAAS,GAjBR,qBAiBhDyH,GAjBgD,MAiB9BC,GAjB8B,SAkBPN,IAAMpH,UAAS,GAlBR,qBAkBhD2H,GAlBgD,MAkB9BC,GAlB8B,SAmBzBR,IAAMpH,SAAS,IAnBU,qBAmBhD6H,GAnBgD,MAmBvCC,GAnBuC,MAiCvD,SAASC,GAAe7G,EAAImB,GACxByD,GAAczD,EAAUyD,GAAY7C,OAAO/B,GAAM4E,GAAY5C,QAAO,SAAAC,GAAM,OAAIA,IAAWjC,KAG7F,SAAS8G,GAAiBhB,GACtB7C,QAAQC,IAAIkC,EAAM,aACfU,EAAUV,EAAM,cAInBW,EAAWD,GACXR,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASb,GAAiBW,KAGnF,SAASwB,KACL,IAAIC,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXT,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IApDd,8CAsEvD,8BAAA2B,EAAA,sDACQF,EAAUX,EAAWY,QAAQ9E,MACxBxC,EAAI,EAFjB,YAEoBA,EAAIgF,GAAYlF,QAFpC,gCAGc0H,YAAiBlC,EAAYN,GAAYhF,IAHvD,OAE4CA,IAF5C,6BAKIgF,GAAc,GACd4B,IAAoB,GANxB,UAOUa,IAAMC,MAAM,KAPtB,QAQIhC,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IARrE,6CAtEuD,+BAiFxC+B,KAjFwC,8EAiFvD,oCAAAJ,EAAA,6DACQK,EAAW,GACXC,EAAgB,GAChBC,EAAc,GAEQ,MAAvBzB,EAAYiB,UACXM,EAAWvB,EAAYiB,QAAQ9E,OAEJ,MAA5BgE,EAAiBc,UAChBO,EAAgBrB,EAAiBc,QAAQ9E,OAEhB,MAA1BiE,EAAea,UACdQ,EAAcrB,EAAea,QAAQ9E,OAZ7C,SAeUuF,YAAiBzC,EAAY,CAAClF,GAAIwH,EAAUP,QAASQ,EAAerF,MAAOsF,IAfrF,cAiBQE,EAAM,QACMC,IAAbL,GAAuC,OAAbA,GAAkC,KAAbA,GAAmBA,EAAS9H,OAAS,IACnFuD,QAAQC,IAAI,WAAYsE,EAAUA,EAAS9H,QAC3CkI,GAAOJ,QAGUK,IAAlBJ,GAAiD,OAAlBA,GAA4C,KAAlBA,GAAwBA,EAAc/H,OAAS,IACvGuD,QAAQC,IAAI,gBAAiBuE,EAAeA,EAAc/H,SAC/C,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOH,QAGQI,IAAhBH,GAA6C,OAAhBA,GAAwC,KAAhBA,GAAsBA,EAAYhI,OAAS,IAC/FuD,QAAQC,IAAI,cAAewE,EAAaA,EAAYhI,SACzC,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOF,GAGe,MAAvBzB,EAAYiB,UACXjB,EAAYiB,QAAQ9E,MAAQ,IAED,MAA5BgE,EAAiBc,UAChBd,EAAiBc,QAAQ9E,MAAQ,IAER,MAA1BiE,EAAea,UACdb,EAAea,QAAQ9E,MAAQ,IA9CvC,UAiDUiF,IAAMC,MAAM,KAjDtB,QAkDQL,EAAUX,EAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IACjEoB,GAAW,IAAMgB,EAAM,+DACvBE,YAAW,WACPlB,GAAW,MACZ,KAvDP,6CAjFuD,sBAqBvDzH,qBAAU,WACN,IAAI8H,EAAUX,EAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASuB,EAASzB,MACxE,IAmHH,IAAInH,GAAW8G,EAAO,QAAY/F,KAAI,SAAC2I,EAAQrH,GAC3C,IAAMsH,EAAQ5C,EAAM,MAAY,GAChC,MAAO,CACH7F,MAAOwI,EAAM,MAEb1I,KAAM2I,EAAK5I,KAAI,SAAA6I,GAAG,MAAK,CAACjI,GAAIiI,EAAG,GAAQhI,KAAOgI,EAAG,YAAgBF,EAAM,OAAa,WAKxFG,GAAe,GACbC,GAAQhD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,OAAnBA,EAAM,QAChDM,GAAalD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,YAAnBA,EAAM,QACrDO,GAAWnD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,UAAnBA,EAAM,QAWzD,OAVII,KACAD,GAAalI,GAAKmI,GAAK,OAEvBE,KACAH,GAAajB,QAAUoB,GAAU,OAEjCC,KACAJ,GAAa9F,MAAQkG,GAAQ,OAI7B,kBAAC,IAAM3H,SAAP,KACI,6BACA,kBAAC4H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKzG,UAAWtD,EAAQqF,KAAMvB,QAAS,UAE/BwC,EAAO,SAAeA,EAAO,QAAYzF,OAAS,EAC9C,kBAACmJ,EAAA,EAAD,CAAa1G,UAAWtD,EAAQoD,QAC5B,kBAAC6G,EAAA,EAAD,CAAQ1G,MAAOoD,EACPvE,SArJhD,SAA4BC,GACxB,IAAI+F,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACda,EAAiBvE,EAAMK,OAAOa,OAC9BkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAAS/F,EAAMK,OAAOa,MAAOoD,MAmJ7C,kBAACuD,EAAA,EAAD,CAAU3G,MAAO,oBAAjB,iBAEK+C,EAAO,SAAe,IAClB/F,KAAI,SAAA2I,GAAM,OAAI,kBAACgB,EAAA,EAAD,CAAUnI,IAAKmH,EAAM,KAAU3F,MAAO2F,EAAM,MAAWA,EAAM,YAK5F,KAGR,kBAAC7F,EAAA,EAAD,CACIC,UAAWtD,EAAQX,MACnB8K,YAAY,eACZC,SAAU3C,EAGV4C,QAlIhC,SAA8BhI,GACJ,KAAlBA,EAAMiI,SACNnC,QAkIoB,kBAACnE,EAAA,EAAD,CAAYuG,KAAK,SACLjH,UAAWtD,EAAQiE,WACnBuG,aAAW,SACXtG,QAASiE,IAEjB,kBAACsC,EAAA,EAAD,OAGJ,kBAACvI,EAAA,EAAD,CAAUwI,MAAM,UACNnH,MAAOsD,EACPzE,SAvJtC,SAA8BC,GAC1B,IAAI+F,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXJ,EAASzE,EAAMK,OAAOJ,SACtBmE,EAASyB,YAAc7B,EAAY,EAAGc,EAAS9E,EAAMK,OAAOJ,QAAS8F,EAASzB,OA6G1D,8BA0CJ,kBAACiD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGrH,UAAWtD,EAAQ6F,OAC/B,SAATkB,EAEO,kBAAC,GAAD,CAAQ6D,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM4G,YAAmBzE,KAH1C,4BAQA,kBAAC,IAAMvE,SAAP,KACQ,kBAAC,GAAD,CAAQ8I,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WACL2D,IAAoB,KAJ5B,gBAOA,kBAAC,GAAD,CAAQ+C,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAW6B,GAAYlF,OAAS,GAAG8G,IAAoB,KAHpE,iBAShB,kBAAC,GAAD,CAAQiD,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM+D,GAAiBhB,KAHxC,4BAKCd,EAAS4E,KAAKC,SAAW,kBAAC,GAAD,CAAQJ,QAAQ,WAClCF,MAAM,UACNxG,QAAS,kBAAM8C,EAAiB,SAATD,EAAkB,OAAS,SAClD8D,GAAI,GACD,SAAT9D,EAAkB,eAAO,gBACzB,uCAIV,6BAEA,kBAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAC9E,QAAS,GACrB,kBAAC6E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,EACNC,MAAO,MAGzB,kBAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,GACNC,MAAO,MAGzB,kBAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,GACNC,MAAO,MAGzB,kBAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdnH,cAAeoI,GACfvI,KAAM,GACNC,MAAO,OAK7B,6BAEA,kBAACkK,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAKnH,MAAO,UACR,kBAAC,GAAD,CAAQgI,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAsB,IAAZhE,GAFlB,gBAMA,kBAAC,GAAD,CAAK1F,UAAW,OAAQ2J,EAAG,GACW,KAAhC3E,EAAM,aAAmB,GAAW,EAAIU,EAAU,EADxD,MAC8DV,EAAM,aAAmB,GAEvF,kBAAC,GAAD,CAAQqE,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAWhE,EAAU,KAAQV,EAAM,aAAmB,IAAuC,KAAhCA,EAAM,aAAmB,IAF9F,qBAcpB,kBAAC4E,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAMxD,GACNyD,QAAS,kBAAMxD,IAAoB,KAEnC,kBAACyD,EAAA,EAAD,CAAaC,MAAO,CAACC,OAAQ,SAA7B,gBAGA,kBAACC,EAAA,EAAD,KAEQpC,GAAalI,GACT,kBAACyI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAalI,GAA1B,MAEJ,kBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAalI,GACpByJ,QAAS,WACTgB,WAAW,EACXxB,SAAUhD,EACVyE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAajB,QACT,kBAACwB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAajB,QAA1B,MAEJ,kBAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAajB,QACpBwC,QAAS,WACTgB,WAAW,EACXxB,SAAU7C,EACVsE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAa9F,MACT,kBAACqG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAa9F,MAA1B,MAEJ,kBAACqG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAa9F,MACpBqH,QAAS,WACTgB,WAAW,EACXxB,SAAU5C,EACVqE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,MAGZ,kBAACuD,EAAA,EAAD,KAEoB,KAAZnE,GACA,kBAAC,GAAD,CAAKoE,GAAI,GAAIX,MAAO,CAACb,MAAO,QAA5B,IAAqC,+BAAK5C,GAAL,MAC/B,qCAEV,kBAAC,GAAD,CAAQ5D,QAASwE,GAAkBgC,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAM2D,IAAoB,IAAQ6C,MAAM,WAAnE,kBAOR,kBAACS,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAM1D,GACN2D,QAAS,kBAAM1D,IAAoB,KAEnC,kBAAC2D,EAAA,EAAD,CAAaC,MAAO,CAACC,OAAQ,SAA7B,iBAGA,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACKpG,GAAYlF,OADjB,mGAIJ,kBAACoL,EAAA,EAAD,KACI,kBAAC,GAAD,CAAQ/H,QAha+B,4CAgaJwG,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAMyD,IAAoB,IAAQ+C,MAAM,WAAnE,sBCnbd9F,GAASC,YAAOC,IAAPD,CAAkBE,IAASC,IAAQC,KAC5CtC,GAAMkC,YAAOK,IAAPL,CAAeE,IAASC,KAE9B9F,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC+F,YAAa,CAAEC,SAAU,KACzBhC,OAAQ,CAAEgC,SAAU,IACpBC,KAAM,CAAEpD,QAAS,UAAW6B,QAAS,OAAQwB,WAAY,SAAUvB,MAAO,KAC1E1E,MAAO,CAAEkG,WAAYnG,EAAM2F,QAAQ,GAAIS,KAAM,EAAGC,aAAc,iBAAkB,UAAW,CAAEA,aAAc,oBAC3GxB,WAAY,CAAChC,QAAS,GACtByD,QAAS,CAAEC,OAAQ,GAAIC,OAAQ,GAC/BC,MAAO,CAAEC,UAAW,aAGpBC,GAAc,GACdC,GAAkB,GAwbPC,oBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,YADrBF,EAvbf,YAAsE,IAA1CI,EAAyC,EAAzCA,WAAYF,EAA6B,EAA7BA,SAAUG,EAAmB,EAAnBA,QACxCC,EAD2D,EAAVC,QAChCH,IAAe,GAChCI,EAAWC,cACX1G,EAAUd,KAHiD,EAIvBe,mBAAS,oBAJc,mBAI1D0G,EAJ0D,KAI3CC,EAJ2C,OAMrC3G,oBAAS,GAN4B,mBAM1D4G,EAN0D,KAMjDC,EANiD,OAOzC7G,mBAAS,QAPgC,mBAO1D8G,EAP0D,KAOpDC,EAPoD,OAQnC/G,mBAAS,GAR0B,mBAQ1DgH,EAR0D,KAQjDC,EARiD,OAS/CjH,mBAAS,IAApBkH,EAT0D,oBAY3DC,EAAcC,IAAMC,OAAO,MAC3BC,EAAmBF,IAAMC,OAAO,MAChCE,EAAiBH,IAAMC,OAAO,MAC9BG,EAAaJ,IAAMC,OAAO,CAAC/D,MAAO,KAfyB,GAiBjB8D,IAAMpH,UAAS,GAjBE,qBAiB1DyH,GAjB0D,MAiBxCC,GAjBwC,SAkBjBN,IAAMpH,UAAS,GAlBE,qBAkB1D2H,GAlB0D,MAkBxCC,GAlBwC,SAoBnCR,IAAMpH,SAAS,IApBoB,qBAoB1D6H,GApB0D,MAoBjDC,GApBiD,MAyCjE,SAASE,GAAiBhB,GAEnBA,EAAUV,EAAM,cAInBW,EAAWD,GACXR,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASb,GAAiBW,KAGnF,SAASwB,KACL,IAAIC,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXT,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IAxDJ,8CA0EjE,8BAAA2B,EAAA,sDACQF,EAAUX,EAAWY,QAAQ9E,MACxBxC,EAAI,EAFjB,YAEoBA,EAAIgF,GAAYlF,QAFpC,gCAGc0H,YAAiBlC,EAAYN,GAAYhF,IAHvD,OAE4CA,IAF5C,6BAKIgF,GAAc,GACd4B,IAAoB,GANxB,UAOUa,IAAMC,MAAM,KAPtB,QAQIhC,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IARrE,6CA1EiE,+BAqFlD+B,KArFkD,8EAqFjE,oCAAAJ,EAAA,6DACQK,EAAW,GACXC,EAAgB,GAChBC,EAAc,GAEQ,MAAvBzB,EAAYiB,UACXM,EAAWvB,EAAYiB,QAAQ9E,OAEJ,MAA5BgE,EAAiBc,UAChBO,EAAgBrB,EAAiBc,QAAQ9E,OAEhB,MAA1BiE,EAAea,UACdQ,EAAcrB,EAAea,QAAQ9E,OAZ7C,SAeUuF,YAAiBzC,EAAY,CAAClF,GAAIwH,EAAUP,QAASQ,EAAerF,MAAOsF,IAfrF,cAiBQE,EAAM,QACMC,IAAbL,GAAuC,OAAbA,GAAkC,KAAbA,GAAmBA,EAAS9H,OAAS,IACnFkI,GAAOJ,QAGUK,IAAlBJ,GAAiD,OAAlBA,GAA4C,KAAlBA,GAAwBA,EAAc/H,OAAS,IACvGuD,QAAQC,IAAI,gBAAiBuE,EAAeA,EAAc/H,SAC/C,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOH,QAGQI,IAAhBH,GAA6C,OAAhBA,GAAwC,KAAhBA,GAAsBA,EAAYhI,OAAS,IAC/FuD,QAAQC,IAAI,cAAewE,EAAaA,EAAYhI,SACzC,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOF,GAGe,MAAvBzB,EAAYiB,UACXjB,EAAYiB,QAAQ9E,MAAQ,IAED,MAA5BgE,EAAiBc,UAChBd,EAAiBc,QAAQ9E,MAAQ,IAER,MAA1BiE,EAAea,UACdb,EAAea,QAAQ9E,MAAQ,IA7CvC,UAgDUiF,IAAMC,MAAM,KAhDtB,QAiDQL,EAAUX,EAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IAEjEoB,GAAW,IAAMgB,EAAM,+DACvBE,YAAW,WACPlB,GAAW,MACZ,KAvDP,6CArFiE,oEA+IjE,WAAkC5G,GAAlC,SAAAmH,EAAA,yDACS+D,OAAOC,QAAQ,sFADxB,0CAEe,GAFf,cAIIvG,GAAcA,GAAY5C,QAAO,SAAAoJ,GAAa,OAAIA,IAAkBpL,KAJxE,SAKUoH,YAAiBlC,EAAYlF,GALvC,uBAMUqH,IAAMC,MAAM,KANtB,OAOIR,GAAiBhB,GAPrB,4CA/IiE,oEAyJjE,WAAkC9F,EAAIqB,EAAKgK,GAA3C,eAAAlE,EAAA,yDACS+D,OAAOC,QAAQ,sFADxB,0CAEe,GAFf,cAKQ9L,EAAOgM,EAAQC,QAAO,SAACC,EAAGC,EAAG5L,GAC7B,OAAO6L,OAAOC,OAAPD,OAAA,KAAAA,CAAA,GAAiBtG,EAAO,QAAYvF,GAAnB,KAAgCyB,EAAIzB,IAAK2L,KAClE,IAPP,SASUI,YAAiBzG,EAAYlF,EAAIX,GAT3C,uBAUUgI,IAAMC,MAAM,KAVtB,OAWIR,GAAiBhB,GAXrB,4CAzJiE,sBAyBjE3G,qBAAU,WACN,IAAI8H,EAAUX,EAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASuB,EAASzB,MACxE,IA2IH,IAAInH,GAAW8G,EAAO,QAAY/F,KAAI,SAAA2I,GAClC,IAAMC,EAAQ5C,EAAM,MAAY,GAChC,MAAO,CACH7F,MAAOwI,EAAM,MACb1I,KAAM2I,EAAK5I,KAAI,SAAA6I,GAAG,MAAK,CAACjI,GAAIiI,EAAG,GAAQhI,KAAOgI,EAAG,YAAgBF,EAAM,OAAa,WAIxFG,GAAe,GACbC,GAAQhD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,OAAnBA,EAAM,QAChDM,GAAalD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,YAAnBA,EAAM,QACrDO,GAAWnD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,UAAnBA,EAAM,QAWzD,OAVII,KACAD,GAAalI,GAAKmI,GAAK,OAEvBE,KACAH,GAAajB,QAAUoB,GAAU,OAEjCC,KACAJ,GAAa9F,MAAQkG,GAAQ,OAI7B,oCACI,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKzG,UAAWtD,EAAQqF,KAAMvB,QAAS,UAE/BwC,EAAO,SAAeA,EAAO,QAAYzF,OAAS,EAC9C,kBAACmJ,EAAA,EAAD,CAAa1G,UAAWtD,EAAQoD,QAC5B,kBAAC6G,EAAA,EAAD,CAAQ1G,MAAOoD,EACPvE,SA3KhD,SAA4BC,GACxB,IAAI+F,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACda,EAAiBvE,EAAMK,OAAOa,OAC9BkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAAS/F,EAAMK,OAAOa,MAAOoD,MAyK7C,kBAACuD,EAAA,EAAD,CAAU3G,MAAO,oBAAjB,iBAEK+C,EAAO,SAAe,IAClB/F,KAAI,SAAA2I,GAAM,OAAI,kBAACgB,EAAA,EAAD,CAAUnI,IAAKmH,EAAM,KAAU3F,MAAO2F,EAAM,MAAWA,EAAM,YAK5F,KAER,kBAAC7F,EAAA,EAAD,CACIC,UAAWtD,EAAQX,MACnB8K,YAAY,eACZC,SAAU3C,EAGV4C,QAvJhC,SAA8BhI,GACJ,KAAlBA,EAAMiI,SACNnC,QAwJoB,kBAACnE,EAAA,EAAD,CAAYuG,KAAK,SACLjH,UAAWtD,EAAQiE,WACnBuG,aAAW,SACXtG,QAASiE,IAEjB,kBAACsC,EAAA,EAAD,OAGJ,kBAACvI,EAAA,EAAD,CAAUwI,MAAM,UACNnH,MAAOsD,EACPzE,SA7KtC,SAA8BC,GAC1B,IAAI+F,EAAUX,EAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXJ,EAASzE,EAAMK,OAAOJ,SACtBmE,EAASyB,YAAc7B,EAAY,EAAGc,EAAS9E,EAAMK,OAAOJ,QAAS8F,EAASzB,OAmI1D,8BA0CJ,kBAACiD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGrH,UAAWtD,EAAQ6F,OAC/B,SAATkB,EAEO,kBAAC,GAAD,CAAQ6D,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM4G,YAAmBzE,KAH1C,4BAQA,kBAAC,IAAMvE,SAAP,CAAgByJ,MAAO,CAAC1H,eAAgB,kBAChC,kBAAC,GAAD,CAAQ+G,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAO2D,IAAoB,KAHxC,gBAMA,kBAAC,GAAD,CAAQ+C,QAAQ,WACZF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAW6B,GAAYlF,OAAS,GAAG8G,IAAoB,KAHpE,iBAShB,kBAAC,GAAD,CAAQiD,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM+D,GAAiBhB,KAHxC,4BAKCd,EAAS4E,KAAKC,SAAW,kBAAC,GAAD,CAAQJ,QAAQ,WAClCF,MAAM,UACNxG,QAAS,kBAAM8C,EAAiB,SAATD,EAAkB,OAAS,SAClD8D,GAAI,GACD,SAAT9D,EAAkB,eAAO,gBACzB,uCAMV,6BAEA,kBAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAC9E,QAAS,GACrB,kBAAC6E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdlH,QAAQ,EACRD,cA3PtC,SAAwBuB,EAAImB,GACxByD,GAAczD,EAAUyD,GAAY7C,OAAO/B,GAAM4E,GAAY5C,QAAO,SAAAC,GAAM,OAAIA,IAAWjC,MA2PvDrB,SAjS2B,iDAkS3BC,SAlS2B,iDAuSjD,6BAEA,kBAAC6J,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAKnH,MAAO,UACR,kBAAC,GAAD,CAAQgI,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAsB,IAAZhE,GAFlB,gBAMA,kBAAC,GAAD,CAAK1F,UAAW,OAAQ2J,EAAG,GACW,KAAhC3E,EAAM,aAAmB,GAAW,EAAIU,EAAU,EADxD,MAC8DV,EAAM,aAAmB,GAEvF,kBAAC,GAAD,CAAQqE,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAWhE,EAAU,KAAQV,EAAM,aAAmB,IAAuC,KAAhCA,EAAM,aAAmB,IAF9F,qBAepB,kBAAC4E,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAMxD,GACNyD,QAAS,kBAAMxD,IAAoB,KAEnC,kBAACyD,EAAA,EAAD,CAAaC,MAAO,CAAEC,OAAQ,SAA9B,gBAGA,kBAACC,EAAA,EAAD,KAGQpC,GAAalI,GACT,kBAACyI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAalI,GAA1B,MAEJ,kBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAalI,GACpByJ,QAAS,WACTgB,WAAW,EACXxB,SAAUhD,EACVyE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAajB,QACT,kBAACwB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAajB,QAA1B,MAEJ,kBAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAajB,QACpBwC,QAAS,WACTgB,WAAW,EACXxB,SAAU7C,EACVsE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,KAGJW,GAAa9F,MACT,kBAACqG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAa9F,MAA1B,MAEJ,kBAACqG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAE3F,OAAQ,OACjB+F,MAAOtC,GAAa9F,MACpBqH,QAAS,WACTgB,WAAW,EACXxB,SAAU5C,EACVqE,WAAa,SAACC,GAAsB,UAAVA,EAAE/J,KAAiB2G,UAIzD,MAIZ,kBAACuD,EAAA,EAAD,KAEoB,KAAZnE,GACA,kBAAC,GAAD,CAAKiF,GAAI,EAAGb,GAAI,GAAIX,MAAO,CAACb,MAAO,QAAnC,IAA4C,+BAAK5C,GAAL,MACtC,qCAGV,kBAAC,GAAD,CAAQ5D,QAASwE,GAAkBgC,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAM2D,IAAoB,IAAQ6C,MAAM,WAAnE,kBAOR,kBAACS,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAM1D,GACN2D,QAAS,kBAAM1D,IAAoB,KAEnC,kBAAC2D,EAAA,EAAD,CAAaC,MAAO,CAAEC,OAAQ,SAA9B,iBAGA,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACKpG,GAAYlF,OADjB,mGAIJ,kBAACoL,EAAA,EAAD,KACI,kBAAC,GAAD,CAAQ/H,QAxayC,4CAwadwG,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAMyD,IAAoB,IAAQ+C,MAAM,WAAnE,sBC1bd9F,GAASC,YAAOC,IAAPD,CAAkBE,IAASC,IAAQC,KAC5CtC,GAAMkC,YAAOK,IAAPL,CAAeE,IAASC,KAE9B9F,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrC+F,YAAa,CAAEC,SAAU,KACzBhC,OAAQ,CAAEgC,SAAU,IACpBC,KAAM,CAAEpD,QAAS,UAAW6B,QAAS,OAAQwB,WAAY,SAAUvB,MAAO,KAC1E1E,MAAO,CAAEkG,WAAYnG,EAAM2F,QAAQ,GAAIS,KAAM,EAAGC,aAAc,iBAAkB,UAAW,CAAEA,aAAc,oBAC3GxB,WAAY,CAAChC,QAAS,GACtByD,QAAS,CAAEC,OAAQ,GAAIC,OAAQ,GAC/BC,MAAO,CAAEC,UAAW,aAGpBC,GAAc,GACdC,GAAkB,GA8cPC,oBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,YADrBF,EA7cf,YAAsE,IAA1CI,EAAyC,EAAzCA,WAAYF,EAA6B,EAA7BA,SAAUG,EAAmB,EAAnBA,QACxCC,EAD2D,EAAVC,QAChCH,IAAe,GAChCI,EAAWC,cACX1G,EAAUd,KAHiD,EAIvBe,mBAAS,oBAJc,mBAI1D0G,EAJ0D,KAI3CC,EAJ2C,OAMrC3G,oBAAS,GAN4B,mBAM1D4G,EAN0D,KAMjDC,EANiD,OAOzC7G,mBAAS,QAPgC,mBAO1D8G,EAP0D,KAOpDC,EAPoD,OAQnC/G,mBAAS,GAR0B,mBAQ1DgH,EAR0D,KAQjDC,EARiD,OAS/CjH,mBAAS,IAApBkH,EAT0D,sBAWjBE,IAAMpH,UAAS,GAXE,mBAW1DyH,EAX0D,KAWxCC,EAXwC,QAYjBN,IAAMpH,UAAS,GAZE,qBAY1D2H,GAZ0D,MAYxCC,GAZwC,SAcnCR,IAAMpH,SAAS,IAdoB,qBAc1D6H,GAd0D,MAcjDC,GAdiD,MAiB3DX,GAAcC,IAAMC,OAAO,MAC3BC,GAAmBF,IAAMC,OAAO,MAChCE,GAAiBH,IAAMC,OAAO,MAC9BG,GAAaJ,IAAMC,OAAO,CAAC/D,MAAO,KAqBxC,SAAS0E,GAAiBhB,GAEnBA,EAAUV,EAAM,cAGnBW,EAAWD,GACXR,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASb,GAAiBW,KAGnF,SAASwB,KACL,IAAIC,EAAUX,GAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXT,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IAvDJ,8CAyEjE,8BAAA2B,EAAA,sDACQF,EAAUX,GAAWY,QAAQ9E,MACxBxC,EAAI,EAFjB,YAEoBA,EAAIgF,GAAYlF,QAFpC,gCAGc0H,YAAiBlC,EAAYN,GAAYhF,IAHvD,OAE4CA,IAF5C,6BAKIgF,GAAc,GACd4B,GAAoB,GANxB,UAOUa,IAAMC,MAAM,KAPtB,QAQIhC,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IARrE,6CAzEiE,+BAoFlD+B,KApFkD,8EAoFjE,oCAAAJ,EAAA,6DACQK,EAAW,GACXC,EAAgB,GAChBC,EAAc,GAEQ,MAAvBzB,GAAYiB,UACXM,EAAWvB,GAAYiB,QAAQ9E,OAEJ,MAA5BgE,GAAiBc,UAChBO,EAAgBrB,GAAiBc,QAAQ9E,OAEhB,MAA1BiE,GAAea,UACdQ,EAAcrB,GAAea,QAAQ9E,OAZ7C,SAeUuF,YAAiBzC,EAAY,CAAClF,GAAIwH,EAAUP,QAASQ,EAAerF,MAAOsF,IAfrF,cAkBQE,EAAM,QACMC,IAAbL,GAAuC,OAAbA,GAAkC,KAAbA,GAAmBA,EAAS9H,OAAS,IACnFkI,GAAOJ,QAGUK,IAAlBJ,GAAiD,OAAlBA,GAA4C,KAAlBA,GAAwBA,EAAc/H,OAAS,KAC5F,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOH,QAGQI,IAAhBH,GAA6C,OAAhBA,GAAwC,KAAhBA,GAAsBA,EAAYhI,OAAS,KACpF,KAARkI,GAAcA,EAAIlI,OAAS,KAC1BkI,GAAO,OAEXA,GAAOF,GAGe,MAAvBzB,GAAYiB,UACXjB,GAAYiB,QAAQ9E,MAAQ,IAED,MAA5BgE,GAAiBc,UAChBd,GAAiBc,QAAQ9E,MAAQ,IAER,MAA1BiE,GAAea,UACdb,GAAea,QAAQ9E,MAAQ,IA5CvC,UA+CUiF,IAAMC,MAAM,KA/CtB,QAgDQL,EAAUX,GAAWY,QAAQ9E,MACjCkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAASzB,IAEjEoB,GAAW,IAAMgB,EAAM,+DACvBE,YAAW,WACPlB,GAAW,MACZ,KAtDP,6CApFiE,oEA6IjE,WAAkC5G,GAAlC,SAAAmH,EAAA,yDAESgE,QAAQ,sFAFjB,0CAGe,GAHf,cAKIvG,GAAcA,GAAY5C,QAAO,SAAAoJ,GAAa,OAAIA,IAAkBpL,KALxE,SAMUoH,YAAiBlC,EAAYlF,GANvC,uBAOUqH,IAAMC,MAAM,KAPtB,OAQIR,GAAiBhB,GARrB,4CA7IiE,oEAwJjE,WAAkC9F,EAAIqB,EAAKgK,GAA3C,eAAAlE,EAAA,yDAESgE,QAAQ,sFAFjB,0CAGe,GAHf,cAMQ9L,EAAOgM,EAAQC,QAAO,SAACC,EAAGC,EAAG5L,GAC7B,OAAO6L,OAAOC,OAAPD,OAAA,KAAAA,CAAA,GAAiBtG,EAAO,QAAYvF,GAAnB,KAAgCyB,EAAIzB,IAAK2L,KAClE,IARP,SAUUI,YAAiBzG,EAAYlF,EAAIX,GAV3C,uBAWUgI,IAAMC,MAAM,KAXtB,OAYIR,GAAiBhB,GAZrB,4CAxJiE,sBAwBjE3G,qBAAU,WACN,IAAI8H,EAAUX,GAAWY,QAAQ9E,MAEjCkD,EAASyB,YAAc7B,EAAYY,EAASE,EAASN,EAASuB,EAASzB,MACxE,IA2IH,IAAInH,GAAW8G,EAAO,QAAY/F,KAAI,SAAA2I,GAClC,IAAMC,EAAQ5C,EAAM,MAAY,GAChC,MAAO,CACH7F,MAAOwI,EAAM,MACb1I,KAAM2I,EAAK5I,KAAI,SAAA6I,GAAG,MAAK,CAACjI,GAAIiI,EAAG,GAAQhI,KAAOgI,EAAG,YAAgBF,EAAM,OAAa,WAIxFG,GAAe,GACbC,GAAQhD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,OAAnBA,EAAM,QAChDM,GAAalD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,YAAnBA,EAAM,QACrDO,GAAWnD,EAAO,QAAYiD,MAAK,SAAAL,GAAM,MAAuB,UAAnBA,EAAM,QAWzD,OAVII,KACAD,GAAalI,GAAKmI,GAAK,OAEvBE,KACAH,GAAajB,QAAUoB,GAAU,OAEjCC,KACAJ,GAAa9F,MAAQkG,GAAQ,OAI7B,oCACI,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKzG,UAAWtD,EAAQqF,KAAMvB,QAAS,UAE/BwC,EAAO,SAAeA,EAAO,QAAYzF,OAAS,EAC9C,kBAACmJ,EAAA,EAAD,CAAa1G,UAAWtD,EAAQoD,QAC5B,kBAAC6G,EAAA,EAAD,CAAQ1G,MAAOoD,EACPvE,SA3KhD,SAA4BC,GACxB,IAAI+F,EAAUX,GAAWY,QAAQ9E,MACjCwC,GAAc,GACda,EAAiBvE,EAAMK,OAAOa,OAC9BkD,EAASyB,YAAc7B,EAAY,EAAGc,EAASN,EAASuB,EAAS/F,EAAMK,OAAOa,MAAOoD,MAyK7C,kBAACuD,EAAA,EAAD,CAAU3G,MAAO,oBAAjB,iBAEK+C,EAAO,SAAe,IAClB/F,KAAI,SAAA2I,GAAM,OAAI,kBAACgB,EAAA,EAAD,CAAUnI,IAAKmH,EAAM,KAAU3F,MAAO2F,EAAM,MAAWA,EAAM,YAK5F,KAER,kBAAC7F,EAAA,EAAD,CACIC,UAAWtD,EAAQX,MACnB8K,YAAY,eACZC,SAAU3C,GAGV4C,QAxJhC,SAA8BhI,GACJ,KAAlBA,EAAMiI,SACNnC,QAyJoB,kBAACnE,EAAA,EAAD,CAAYuG,KAAK,SACLjH,UAAWtD,EAAQiE,WACnBuG,aAAW,SACXtG,QAASiE,IAEjB,kBAACsC,EAAA,EAAD,OAGJ,kBAACvI,EAAA,EAAD,CAAUwI,MAAM,UACNnH,MAAOsD,EACPzE,SA9KtC,SAA8BC,GAC1B,IAAI+F,EAAUX,GAAWY,QAAQ9E,MACjCwC,GAAc,GACdC,GAAkBoC,EAClBlB,EAAW,GACXJ,EAASzE,EAAMK,OAAOJ,SACtBmE,EAASyB,YAAc7B,EAAY,EAAGc,EAAS9E,EAAMK,OAAOJ,QAAS8F,EAASzB,OAoI1D,8BA0CJ,kBAACiD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGrH,UAAWtD,EAAQ6F,OAC/B,SAATkB,EAEO,kBAAC,GAAD,CAAQ6D,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM4G,YAAmBzE,KAH1C,4BAQA,kBAAC,IAAMvE,SAAP,KACI,kBAAC,GAAD,CAAQ8I,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAQqD,GAAiBc,QAAS,GAAIR,IAAoB,KAH3E,gBAKA,kBAAC,GAAD,CAAQ+C,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,WAAW6B,GAAYlF,OAAS,GAAG8G,GAAoB,KAHxE,iBASZ,kBAAC,GAAD,CAAQiD,QAAQ,WACRF,MAAM,UACNG,GAAI,EACJ3G,QAAS,kBAAM+D,GAAiBhB,KAHxC,4BAMCd,EAAS4E,KAAKC,SAAW,kBAAC,GAAD,CAAQJ,QAAQ,WAClCF,MAAM,UACNxG,QAAS,kBAAM8C,EAAiB,SAATD,EAAkB,OAAS,SAClD8D,GAAI,GACD,SAAT9D,EAAkB,eAAO,gBACzB,uCAKV,6BAEA,kBAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAC9E,QAAS,GACrB,kBAAC6E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CAAcvK,SAAUA,GACVG,aAAuB,SAAToH,EACdlH,QAAQ,EACRD,cA1PtC,SAAwBuB,EAAImB,GACxByD,GAAczD,EAAUyD,GAAY7C,OAAO/B,GAAM4E,GAAY5C,QAAO,SAAAC,GAAM,OAAIA,IAAWjC,MA0PvDrB,SAhS2B,iDAiS3BC,SAjS2B,iDAsSjD,6BAEA,kBAAC6J,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAKnH,MAAO,UACR,kBAAC,GAAD,CAAQgI,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAsB,IAAZhE,GAFlB,gBAMA,kBAAC,GAAD,CAAK1F,UAAW,OAAQ2J,EAAG,GACW,KAAhC3E,EAAM,aAAmB,GAAW,EAAIU,EAAU,EADxD,MAC8DV,EAAM,aAAmB,GAEvF,kBAAC,GAAD,CAAQqE,QAAS,WACT1G,QAAS,kBAAM+D,GAAiBhB,EAAU,IAC1CgE,SAAWhE,EAAU,KAAQV,EAAM,aAAmB,IAAuC,KAAhCA,EAAM,aAAmB,IAF9F,qBAepB,kBAAC4E,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAMxD,GACNyD,QAAS,kBAAMxD,IAAoB,KAEnC,kBAACyD,EAAA,EAAD,CAAaC,MAAO,CAAEC,OAAQ,SAA9B,gBAGA,kBAACC,EAAA,EAAD,KAGQpC,GAAalI,GACT,kBAACyI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAalI,GAA1B,MAEJ,kBAACyI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAC3F,OAAQ,OAChB+F,MAAOtC,GAAalI,GACpByJ,QAAQ,WACRgB,WAAW,EACXxB,SAAUhD,GACVyE,WACI,SAACC,GACiB,UAAVA,EAAE/J,KACF2G,UAQxB,KAGJW,GAAajB,QACT,kBAACwB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAajB,QAA1B,MAEJ,kBAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAC3F,OAAQ,OAChB+F,MAAOtC,GAAajB,QACpBwC,QAAS,WACTgB,WAAW,EACXxB,SAAU7C,GACVsE,WACI,SAACC,GACiB,UAAVA,EAAE/J,KACF2G,UAQxB,KAGJW,GAAa9F,MACT,kBAACqG,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,GAAD,CAAKmB,EAAG,GAAR,IAAa7B,GAAa9F,MAA1B,MAEJ,kBAACqG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC2B,EAAA,EAAD,CACIH,MAAO,CAAC3F,OAAQ,OAChB+F,MAAOtC,GAAa9F,MACpBqH,QAAS,WACTgB,WAAW,EACXxB,SAAU5C,GACVqE,WACI,SAACC,GACqB,UAAVA,EAAE/J,KACF2G,UAQ5B,MAGZ,kBAACuD,EAAA,EAAD,KAEwB,KAAZnE,GACA,kBAAC,GAAD,CAAKiF,GAAI,EAAGb,GAAI,GAAIX,MAAO,CAACb,MAAO,QAAnC,IAA4C,+BAAK5C,GAAL,MACtC,qCAEd,kBAAC,GAAD,CACI5D,QACIwE,GAEJgC,MAAM,aAJV,gBAOA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAM2D,IAAoB,IAAQ6C,MAAM,WAAnE,kBAOR,kBAACS,EAAA,EAAD,CACIxH,WAAW,EACXyH,KAAM1D,EACN2D,QAAS,kBAAM1D,GAAoB,KAEnC,kBAAC2D,EAAA,EAAD,CAAaC,MAAO,CAAEC,OAAQ,SAA9B,iBAGA,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACKpG,GAAYlF,OADjB,mGAIJ,kBAACoL,EAAA,EAAD,KACI,kBAAC,GAAD,CAAQ/H,QA9byC,4CA8bdwG,MAAM,aAAzC,gBAGA,kBAAC,GAAD,CAAQkB,WAAS,EAAC1H,QAAS,kBAAMyD,GAAoB,IAAQ+C,MAAM,WAAnE,sBC5cLzE,uBAAQ,SAAAC,GAAK,sBAASA,EAAM8G,sBAA5B/G,EA/Bf,YAA8D,IAAnCgH,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,SAAU1G,EAAW,EAAXA,QACxCF,EAAU4G,EAASD,GACnB5G,EAAaC,EAAO,GAQtB6G,EAAS,KACb,OARa7G,EAAO,MAShB,IAAK,MAAO6G,EAASC,GAAK,MAC1B,IAAK,UAAWD,EAASE,GAAS,MAClC,IAAK,QAASF,EAASG,GAAO,MAC9B,IAAK,WAAYH,EAASE,GAAS,MACnC,IAAK,eAAgBF,EAASI,GAAa,MAC3C,IAAK,SAAUJ,EAASK,GAAQ,MAChC,QAASL,EAAS,kBAAM,kBAAC,IAAMrL,SAAP,gFAG5B,OACI,kBAAC,IAAMA,SAAP,KACI,kBAACqL,EAAD,CAAQ9G,WAAYA,EACZC,QAASA,EACTE,QAASA,S,iCClC7B,IAAMgC,EAAO,CACTC,MAAM,SAACgF,GAAD,OAAQ,IAAIC,SAAQ,SAAAC,GAAO,OAAI1E,WAAW0E,EAASF,QAM9CjF","file":"static/js/61.c4597a39.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    IconButton,\r\n    InputBase,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Delete as DeleteIcon, OfflinePin as OfflinePinIcon} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: { border: \"0px\" },\r\n}));\r\n\r\nfunction DynamicTable({dataList, from = 0, limit = 100000, showCheckBox = false, onSelectClick, isEdit = false, onUpdate = () => {}, onDelete = () => {}}) {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([])\r\n    const [array, setArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        setArray([...dataList.map(data => data.data)])\r\n    }, [dataList])\r\n\r\n    useEffect(() => {\r\n        setSelected([])\r\n    }, [showCheckBox])\r\n\r\n\r\n    const fields = dataList.map(data => data.field);\r\n\r\n    let rowCount = 0;\r\n    dataList.forEach(data => rowCount < data.data.length ? rowCount = data.data.length : rowCount);\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n        let cols = [];\r\n        for (let j = 0; j < fields.length; j++) {\r\n            if (array[j]) {\r\n                if (typeof array[j][i] !== 'object') {\r\n                    cols.push({id: array[j][i], text: array[j][i]})\r\n                } else {\r\n                    cols.push({id: array[j][i]['id'], text: array[j][i]['text']})\r\n                }\r\n            }\r\n        }\r\n        rows.push(cols)\r\n    }\r\n    rows = rows.splice(from, limit)\r\n\r\n    function handleSelectAllClick(checked) {\r\n        let ids = []\r\n        rows.forEach(row => {\r\n            onSelectClick(row[0].id, checked)\r\n            ids.push(row[0].id)\r\n        })\r\n        checked ? setSelected(ids) : setSelected([])\r\n    }\r\n    function handleSelectClick(id, checked) {\r\n        onSelectClick(id, checked)\r\n        checked ? setSelected(selected.concat(id)) : setSelected(selected.filter(select => select !== id))\r\n    }\r\n    function handleChange(event, id, colIdx, rowIdx) {\r\n        let cloneArray = array.slice()\r\n        cloneArray[colIdx][rowIdx]['text'] = event.target.value\r\n        setArray(cloneArray)\r\n    }\r\n    function handleEdit(id, rowIdx) {\r\n        let cols = []\r\n        let updateFields = []\r\n        for (let i = 0; i < array.length; i++) {\r\n            cols.push(array[i][rowIdx]['text'] || '')\r\n            console.log(fields[i])\r\n            updateFields.push(fields[i] || '')\r\n        }\r\n        onUpdate(id, cols, updateFields)\r\n    }\r\n    function handleDelete(id) {\r\n        onDelete(id)\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            fields.map((field, index) => (\r\n                                <React.Fragment key={field}>\r\n                                    {\r\n                                        showCheckBox && index === 0  ?\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox defaultChecked={false} onChange={(event) => handleSelectAllClick(event.target.checked)}/>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <TableCell>{field}</TableCell>\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        {\r\n                            showCheckBox && isEdit ?\r\n                                <TableCell>\r\n                                    <Box align={\"center\"}>\r\n                                        액션\r\n                                    </Box>\r\n                                </TableCell>\r\n                                :\r\n                                null\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((cols, rowIdx) => {\r\n                            return (\r\n                                <TableRow key={rowIdx}>\r\n                                    {\r\n                                        cols.map((col, colIdx) => {\r\n                                            return (\r\n                                                <React.Fragment key={colIdx}>\r\n                                                    {\r\n                                                        showCheckBox && colIdx === 0 ?\r\n                                                            <TableCell padding=\"checkbox\">\r\n                                                                <Checkbox checked={selected.includes(col.id)}\r\n                                                                          onChange={(event) => handleSelectClick(col.id, event.target.checked)}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <TableCell>\r\n                                                        {\r\n                                                            showCheckBox && isEdit ?\r\n                                                                // 수정 모드\r\n                                                                <InputBase className={classes.input}\r\n                                                                           value={col.text|| ''}\r\n                                                                           /*순서 주의 (colIdx, rowIdx)*/\r\n                                                                           onChange={(event) => handleChange(event, col.id, colIdx, rowIdx)}\r\n                                                                           fullWidth\r\n                                                                           b={0}\r\n                                                                />\r\n                                                                :\r\n                                                                // 조회 모드\r\n                                                                col.text\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        showCheckBox && isEdit ?\r\n                                            <TableCell>\r\n                                                <Box align={\"center\"} justifyContent={\"space-between\"} display=\"flex\" width=\"100%\">\r\n                                                    <Box></Box>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleEdit(cols[0]['id'], rowIdx)}\r\n                                                    >\r\n                                                        <OfflinePinIcon/>\r\n                                                    </IconButton>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleDelete(cols[0]['id'])}\r\n                                                    >\r\n                                                        <DeleteIcon/>\r\n                                                    </IconButton>\r\n\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nDynamicTable.prototype = {\r\n    dataList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DynamicTable","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Set({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m5={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Set)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        const createSearchColumn = createId !== '' ? 'id' : createKeyword !== '' ? 'keyword' : 'value'\r\n        // const createSearchKeyword = createId !== '' ? createId : createKeyword !== '' ? createKeyword : createValue\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        setMatch(true)\r\n        setSearchColumns(createSearchColumn)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    \r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                          checked={isMatch}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                             {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') handleCreateData();\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Space({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        console.log(result['lastPageNum']);\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            // 수정된 사항\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n            // data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][\"value\"] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Space)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // console.log(\"Synonym2Way\", authUser);\r\n    // authUser.role.analysis = false;\r\n\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment style={{justifyContent: \"space-between\"}}>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            \r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {\r\n                        message !== \"\" ? \r\n                        <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        // 등록 메시지 만들기\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { newCreateKeyword.current =\"\"; setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            \r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> \r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.id}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData();\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.keyword}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData()\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.value}\r\n                                        variant={\"outlined\"}\r\n                                        autoFocus={true} \r\n                                        inputRef={newCreateValue}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                    if (e.key === 'Enter') {\r\n                                                        handleCreateData();\r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                        {\r\n                            message !== \"\" ? \r\n                            <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                                : <></>\r\n                        }\r\n                    <Button \r\n                        onClick={\r\n                            handleCreateData\r\n                        } \r\n                        color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Set from './Set'\r\nimport Synonym from './Synonym'\r\nimport Space from './Space'\r\nimport Synonym2Way from './Synonym2Way'\r\nimport Custom from './Custom'\r\n\r\nfunction WrapperTabPanel({ activeIndex, settings, dataSet }) {\r\n    const setting = settings[activeIndex]\r\n    const dictionary = setting['id']\r\n    const type = setting['type']\r\n\r\n    // console.log(\"settings \", settings);\r\n    // console.log(\"dictionary \", dictionary);\r\n    // console.log(\"type \", type);\r\n    // console.log(\"dataSet \", dataSet);\r\n\r\n    let Viewer = null\r\n    switch (type) {\r\n        case \"SET\": Viewer = Set; break;\r\n        case \"SYNONYM\": Viewer = Synonym; break;\r\n        case \"SPACE\": Viewer = Space; break; // Set 과 동일함...\r\n        case \"COMPOUND\": Viewer = Synonym; break; // Synonym 과 동일함...\r\n        case \"SYNONYM_2WAY\": Viewer = Synonym2Way; break; // Synonym 과 동일함...\r\n        case \"CUSTOM\": Viewer = Custom; break; // Synonym 과 동일함...\r\n        default: Viewer = () => <React.Fragment>지원하지 않는 타입 입니다.</React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Viewer dictionary={dictionary}\r\n                    setting={setting}\r\n                    dataSet={dataSet}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.dictionaryReducers}))(WrapperTabPanel)","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils"],"sourceRoot":""}
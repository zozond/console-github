{"version":3,"sources":["pages/indices/indexTemplates/new.js","components/AntTabs/index.js","utils.js","redux/actions/indexTemplateActions.js","components/Json2Html/index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","edit","width","Divider","styled","MuiDivider","spacing","Box","MuiBox","positions","Card","MuiCard","Typography","MuiTypography","Button","MuiButton","palette","tabs","label","TEMPLATE","message","connect","store","templates","indexTemplateReducers","dispatch","history","useHistory","classes","useState","templateText","setTemplateText","indexPatternText","setIndexPatternText","tabIndex","setTabIndex","mappingMode","setMappingMode","settingMode","setSettingMode","mappingsJson","setMappingsJson","settingsJson","setSettingsJson","openMessage","setOpenMessage","inValid","setInvalid","Fragment","title","variant","gutterBottom","display","my","container","item","xs","align","className","value","onChange","event","target","error","color","onClick","tmpInValid","trim","test","indexPatternTextSplit","split","length","JSON","parse","Object","keys","tmpSettings","tmpMappings","properties","addIndexTemplateAction","template","index_patterns","settings","mappings","then","response","a","utils","sleep","push","catch","console","log","stringify","ml","placeholder","index","tabClassNames","borderBottom","component","row","checked","control","m","Json2html","json","type","style","minHeight","border","autoFocus","open","Tab","withStyles","root","textTransform","fontWeight","typography","fontWeightRegular","marginRight","opacity","fontWeightMedium","selected","props","disableRipple","AntTabs","React","state","setState","indicatorColor","textColor","scrollButtons","map","tab","key","id","icon","role","hidden","aria-labelledby","ms","Promise","resolve","setTimeout","client","Client","setIndexTemplatesAction","call","uri","SET_INDEX_TEMPLATES","payload","data","filter","startsWith","method","deleteIndexTemplateAction","setIndexTemplateAction","SET_INDEX_TEMPLATE","Render","validJson","topFields","val","undefined","cursor","flatJsonMap","flat","formatKeyFlatJsonMap","forEach","replaceKey","replace","sortKey","substring","lastIndexOf","suffix","cellSpacing","cellPadding","field","endsWith","obj","etc","k","find","o","join","MappingsJson2html","flatSettingsMap","mt","SettingsJson2html"],"mappings":"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","file":"static/js/43.8ee0bd9b.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport AntTabs from \"~/components/AntTabs\";\r\nimport Json2html from \"~/components/Json2Html\"\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    Radio,\r\n    RadioGroup,\r\n    TextareaAutosize,\r\n    TextField,\r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {palette, positions, spacing} from \"@material-ui/system\";\r\nimport {connect} from \"react-redux\";\r\nimport {addIndexTemplateAction} from \"../../../redux/actions/indexTemplateActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n}));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions, palette);\r\n\r\nconst tabs = [{label: \"매핑\"}, {label: \"셋팅\"}]\r\nconst TEMPLATE = [\r\n`{\r\n    \"properties\": {\r\n        \"hit\": {\r\n            \"type\": \"double\"\r\n        },\r\n        \"search\": {\r\n            \"type\": \"text\"\r\n        },\r\n        \"range\": {\r\n            \"type\": \"double\"\r\n        },\r\n        \"keyword\": {\r\n            \"type\": \"text\"\r\n        }\r\n    }\r\n}`, \r\n`{\r\n    \"refresh_interval\": \"1s\",\r\n    \"number_of_shards\": \"1\",\r\n    \"number_of_replicas\": \"0\"\r\n}`]\r\n\r\nlet message = \"\"\r\nfunction New({ dispatch }) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const [templateText, setTemplateText] = useState('')\r\n    const [indexPatternText, setIndexPatternText] = useState('')\r\n\r\n    const [tabIndex, setTabIndex] = useState(0)\r\n\r\n    const [mappingMode, setMappingMode] = useState(\"json\")\r\n    const [settingMode, setSettingMode] = useState(\"json\")\r\n\r\n    const [mappingsJson, setMappingsJson] = useState(TEMPLATE[0])\r\n    const [settingsJson, setSettingsJson] = useState(TEMPLATE[1])\r\n\r\n    const [openMessage, setOpenMessage] = useState(false)\r\n\r\n    const [inValid, setInvalid] = useState({})\r\n\r\n    function handleTabChane(index) {\r\n        setTabIndex(index)\r\n    }\r\n\r\n    function handleSubmitClick() {\r\n        let tmpInValid = {}\r\n        if (templateText.trim() === \"\" || /[^a-z0-9-_]/gi.test(templateText.trim())) {\r\n            tmpInValid['templateText'] = true\r\n        }\r\n        if (indexPatternText.trim() === \"\") {\r\n            tmpInValid['indexPatternText'] = true\r\n        } else {\r\n            let indexPatternTextSplit = indexPatternText.split(\",\")\r\n            if (indexPatternTextSplit[0] === \"\" && indexPatternTextSplit.length === 1) {\r\n                tmpInValid['indexPatternText'] = true\r\n            }\r\n        }\r\n\r\n        try {\r\n            JSON.parse(mappingsJson === \"\" ? \"{}\" : mappingsJson)\r\n        } catch(error) {\r\n            tmpInValid['mappingsJson'] = true\r\n        }\r\n\r\n        try {\r\n            JSON.parse(settingsJson === \"\" ? \"{}\" : settingsJson)\r\n        } catch(error) {\r\n            tmpInValid['settingsJson'] = true\r\n        }\r\n\r\n        if (Object.keys(tmpInValid).length > 0) {\r\n            setInvalid(tmpInValid)\r\n            return false;\r\n        }\r\n\r\n        let tmpSettings = JSON.parse(settingsJson === \"\" ? \"{}\" : settingsJson)\r\n        let tmpMappings = JSON.parse(mappingsJson === \"\" ? \"{}\" : mappingsJson)\r\n        if (!tmpMappings['properties']) {\r\n            tmpMappings = { properties: tmpMappings }\r\n        }\r\n\r\n        dispatch(addIndexTemplateAction( {\r\n            template: templateText,\r\n            index_patterns: indexPatternText.split(\",\"),\r\n            settings: tmpSettings,\r\n            mappings: tmpMappings\r\n        } )).then(async (response) => {\r\n            await utils.sleep(500)\r\n            history.push(\"../indices-templates/\" + templateText)\r\n        }).catch(error => {\r\n            console.log('error', error)\r\n            if (typeof error === 'object') {\r\n                message = \"[생성 실패]\" + JSON.stringify(error)\r\n            } else {\r\n                message = \"[생성 실패]\" + error\r\n            }\r\n            setOpenMessage(true)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"템플릿 생성\"/>\r\n\r\n            <Typography variant=\"h3\"\r\n                        gutterBottom\r\n                        display=\"inline\"\r\n            >\r\n                템플릿 생성\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <Box align={'left'}>\r\n                        <FormControl className={classes.formControl}>\r\n                            <TextField label=\"템플릿명\"\r\n                                       value={templateText}\r\n                                       onChange={event => setTemplateText(event.target.value)}\r\n                                       error={inValid['templateText']||false}\r\n                            />\r\n                        </FormControl>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Box align={'right'}>\r\n                        <Button variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={handleSubmitClick}\r\n                        >저장</Button>\r\n                        <Button variant=\"outlined\"\r\n                                onClick={() => history.push('../indices-templates')}\r\n                                ml={1}\r\n                        >취소</Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <TextField label=\"인덱스 패턴\"\r\n                           value={indexPatternText}\r\n                           placeholder={\"access-log-*,error-log-*\"}\r\n                           onChange={event => setIndexPatternText(event.target.value)}\r\n                           error={inValid['indexPatternText']||false}\r\n                />\r\n            </FormControl>\r\n\r\n            <br/><br/>\r\n\r\n            <AntTabs tabs={tabs}\r\n                     tabIndex={tabIndex}\r\n                     onChange={handleTabChane}\r\n                     tabClassNames={{borderBottom: \"1px solid #f44336\"}}\r\n            />\r\n\r\n\r\n            <br/>\r\n\r\n\r\n            <Box display={tabIndex === 0 ? \"block\" : \"none\"}>\r\n                {/* 맵핑 */}\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup row onChange={event => setMappingMode(event.target.value)}>\r\n                        <FormControlLabel value=\"form\"\r\n                                          checked={mappingMode === \"form\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"폼\"\r\n                        />\r\n                        <FormControlLabel value=\"json\"\r\n                                          checked={mappingMode === \"json\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"json\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                {\r\n                    mappingMode === \"form\" ?\r\n                        <Card>\r\n                            <CardContent m={0}>\r\n                                {Json2html({json: mappingsJson, type: \"mappings\"})}\r\n                            </CardContent>\r\n                        </Card>\r\n                        :\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <TextareaAutosize style={{minHeight: \"200px\", border: (inValid['mappingsJson'] ? \"1px solid #f44336\" : \"1px solid black\")}}\r\n                                                      className={classes.edit}\r\n                                                      value={mappingsJson}\r\n                                                      onChange={event => setMappingsJson(event.target.value)}\r\n                                                      autoFocus\r\n                                    />\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                }\r\n            </Box>\r\n\r\n            <Box display={tabIndex === 1 ? \"block\" : \"none\"}>\r\n                {/* 설정 */}\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup row onChange={event => setSettingMode(event.target.value)}>\r\n                        <FormControlLabel value=\"form\"\r\n                                          checked={settingMode === \"form\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"폼\"\r\n                        />\r\n                        <FormControlLabel value=\"json\"\r\n                                          checked={settingMode === \"json\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"json\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                {\r\n                    settingMode === \"form\" ?\r\n                        <Card>\r\n                            <CardContent m={0}>\r\n                                {Json2html({json: settingsJson, type: \"settings\"})}\r\n                            </CardContent>\r\n                        </Card>\r\n                        :\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <TextareaAutosize style={{minHeight: \"200px\", border: (inValid['settingsJson'] ? \"1px solid #f44336\" : \"1px solid black\")}}\r\n                                                      className={classes.edit}\r\n                                                      value={settingsJson}\r\n                                                      onChange={event => setSettingsJson(event.target.value)}\r\n                                                      autoFocus\r\n                                    />\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                }\r\n            </Box>\r\n\r\n            <Dialog open={openMessage}>\r\n                <DialogTitle>오류</DialogTitle>\r\n                <DialogContent>\r\n                    {message}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={() => setOpenMessage(false)}>\r\n                        확인\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({templates: store.indexTemplateReducers.templates}))(New);","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"} />)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils","import Client from '~/Client'\r\nimport {SET_INDEX_TEMPLATES, SET_INDEX_TEMPLATE} from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexTemplatesAction = () => dispatch => client.call({\r\n    uri: '/elasticsearch/_cat/templates?format=json'\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_TEMPLATES,\r\n    payload: response.data.filter(template => !template['name'].startsWith(\".\"))\r\n}))\r\n\r\n\r\nexport const addIndexTemplateAction = ({template, index_patterns, settings, mappings}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"PUT\",\r\n    data: {\r\n        index_patterns,\r\n        settings,\r\n        mappings\r\n    }\r\n})\r\n\r\nexport const deleteIndexTemplateAction = ({template}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"DELETE\",\r\n})\r\n\r\nexport const setIndexTemplateAction = ({ template }) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`\r\n}).then(response => dispatch({type: SET_INDEX_TEMPLATE, payload: response.data[template]}))","import React from \"react\";\r\nimport {\r\n    Box,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\nimport flat from \"flat\";\r\nimport styled from \"styled-components\";\r\nimport {positions, spacing} from \"@material-ui/system\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\n\r\nfunction SettingsJson2html(settings) {\r\n    if (!settings) {\r\n        return null\r\n    }\r\n\r\n    const flatSettingsMap = flat(settings['settings'] ? settings['settings'] : settings)\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        주요항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>샤드 갯수</TableCell>\r\n                                <TableCell>레플리카 갯수</TableCell>\r\n                                <TableCell>리프레쉬 간격</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_shards']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_replicas']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['defaults']||{})['index']||{})['refresh_interval']|| '-')}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        기타항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>키</TableCell>\r\n                                <TableCell>값</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                Object.keys(flatSettingsMap||{}).map(key => {\r\n                                    return (\r\n                                        <TableRow key={key}>\r\n                                            <TableCell>{key}</TableCell>\r\n                                            <TableCell>{flatSettingsMap[key]||''}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MappingsJson2html(json) {\r\n    const topFields = [\r\n        {title: \"타입\", key: \"type\", component: (val) => {return val}},\r\n        // {title: \"색인\", key: \"enabled\", component: (val) => {return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>}},\r\n        {title: \"색인\", key: \"enabled\", component: (val) => {\r\n            if (val !== undefined && val !== null && val === false) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                    </React.Fragment>\r\n                )\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }},\r\n        {title: \"분석기\", key: \"analyzer\", component: (val) => {return val}},\r\n        {title: \"copy_to\", key: \"copy_to\", component: (val) => {return val}},\r\n        {title: \"ignore_above\", key: \"ignore_above\", component: (val) => {return val}},\r\n        {title: \"null_value\", key: \"null_value\", component: (val) => {return val}},\r\n        {title: \"doc_values\", key: \"doc_values\", component: (val) => {return val}},\r\n        {title: \"similarity\", key: \"similarity\", component: (val) => {return val||\"\"}},\r\n        {title: \"term_vector\", key: \"term_vector\", component: (val) => {return val}},\r\n        {title: \"store\", key: \"store\", component: (val) => {\r\n                if (val !== undefined && val !== null && val === false) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                        </React.Fragment>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n            // return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>\r\n        }}\r\n    ]\r\n\r\n    const flatJsonMap = flat(json['properties'] ? json['properties'] : json)\r\n\r\n    let formatKeyFlatJsonMap = {}\r\n    Object.keys(flatJsonMap).forEach(key => {\r\n        const replaceKey = key.replace(/\\.properties/gi, \"\")\r\n\r\n        const sortKey = replaceKey.substring(0, replaceKey.lastIndexOf(\".\"))\r\n        const suffix = replaceKey.substring(replaceKey.lastIndexOf(\".\") + 1)\r\n        if (!formatKeyFlatJsonMap[sortKey]) {\r\n            formatKeyFlatJsonMap[sortKey] = {}\r\n        }\r\n        formatKeyFlatJsonMap[sortKey][suffix] = flatJsonMap[key]\r\n    })\r\n\r\n    return (\r\n        <table border={1} width={\"100%\"} cellSpacing={0} cellPadding={8}>\r\n            <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>이름</th>\r\n                {\r\n                    topFields.map(field => <th key={field['title']}>{field['title']}</th>)\r\n                }\r\n                <th>기타설정</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                Object.keys(formatKeyFlatJsonMap)\r\n                    .filter(key => !key.endsWith(\".copy_to\")).map((key, index) => {\r\n                    const obj = formatKeyFlatJsonMap[key]\r\n\r\n                    const etc = Object.keys(obj).map(k => {\r\n                        const o = topFields.find(m => m['key'] === k)\r\n                        return o ? null : k + \": \" + obj[k]\r\n                    }).filter(o => o)\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td align={\"center\"}>{index + 1}</td>\r\n                            <td>{key.replace(/\\.fields/gi, \"\")}</td>\r\n                            {\r\n                                topFields.map(field => <td key={field['title']} align={\"center\"}>{field['component'](obj[field['key']])}</td>)\r\n                            }\r\n                            <td>\r\n                                {etc.join(\", \")}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nfunction Render({json, type}) {\r\n    let validJson = json\r\n    try {\r\n        if (typeof json === 'string') {\r\n            validJson = JSON.parse(json)\r\n        }\r\n    } catch (error) {\r\n        // console.warn(\"parsing error\", typeof json)\r\n    }\r\n\r\n    if (validJson && type === \"mappings\") {\r\n        return MappingsJson2html(validJson)\r\n    } else if (validJson && type === \"settings\") {\r\n        return SettingsJson2html(validJson)\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Box style={{minHeight: \"150px\"}}>\r\n                </Box>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Render\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/search/referenceUI/index.js","utils.js"],"names":["Box","styled","MuiBox","spacing","palette","sizing","display","borders","Divider","MuiDivider","Grid","MuiGrid","Typography","MuiTypography","TextField","MuiTextField","IconButton","MuiIconButton","Button","MuiButton","Card","MuiCard","CardContent","MuiCardContent","List","MuiList","ListItem","MuiListItem","useStyles","makeStyles","theme","warm","backgroundColor","Color","textarea","width","minHeight","placeholder","query","JSON","stringify","SearchFormPanel","template","authUser","templateIndex","lastTemplateIndex","onDelete","onSave","onUp","onDown","disabledSaveButton","disabledDeleteButton","disabledOrderButton","classes","useState","name","setName","indices","setIndices","setQuery","title","setTitle","clickUrl","setClickUrl","thumbnails","setThumbnails","length","fields","setFields","aggs","setAggs","editable","setEditable","aceEditor","useRef","handleChangeField","event","index","field","clone","slice","target","value","handleAddField","type","concat","label","handleRemoveField","tmp","push","handleChangeAggs","handleSave","id","order","filter","o","useEffect","current","editor","setValue","clearSelection","style","container","my","item","xs","md","align","mt","variant","lg","onChange","lgUp","size","onClick","disabled","mdDown","role","search","color","ml","className","mx","fullWidth","ref","mode","fontSize","height","tabSize","setOptions","useWorker","getValue","map","key","px","agg","flag","AutocompleteRegister","dispatch","acUrl","autoCompleteUrl","setAutoCompleteUrl","registeredUrl","setRegisteredUrl","marginRight","marginLeft","setAutoCompleteURLAction","url","then","setTimeout","severity","connect","store","dsearchReducers","referenceSearchReducers","dsearchPluginReducers","disabledAddPanelButton","setDisabledAddPanelButton","setDisabledDeleteButton","setDisabledSaveButton","setDisabledOrderButton","templateList","setTemplateList","getAutoCompleteURLAction","setReferenceTemplateList","response","payload","catch","error","console","Fragment","gutterBottom","sort","t1","t2","Number","p","tempList","prev","now","actionReferenceTemplate","orders","utils","sleep","finally","handleUp","handleDown","deleteReferenceTemplate","updateReferenceTemplate","lastNum","forEach","t","Math","max","addReferenceTemplate","ms","Promise","resolve"],"mappings":"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","file":"static/js/66.279e31dc.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent as MuiCardContent,\r\n    Divider as MuiDivider,\r\n    Grid as MuiGrid,\r\n    Hidden,\r\n    IconButton as MuiIconButton,\r\n    List as MuiList,\r\n    ListItem as MuiListItem,\r\n    TextField as MuiTextField,\r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport {\r\n    ArrowDown as ArrowDownIcon,\r\n    ArrowUp as ArrowUpIcon,\r\n    MinusSquare as MinusSquareIcon,\r\n    PlusSquare as PlusSquareIcon,\r\n} from \"react-feather\";\r\n\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {borders, display, palette, sizing, spacing} from \"@material-ui/system\";\r\nimport * as Color from '@material-ui/core/colors';\r\nimport {getAutoCompleteURLAction, setAutoCompleteURLAction} from \"../../../redux/actions/dsearchPluginActions\"\r\nimport {\r\n    actionReferenceTemplate,\r\n    addReferenceTemplate,\r\n    deleteReferenceTemplate,\r\n    setReferenceTemplateList,\r\n    updateReferenceTemplate\r\n} from \"../../../redux/actions/referenceSearchActions\";\r\nimport utils from '~/utils'\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\n\r\nconst Box = styled(MuiBox)(spacing, palette, sizing, display, borders);\r\nconst Divider = styled(MuiDivider)(spacing, palette, sizing, display, borders);\r\nconst Grid = styled(MuiGrid)(spacing, palette, sizing, display, borders);\r\nconst Typography = styled(MuiTypography)(spacing, palette, sizing, display, borders);\r\nconst TextField = styled(MuiTextField)(spacing, palette, sizing, display, borders);\r\nconst IconButton = styled(MuiIconButton)(spacing, palette, sizing, display, borders);\r\nconst Button = styled(MuiButton)(spacing, palette, sizing, display, borders);\r\nconst Card = styled(MuiCard)(spacing, palette, sizing, display, borders);\r\nconst CardContent = styled(MuiCardContent)(spacing, palette, sizing, display, borders);\r\nconst List = styled(MuiList)(spacing, palette, sizing, display, borders);\r\nconst ListItem = styled(MuiListItem)(spacing, palette, sizing, display, borders);\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    warm: {backgroundColor: Color.orange['500']},\r\n    textarea: {width: \"100%\", minHeight: \"200px\"},\r\n}));\r\n\r\nconst placeholder = {\r\n    query: JSON.stringify({\r\n        \"query\": {\r\n            \"match\" : {\r\n                \"message\" : {\r\n                    \"query\" : \"$keyword\"\r\n                }\r\n            }\r\n        },\r\n        \"aggr\": {}\r\n    }, null, 4)\r\n}\r\n\r\nfunction SearchFormPanel({template, authUser, templateIndex, lastTemplateIndex, onDelete, onSave, onUp, onDown, disabledSaveButton, disabledDeleteButton, disabledOrderButton}) {\r\n    const classes = useStyles()\r\n    const [name, setName] = useState(template['name'] || '')\r\n    const [indices, setIndices] = useState(template['indices'] || '')\r\n    const [query, setQuery] = useState(template['query'] || '')\r\n    const [title, setTitle] = useState(template['title'] || '')\r\n    const [clickUrl, setClickUrl] = useState(template['clickUrl'] || '')\r\n    const [thumbnails, setThumbnails] = useState(template['thumbnails'] || '')\r\n    const [fields, setFields] = useState(template['fields'] && template['fields'].length !== 0 ? template['fields'] : [{}])\r\n    const [aggs, setAggs] = useState(template['aggs'] && template['aggs'].length !== 0 ? template['aggs'] : [{}])\r\n    const [editable, setEditable] = useState(false)\r\n\r\n    const aceEditor = useRef(null);\r\n\r\n    useEffect(() => {\r\n        aceEditor.current.editor.setValue(template['query'] || '', 0)\r\n        aceEditor.current.editor.clearSelection()\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleChangeField(event, index, field) {\r\n        let clone = fields.slice()\r\n        clone[index][field] = event.target.value\r\n        setFields(clone)\r\n    }\r\n\r\n    function handleAddField(type, index) {\r\n        if (type === 'fields') {\r\n            setFields([].concat(fields.slice(0, index + 1), {label: '', value: ''}, fields.slice(index + 1)))\r\n        } else if (type === 'aggs') {\r\n            setAggs([].concat(aggs.slice(0, index + 1), {label: '', value: ''}, aggs.slice(index + 1)))\r\n        }\r\n    }\r\n\r\n    function handleRemoveField(type, index) {\r\n        if (type === 'fields') {\r\n            let tmp = [].concat(fields.slice(0, index), fields.slice(index + 1))\r\n            if (tmp.length === 0) {\r\n                tmp.push({label: '', value: ''})\r\n            }\r\n            setFields(tmp)\r\n        } else if (type === 'aggs') {\r\n            let tmp = [].concat(aggs.slice(0, index), aggs.slice(index + 1))\r\n            if (tmp.length === 0) {\r\n                tmp.push({label: '', value: ''})\r\n            }\r\n            setAggs(tmp)\r\n        }\r\n    }\r\n\r\n    function handleChangeAggs(event, index, field) {\r\n        let clone = aggs.slice()\r\n        clone[index][field] = event.target.value\r\n        setAggs(clone)\r\n    }\r\n\r\n    function handleSave() {\r\n        onSave({\r\n            name,\r\n            indices,\r\n            query,\r\n            title,\r\n            clickUrl,\r\n            thumbnails,\r\n            id: template.id,\r\n            order: template['order'],\r\n            fields: fields.filter(o => o['label'] && o['value']),\r\n            aggs: aggs.filter(o => o['label'] && o['value']),\r\n        })\r\n        setEditable(false)\r\n    }\r\n\r\n    return (\r\n        <Box style={{width: '100%'}}>\r\n            <Card>\r\n                <CardContent>\r\n\r\n                    <Grid container my={5}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"} mt={2}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 영역이름</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={6} md={8} lg={8}>\r\n                            <Box align={\"left\"}>\r\n                                <TextField style={{width: \"70%\"}} value={name}\r\n                                           onChange={(event) => {setEditable(true);setName(event.target.value)}}/>\r\n                                <Box display={\"inline\"}>\r\n                                    <Hidden lgUp>\r\n                                        <IconButton size={\"small\"}\r\n                                                    onClick={onUp}\r\n                                                    disabled={disabledOrderButton || templateIndex === 0}\r\n                                        >\r\n                                            <ArrowUpIcon/>\r\n                                        </IconButton>\r\n                                        <IconButton size={\"small\"}\r\n                                                    onClick={onDown}\r\n                                                    disabled={disabledOrderButton || templateIndex === lastTemplateIndex}\r\n                                        >\r\n                                            <ArrowDownIcon/>\r\n                                        </IconButton>\r\n                                    </Hidden>\r\n                                    <Hidden mdDown>\r\n                                        <IconButton onClick={onUp}\r\n                                                    disabled={disabledOrderButton || templateIndex === 0}>\r\n                                            <ArrowUpIcon/>\r\n                                        </IconButton>\r\n                                        <IconButton onClick={onDown}\r\n                                                    disabled={disabledOrderButton || templateIndex === lastTemplateIndex}\r\n                                        >\r\n                                            <ArrowDownIcon/>\r\n                                        </IconButton>\r\n                                    </Hidden>\r\n                                </Box>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={3} md={2} lg={2}>\r\n                            <Box align={\"right\"}>\r\n                                {authUser.role.search ? <>\r\n                                <Hidden lgUp>\r\n                                    <Button size={\"small\"}\r\n                                            color={\"primary\"}\r\n                                            variant={editable ? \"contained\" : \"outlined\"}\r\n                                            onClick={handleSave}\r\n                                            disabled={disabledSaveButton || disabledDeleteButton}\r\n                                            ml={2}\r\n                                    >저장</Button>\r\n                                    <Button size={\"small\"}\r\n                                            className={classes.warm}\r\n                                            variant={\"contained\"}\r\n                                            onClick={onDelete}\r\n                                            disabled={disabledDeleteButton}\r\n                                            ml={2}\r\n                                    >삭제</Button>\r\n                                </Hidden>\r\n                                <Hidden mdDown>\r\n                                    <Button color={\"primary\"}\r\n                                            variant={editable ? \"contained\" : \"outlined\"}\r\n                                            onClick={handleSave}\r\n                                            disabled={disabledSaveButton || disabledDeleteButton}\r\n                                            mx={2}\r\n                                    >저장</Button>\r\n                                    <Button className={classes.warm}\r\n                                            variant={\"contained\"}\r\n                                            onClick={onDelete}\r\n                                            disabled={disabledDeleteButton}\r\n                                    >삭제</Button>\r\n                                </Hidden>\r\n                                </> : <></>}\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={5}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 인덱스 </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Box align={\"left\"}>\r\n                                <TextField fullWidth\r\n                                           value={indices}\r\n                                           onChange={event => {setIndices(event.target.value); setEditable(true)}}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={5}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 검색쿼리 </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Box align={\"left\"}>\r\n                                {/*<TextareaAutosize*/}\r\n                                {/*    className={classes.textarea}*/}\r\n                                {/*    placeholder={placeholder.query}*/}\r\n                                {/*    value={query}*/}\r\n                                {/*    onChange={event => {setQuery(event.target.value); setEditable(true)}}*/}\r\n                                {/*/>*/}\r\n                                <AceEditor\r\n                                    ref={aceEditor}\r\n                                    mode=\"json\"\r\n                                    theme=\"kuroir\"\r\n                                    fontSize=\"15px\"\r\n                                    height={\"600px\"}\r\n                                    width=\"100%\"\r\n                                    tabSize={2}\r\n                                    placeholder={placeholder.query}\r\n                                    setOptions={{ useWorker: false }}\r\n                                    onChange={event => {setQuery(aceEditor.current.editor.getValue()); setEditable(true)}}\r\n                                />\r\n\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container my={5}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 제목 </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Box align={\"left\"}>\r\n                                <TextField fullWidth\r\n                                           value={title}\r\n                                           onChange={event => {setTitle(event.target.value); setEditable(true)}}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={5}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 클릭URL </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Box align={\"left\"}>\r\n                                <TextField fullWidth\r\n                                           value={clickUrl}\r\n                                           onChange={event => {setClickUrl(event.target.value); setEditable(true)}}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={5}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 썸네일 </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Box align={\"left\"}>\r\n                                <TextField fullWidth\r\n                                           value={thumbnails}\r\n                                           onChange={event => {setThumbnails(event.target.value); setEditable(true)}}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={10}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 정보 </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Grid container>\r\n                                <Grid item xs={5}>\r\n                                    <Box align={\"center\"}>\r\n                                        <Typography variant={\"h6\"} display={\"inline\"}> 라벨명 </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={5}>\r\n                                    <Box align={\"center\"}>\r\n                                        <Typography variant={\"h6\"} display={\"inline\"}> 값 </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Box align={\"center\"}> </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            {/* Item List */}\r\n                            <List>\r\n                                {\r\n                                    fields.map((field, index) => {\r\n                                        return (\r\n                                            <ListItem key={index}>\r\n                                                <Grid container>\r\n                                                    <Grid item xs={5}>\r\n                                                        <Box px={1}>\r\n                                                            <TextField fullWidth\r\n                                                                       value={field['label'] || ''}\r\n                                                                       onChange={event => {handleChangeField(event, index, 'label'); setEditable(true)}}\r\n                                                            />\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5}>\r\n                                                        <Box px={1}>\r\n                                                            <TextField fullWidth\r\n                                                                       value={field['value'] || ''}\r\n                                                                       onChange={event => {handleChangeField(event, index, 'value'); setEditable(true)}}\r\n                                                            />\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={2}>\r\n                                                        <Hidden lgUp>\r\n                                                            <IconButton size={\"small\"}\r\n                                                                        onClick={() => handleAddField('fields', index)}>\r\n                                                                <PlusSquareIcon/>\r\n                                                            </IconButton>\r\n                                                            <IconButton size={\"small\"}\r\n                                                                        onClick={() => handleRemoveField('fields', index)}>\r\n                                                                <MinusSquareIcon/>\r\n                                                            </IconButton>\r\n                                                        </Hidden>\r\n                                                        <Hidden mdDown>\r\n                                                            <IconButton onClick={() => handleAddField('fields', index)}>\r\n                                                                <PlusSquareIcon/>\r\n                                                            </IconButton>\r\n                                                            <IconButton\r\n                                                                onClick={() => handleRemoveField('fields', index)}>\r\n                                                                <MinusSquareIcon/>\r\n                                                            </IconButton>\r\n                                                        </Hidden>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItem>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </List>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container my={10}>\r\n                        <Grid item xs={3} md={2}>\r\n                            <Box align={\"center\"}>\r\n                                <Typography variant={\"h6\"} display={\"inline\"}> 어그리게이션 </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={9} md={10}>\r\n                            <Grid container>\r\n                                <Grid item xs={5}>\r\n                                    <Box align={\"center\"}>\r\n                                        <Typography variant={\"h6\"} display={\"inline\"}> 라벨명 </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={5}>\r\n                                    <Box align={\"center\"}>\r\n                                        <Typography variant={\"h6\"} display={\"inline\"}> 값 </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Box align={\"center\"}> </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* item list */}\r\n                            <List>\r\n                                {\r\n                                    aggs.map((agg, index) => {\r\n                                        return (\r\n                                            <ListItem key={index}>\r\n                                                <Grid container>\r\n                                                    <Grid item xs={5}>\r\n                                                        <Box px={1}>\r\n                                                            <TextField fullWidth\r\n                                                                       value={agg['label'] || ''}\r\n                                                                       onChange={event => {handleChangeAggs(event, index, 'label'); setEditable(true)}}\r\n                                                            />\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5}>\r\n                                                        <Box px={1}>\r\n                                                            <TextField fullWidth\r\n                                                                       value={agg['value'] || ''}\r\n                                                                       onChange={event => {handleChangeAggs(event, index, 'value'); setEditable(true)}}\r\n                                                            />\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={2}>\r\n                                                        <Box display={\"inline\"}>\r\n                                                            <Hidden lgUp>\r\n                                                                <IconButton size={\"small\"}\r\n                                                                            onClick={() => handleAddField('aggs', index)}>\r\n                                                                    <PlusSquareIcon/>\r\n                                                                </IconButton>\r\n                                                                <IconButton size={\"small\"}\r\n                                                                            onClick={() => handleRemoveField('aggs', index)}>\r\n                                                                    <MinusSquareIcon/>\r\n                                                                </IconButton>\r\n                                                            </Hidden>\r\n                                                            <Hidden mdDown>\r\n                                                                <IconButton\r\n                                                                    onClick={() => handleAddField('aggs', index)}>\r\n                                                                    <PlusSquareIcon/>\r\n                                                                </IconButton>\r\n                                                                <IconButton\r\n                                                                    onClick={() => handleRemoveField('aggs', index)}>\r\n                                                                    <MinusSquareIcon/>\r\n                                                                </IconButton>\r\n                                                            </Hidden>\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItem>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </List>\r\n\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst sleep = 1000\r\nlet flag = true;\r\nfunction AutocompleteRegister({dispatch, acUrl}){\r\n\r\n    const [autoCompleteUrl, setAutoCompleteUrl] = useState(acUrl)\r\n    const [registeredUrl, setRegisteredUrl] = useState(false)\r\n\r\n    function handleAutoCompleteURL(event){\r\n        setAutoCompleteUrl(event.target.value)\r\n    }\r\n\r\n    function handleSubmitURL(){\r\n        dispatch(setAutoCompleteURLAction({url: autoCompleteUrl})).then(() => {\r\n            setRegisteredUrl(true)\r\n            setTimeout(()=>{setRegisteredUrl(false)}, 3000);\r\n        })\r\n    }\r\n\r\n    if(flag){\r\n        if(acUrl.length > 0){\r\n            setAutoCompleteUrl(acUrl)\r\n            flag= false;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Box display=\"flex\" mt={3}>\r\n                <TextField value={autoCompleteUrl} style={{ width: \"90%\", marginRight: \"10px\" }} placeholder=\"http://auto-complete.danawa.com/q=\" onChange={handleAutoCompleteURL} />\r\n                <Button style={{ width: \"10%\", marginLeft: \"10px\" }} variant=\"outlined\" color=\"primary\" onClick={handleSubmitURL} >\r\n                    등록\r\n                </Button>\r\n            </Box>\r\n            <Divider my={6} />\r\n            {registeredUrl ? <MuiAlert severity=\"success\"> 등록되었습니다 </MuiAlert> : <></>}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nfunction ReferenceUI({dispatch, authUser, acUrl}) {\r\n    // const classes = useStyles()\r\n    \r\n    const [disabledAddPanelButton, setDisabledAddPanelButton] = useState(false)\r\n    const [disabledDeleteButton, setDisabledDeleteButton] = useState(false)\r\n    const [disabledSaveButton, setDisabledSaveButton] = useState(false)\r\n    const [disabledOrderButton, setDisabledOrderButton] = useState(false)\r\n    const [templateList, setTemplateList] = useState([])\r\n    \r\n    \r\n    // authUser.role.search = false;\r\n    useEffect(() => {\r\n        dispatch(getAutoCompleteURLAction())\r\n\r\n        dispatch(setReferenceTemplateList())\r\n            .then(response => setTemplateList(response.payload))\r\n            .catch(error => console.error(error))\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    function addTemplatePanel() {\r\n        setDisabledAddPanelButton(true)\r\n        let lastNum = 0\r\n        templateList.forEach(t => lastNum = Math.max(t['order'], lastNum))\r\n        dispatch(addReferenceTemplate({order: lastNum + 1}))\r\n            .then(() => utils.sleep(sleep))\r\n            .then(() => dispatch(setReferenceTemplateList()).then(response => setTemplateList(response.payload)))\r\n            .catch(error => console.error(error))\r\n            .finally(() => setDisabledAddPanelButton(false))\r\n    }\r\n\r\n    function handleDelete(id) {\r\n        setDisabledDeleteButton(true)\r\n        dispatch(deleteReferenceTemplate(id))\r\n            .then(() => utils.sleep(sleep))\r\n            .then(() => dispatch(setReferenceTemplateList()))\r\n            .then(response => setTemplateList(response.payload))\r\n            .catch(error => console.error(error))\r\n            .finally(() => setDisabledDeleteButton(false))\r\n    }\r\n\r\n    function handleSave(id, template, index) {\r\n        setDisabledSaveButton(true)\r\n        dispatch(updateReferenceTemplate(id, template))\r\n            .then(() => utils.sleep(sleep))\r\n            .finally(() => setDisabledSaveButton(false))\r\n    }\r\n\r\n    function handleUp(index) {\r\n        if (index === 0) {\r\n            return;\r\n        }\r\n        let tempList = templateList.slice()\r\n        let prev = tempList[index - 1]\r\n        let now = tempList[index]\r\n        setDisabledOrderButton(true)\r\n        dispatch(actionReferenceTemplate('orders', {\r\n            orders: [\r\n                {id: prev['id'], order: now['order']},\r\n                {id: now['id'], order: prev['order']},\r\n            ]\r\n        }))\r\n            .then(() => utils.sleep(sleep))\r\n            .then(() => dispatch(setReferenceTemplateList()))\r\n            .then(response => setTemplateList(response.payload))\r\n            .catch(error => console.error(error))\r\n            .finally(() => setDisabledOrderButton(false))\r\n    }\r\n\r\n    function handleDown(index) {\r\n        if (index >= templateList.length - 1) {\r\n            return;\r\n        }\r\n        let tempList = templateList.slice()\r\n        let prev = tempList[index]\r\n        let now = tempList[index + 1]\r\n        setDisabledOrderButton(true)\r\n        dispatch(actionReferenceTemplate('orders', {\r\n            orders: [\r\n                {id: prev['id'], order: now['order']},\r\n                {id: now['id'], order: prev['order']},\r\n            ]\r\n        }))\r\n            .then(() => utils.sleep(sleep))\r\n            .then(() => dispatch(setReferenceTemplateList()))\r\n            .then(response => setTemplateList(response.payload))\r\n            .catch(error => console.error(error))\r\n            .finally(() => setDisabledOrderButton(false))\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"레퍼런스UI\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                레퍼런스UI\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Typography variant=\"h5\" gutterBottom display=\"inline\">\r\n                자동완성 URL\r\n            </Typography>\r\n\r\n            <AutocompleteRegister dispatch={dispatch} acUrl={acUrl}></AutocompleteRegister>\r\n            \r\n            <List>\r\n                {\r\n                    templateList\r\n                        .sort((t1, t2) => Number(t1['order']) - Number(t2['order']))\r\n                        .map((template, index) => {\r\n                        return (\r\n                            <ListItem my={5} p={0} key={template['order']}>\r\n                                <SearchFormPanel authUser={authUser}\r\n                                                 template={template}\r\n                                                 templateIndex={index}\r\n                                                 disabledSaveButton={disabledSaveButton}\r\n                                                 disabledDeleteButton={disabledDeleteButton}\r\n                                                 disabledOrderButton={disabledOrderButton}\r\n                                                 lastTemplateIndex={templateList.length - 1}\r\n                                                 onUp={() => handleUp(index)}\r\n                                                 onDown={() => handleDown(index)}\r\n                                                 onDelete={() => handleDelete(template.id)}\r\n                                                 onSave={(template) => handleSave(template.id, template, index)}\r\n                                />\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n\r\n\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Box align={\"center\"} mt={5}>\r\n                        {authUser.role.search ? <Button variant={\"contained\"}\r\n                                color={\"primary\"}\r\n                                onClick={addTemplatePanel}\r\n                                disabled={disabledAddPanelButton}\r\n                        >영역 추가</Button> : <></>}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.referenceSearchReducers,\r\n    acUrl: store.dsearchPluginReducers.autoCompleteUrl\r\n}))(ReferenceUI);\r\n","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils"],"sourceRoot":""}
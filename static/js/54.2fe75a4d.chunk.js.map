{"version":3,"sources":["../node_modules/@material-ui/core/esm/TableHead/TableHead.js","../node_modules/flat/index.js","pages/indices/index/Setting.js"],"names":["tablelvl2","variant","TableHead","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","Tablelvl2Context","Provider","value","_extends","clsx","root","withStyles","display","name","isBuffer","obj","constructor","keyIdentity","key","flatten","target","opts","delimiter","maxDepth","transformKey","output","step","object","prev","currentDepth","Object","keys","forEach","isarray","safe","Array","isArray","type","prototype","toString","call","isbuffer","isobject","newKey","length","module","exports","unflatten","overwrite","result","getkey","parsedKey","Number","isNaN","indexOf","reduce","val","isObject","isEmpty","keyPrefix","recipient","addKeys","split","map","key1","shift","key2","undefined","useStyles","makeStyles","theme","formControl","minWidth","flexGrow","width","edit","addIcon","verticalAlign","table","padding","Box","styled","MuiBox","spacing","positions","Card","MuiCard","Typography","MuiTypography","Button","MuiButton","palette","FormCard","settings","defaultsFlatMap","settingsFlatMap","Fragment","mt","toLocaleString","style","JsonCard","json","rowsMin","disabled","JSON","stringify","connect","store","authUser","dsearchReducers","indicesReducers","dispatch","index","useState","chk","setChk","modal","setModal","query","setQuery","message","setMessage","handleRadioChange","e","toggleModal","container","item","xs","row","aria-label","defaultValue","checked","onChange","control","color","label","align","role","size","onClick","open","fullWidth","onClose","event","height","overflow","placeholder","parseQueryJson","parse","editDynamicQueryAction","then","response","setIndexSettingsAction","catch","error","err"],"mappings":"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","file":"static/js/54.2fe75a4d.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar TableHead = React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'thead' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","module.exports = flatten\nflatten.flatten = flatten\nflatten.unflatten = unflatten\n\nfunction isBuffer (obj) {\n  return obj &&\n    obj.constructor &&\n    (typeof obj.constructor.isBuffer === 'function') &&\n    obj.constructor.isBuffer(obj)\n}\n\nfunction keyIdentity (key) {\n  return key\n}\n\nfunction flatten (target, opts) {\n  opts = opts || {}\n\n  const delimiter = opts.delimiter || '.'\n  const maxDepth = opts.maxDepth\n  const transformKey = opts.transformKey || keyIdentity\n  const output = {}\n\n  function step (object, prev, currentDepth) {\n    currentDepth = currentDepth || 1\n    Object.keys(object).forEach(function (key) {\n      const value = object[key]\n      const isarray = opts.safe && Array.isArray(value)\n      const type = Object.prototype.toString.call(value)\n      const isbuffer = isBuffer(value)\n      const isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      )\n\n      const newKey = prev\n        ? prev + delimiter + transformKey(key)\n        : transformKey(key)\n\n      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&\n        (!opts.maxDepth || currentDepth < maxDepth)) {\n        return step(value, newKey, currentDepth + 1)\n      }\n\n      output[newKey] = value\n    })\n  }\n\n  step(target)\n\n  return output\n}\n\nfunction unflatten (target, opts) {\n  opts = opts || {}\n\n  const delimiter = opts.delimiter || '.'\n  const overwrite = opts.overwrite || false\n  const transformKey = opts.transformKey || keyIdentity\n  const result = {}\n\n  const isbuffer = isBuffer(target)\n  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {\n    return target\n  }\n\n  // safely ensure that the key is\n  // an integer.\n  function getkey (key) {\n    const parsedKey = Number(key)\n\n    return (\n      isNaN(parsedKey) ||\n      key.indexOf('.') !== -1 ||\n      opts.object\n    ) ? key\n      : parsedKey\n  }\n\n  function addKeys (keyPrefix, recipient, target) {\n    return Object.keys(target).reduce(function (result, key) {\n      result[keyPrefix + delimiter + key] = target[key]\n\n      return result\n    }, recipient)\n  }\n\n  function isEmpty (val) {\n    const type = Object.prototype.toString.call(val)\n    const isArray = type === '[object Array]'\n    const isObject = type === '[object Object]'\n\n    if (!val) {\n      return true\n    } else if (isArray) {\n      return !val.length\n    } else if (isObject) {\n      return !Object.keys(val).length\n    }\n  }\n\n  target = Object.keys(target).reduce(function (result, key) {\n    const type = Object.prototype.toString.call(target[key])\n    const isObject = (type === '[object Object]' || type === '[object Array]')\n    if (!isObject || isEmpty(target[key])) {\n      result[key] = target[key]\n      return result\n    } else {\n      return addKeys(\n        key,\n        result,\n        flatten(target[key], opts)\n      )\n    }\n  }, {})\n\n  Object.keys(target).forEach(function (key) {\n    const split = key.split(delimiter).map(transformKey)\n    let key1 = getkey(split.shift())\n    let key2 = getkey(split[0])\n    let recipient = result\n\n    while (key2 !== undefined) {\n      if (key1 === '__proto__') {\n        return\n      }\n\n      const type = Object.prototype.toString.call(recipient[key1])\n      const isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      )\n\n      // do not write over falsey, non-undefined values if overwrite is false\n      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {\n        return\n      }\n\n      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {\n        recipient[key1] = (\n          typeof key2 === 'number' &&\n          !opts.object ? [] : {}\n        )\n      }\n\n      recipient = recipient[key1]\n      if (split.length > 0) {\n        key1 = getkey(split.shift())\n        key2 = getkey(split[0])\n      }\n    }\n\n    // unflatten again for 'messy objects'\n    recipient[key1] = unflatten(target[key], opts)\n  })\n\n  return result\n}\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    Radio,\r\n    RadioGroup,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextareaAutosize,\r\n    Typography as MuiTypography,\r\n} from \"@material-ui/core\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {palette, positions, spacing} from \"@material-ui/system\";\r\nimport {flatten} from \"flat\";\r\nimport {editDynamicQueryAction, setIndexSettingsAction} from \"../../../redux/actions/indicesActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    addIcon: {\r\n        verticalAlign: \"top\"\r\n    },\r\n    table: {\r\n        padding: '10px'\r\n    },\r\n}));\r\n\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions, palette);\r\n\r\nfunction FormCard({settings}) {\r\n    if (settings['settings'] === undefined) {\r\n        return null\r\n    }\r\n\r\n    const defaultsFlatMap = flatten(settings['defaults']||{})\r\n    const settingsFlatMap = flatten(settings['settings']||{})\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        주요항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>샤드 갯수</TableCell>\r\n                                <TableCell>레플리카 갯수</TableCell>\r\n                                <TableCell>리프레쉬 간격</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>{settings['settings']['index']['number_of_shards'] ? Number(settings['settings']['index']['number_of_shards']).toLocaleString() : \"0\"}</TableCell>\r\n                                <TableCell>{settings['settings']['index']['number_of_replicas'] ? Number(settings['settings']['index']['number_of_replicas']).toLocaleString() : \"0\"}</TableCell>\r\n                                <TableCell>{settings['defaults']['index']['refresh_interval'] || settings['settings']['index']['refresh_interval']}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Box style={{display: Object.keys(settingsFlatMap).length > 0 ? \"block\" : \"none\"}}>\r\n                <br/>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant={\"h5\"} mt={5}>\r\n                            설정값\r\n                        </Typography>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>키</TableCell>\r\n                                    <TableCell>값</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    Object.keys(settingsFlatMap).map(key => {\r\n                                        return (\r\n                                            <TableRow key={key}>\r\n                                                <TableCell>{key}</TableCell>\r\n                                                <TableCell>{settingsFlatMap[key]}</TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n\r\n            <Box style={{display: Object.keys(defaultsFlatMap).length > 0 ? \"block\" : \"none\"}}>\r\n                <br/>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant={\"h5\"} mt={5}>\r\n                            기본값\r\n                        </Typography>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>키</TableCell>\r\n                                    <TableCell>값</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    Object.keys(defaultsFlatMap).map(key => {\r\n                                        return (\r\n                                            <TableRow key={key}>\r\n                                                <TableCell>{key}</TableCell>\r\n                                                <TableCell>{defaultsFlatMap[key]}</TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\nfunction JsonCard({json}) {\r\n    const classes = useStyles();\r\n\r\n    return (<div>\r\n        <Card>\r\n            <CardContent>\r\n                <Box>\r\n                    <TextareaAutosize rowsMin={50}\r\n                                      className={classes.edit}\r\n                                      disabled\r\n                                      value={JSON.stringify(json, null, 4)}\r\n                    />\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    </div>)\r\n}\r\n\r\nfunction Setting({ dispatch, index, authUser, settings }) {\r\n    const [chk, setChk] = React.useState('form');\r\n    const [modal, setModal] = React.useState(false)\r\n    const [query, setQuery] = React.useState(\"\")\r\n    const [message, setMessage] = React.useState(null)\r\n    function handleRadioChange(e) {\r\n        setChk(e.target.value)\r\n    }\r\n    function toggleModal() {\r\n        setQuery(\"\")\r\n        setMessage(null)\r\n        setModal(!modal)\r\n    }\r\n    function processQuery() {\r\n        try {\r\n            const parseQueryJson = JSON.parse(query)\r\n            dispatch(editDynamicQueryAction(index, parseQueryJson))\r\n                .then(response => {\r\n                    setMessage(\"업데이트 성공\")\r\n                    dispatch(setIndexSettingsAction(index))\r\n                    toggleModal()\r\n                })\r\n                .catch(error => {\r\n                    setMessage(\"업데이트 실패\"+ error)\r\n                })\r\n        } catch (err) {\r\n            setMessage(\"업데이트 실패 JSON 형식이 잘못 되었습니다.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Grid container>\r\n                <Grid item xs={10}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                            <FormControlLabel value=\"form\" checked={chk === \"form\"} onChange={handleRadioChange} control={<Radio color=\"primary\" />} label=\"폼\" />\r\n                            <FormControlLabel value=\"json\" checked={chk === \"json\"} onChange={handleRadioChange} control={<Radio color=\"primary\" />} label=\"json\" />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Box align={\"right\"} mt={2}>\r\n                        {authUser.role.index ? <Button size={\"small\"}\r\n                                                       variant={\"contained\"}\r\n                                                       color={\"primary\"}\r\n                                                       onClick={toggleModal}\r\n                        >동적변경</Button> : <></>}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Box mt={2}>\r\n                {\r\n                    chk === \"form\" ? <FormCard settings={settings} /> : <JsonCard json={settings} />\r\n                }\r\n            </Box>\r\n\r\n\r\n            <Dialog open={modal}\r\n                    fullWidth\r\n                    onClose={toggleModal}\r\n            >\r\n                <DialogTitle>\r\n                    동적변경\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <TextareaAutosize value={query}\r\n                                      onChange={(event) => setQuery(event.target.value)}\r\n                                      style={{width: \"100%\", height: \"300px\", overflow: \"auto\"}}\r\n                                      placeholder={`{\r\n   \"settings\" : {\r\n      \"index\" : {\r\n        \"number_of_replicas\" : \"5\"\r\n      }\r\n    }\r\n}`}\r\n                    />\r\n                    <Box style={{display: message ? \"block\": \"none\"}}>\r\n                        {message}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={processQuery}>적용</Button>\r\n                    <Button onClick={toggleModal}>취소</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.indicesReducers\r\n\r\n}))(Setting);\r\n"],"sourceRoot":""}
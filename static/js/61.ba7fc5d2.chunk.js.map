{"version":3,"sources":["pages/indices/index/index.js","redux/actions/indicesActions.js"],"names":["useStyles","makeStyles","theme","Divider","styled","MuiDivider","spacing","fields","id","label","sorting","connect","store","indicesReducers","dispatch","indices","classes","history","useHistory","useState","checked","setChecked","orderBy","setOrderBy","order","setOrder","useEffect","setIndicesAction","sortedIndices","filter","index","startsWith","map","no","sort","a","b","c","i","Fragment","title","variant","gutterBottom","display","my","align","control","onChange","event","color","name","inputProps","component","Paper","className","table","aria-label","field","key","active","direction","onClick","isAsc","x","y","Number","x1","replace","y1","xUnit","String","toLowerCase","yUnit","includes","statusColor","statusText","grey","yellow","red","green","scope","style","cursor","uuid","push","toLocaleString","backgroundColor","width","fontSize","client","Client","setIndexAction","type","SET_INDEX","payload","call","uri","params","format","then","response","SET_INDICES","data","catch","error","console","setIndexInfoListAction","SET_INDEX_INFO_LIST","setIndexAliasesAction","SET_INDEX_ALIASES","setIndexSettingsAction","SET_INDEX_SETTINGS","setIndexMappingsAction","SET_INDEX_MAPPINGS","setIndexStateAction","SET_INDEX_STATE","editDynamicQueryAction","query","method","setIndexDocumentSourceListAction","from","size","columns","keyword","undefined","match","_id","bool","minimum_should_match","should","multi_match","operator","boost","_score","SET_INDEX_DOCUMENT_SOURCE_RESPONSE","editIndexDocumentSourceAction","body","addIndexDocumentSourceAction","deleteIndexDocumentSourceAction","analyzerDocumentSourceAction","analyzerDocument","setIndexManagedAction","action","deleteIndexAction"],"mappings":"sZA0BMA,EAAYC,aAAW,SAACC,GAAD,MAAY,MACnCC,EAAUC,YAAOC,IAAPD,CAAmBE,KAE7BC,EAAS,CACX,CAAEC,GAAI,KAAMC,MAAO,IAAKC,SAAS,GACjC,CAAEF,GAAI,QAASC,MAAO,eAAMC,SAAS,GACrC,CAAEF,GAAI,MAAOC,MAAO,eAAMC,SAAS,GACnC,CAAEF,GAAI,aAAcC,MAAO,sBAAQC,SAAS,GAC5C,CAAEF,GAAI,aAAcC,MAAO,eAAMC,SAAS,GAC1C,CAAEF,GAAI,SAAUC,MAAO,eAAMC,SAAS,IA4M3BC,uBAAQ,SAAAC,GAAK,sBACrBA,EAAMC,mBADEF,EAxMf,YAAqC,IAArBG,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,QAChBC,EAAUhB,IACViB,EAAUC,cAFgB,EAGFC,oBAAS,GAHP,mBAGzBC,EAHyB,KAGhBC,EAHgB,OAIFF,mBAAS,IAJP,mBAIzBG,EAJyB,KAIhBC,EAJgB,OAKNJ,mBAAS,OALH,mBAKzBK,EALyB,KAKlBC,EALkB,KAOhCC,qBAAU,WACNZ,EAASa,iBACV,IAUH,IAAIC,EAAgBb,EACfc,QAAO,SAAAC,GAAK,QAAIV,IAAoD,IAAnCU,EAAK,MAAUC,WAAW,QAC3DC,KAAI,SAACF,EAAOG,GAAS,OAAOH,KAC5BI,MAAK,SAACC,EAAGC,GACN,OAAGD,EAAC,MAAYC,EAAC,MACN,EACFD,EAAC,MAAYC,EAAC,OACX,EAED,KAGdJ,KAAI,SAACK,EAAGC,GAAJ,mBAAC,eAAcD,GAAf,IAAkBJ,GAAIK,OAG/B,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAQC,MAAM,uBAEd,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACC,QAAQ,UAA9C,sBAIA,kBAACxC,EAAD,CAASyC,GAAI,IAQb,6BACA,kBAAC,IAAD,CAAKC,MAAO,SACR,kBAAC,IAAD,CACIC,QACI,kBAAC,IAAD,CACI1B,QAASA,EACT2B,SAxCxB,SAAuBC,GACnB3B,GAAYD,IAwCQ6B,MAAM,UACNC,KAAK,oBACLC,WAAY,CAAE,aAAc,sBAGpC1C,MAAM,kDAId,kBAAC,IAAD,CAAgB2C,UAAWC,KACvB,kBAAC,IAAD,CAAOC,UAAWtC,EAAQuC,MAAOC,aAAW,gBACxC,kBAAC,IAAD,KACI,kBAAC,IAAD,KAGQjD,EAAOyB,KAAI,SAAAyB,GAAK,OACZ,kBAAC,IAAD,CAAWZ,MAAM,SAASa,IAAKD,EAAK,IAE5BA,EAAK,QACD,kBAAC,IAAD,CACIE,OAAQrC,IAAYmC,EAAK,GACzBG,UAAWtC,IAAYmC,EAAK,GAASjC,EAAQ,MAC7CqC,QAAS,SAAAb,GACLzB,EAAWkC,EAAK,IAChB,IAAMK,EAAQxC,IAAYmC,EAAK,IAAoB,QAAVjC,EACzCC,EAASqC,EAAQ,OAAS,SAG7BL,EAAK,OAGVA,EAAK,YAcjC,kBAAC,IAAD,KAEQ7B,EAAcM,MAAK,SAACC,EAAGC,GACnB,GAAId,GAAWE,EAAO,CAClB,IAAIuC,EAAI5B,EAAEb,GACN0C,EAAI5B,EAAEd,GACV,GAAgB,eAAZA,EACAyC,EAAIE,OAAOF,GACXC,EAAIC,OAAOD,QACR,GAAgB,eAAZ1C,EAA0B,CACjC,IAAI4C,EAAKD,OAAOF,EAAEI,QAAQ,UAAW,KACjCC,EAAKH,OAAOD,EAAEG,QAAQ,UAAW,KACjCE,EAAQC,OAAOP,GAAG,IAAII,QAAQ,UAAW,IAAII,cAC7CC,EAAQF,OAAON,GAAG,IAAIG,QAAQ,UAAW,IAAII,cACjDR,EAAIG,EAAKD,OAAOI,EAAMI,SAAS,KAAO,KAAOJ,EAAMI,SAAS,KAAQ,QAAeJ,EAAMI,SAAS,KAAQ,WAAsBJ,EAAMI,SAAS,KAAQ,cAA6B,GACpLT,EAAII,EAAKH,OAAOO,EAAMC,SAAS,KAAO,KAAOD,EAAMC,SAAS,KAAQ,QAAeD,EAAMC,SAAS,KAAQ,WAAsBD,EAAMC,SAAS,KAAQ,cAA6B,GAExL,MAAc,QAAVjD,EACOuC,EAAIC,EAAI,GAAK,EAEbD,EAAIC,GAAK,EAAI,EAGxB,OAAO,KAEZhC,KAAI,SAACF,EAAOG,GACX,IAAIyC,EAAc,GACdC,EAAa,GAejB,MAdwB,UAApB7C,EAAK,QACL4C,EAAcE,IAAK,KACnBD,EAAa,gBACc,WAApB7C,EAAK,QACZ4C,EAAcG,IAAO,KACrBF,EAAa,gBACc,QAApB7C,EAAK,QACZ4C,EAAcI,IAAI,KAClBH,EAAa,iBAEbD,EAAcK,IAAM,KACpBJ,EAAa,gBAIb,kBAAC,IAAD,CAAUjB,IAAK5B,EAAK,MAChB,kBAAC,IAAD,CAAWsB,UAAU,KAAK4B,MAAM,MAAMnC,MAAM,UAAUf,EAAK,GAAS,GACpE,kBAAC,IAAD,CAAWe,MAAM,UACb,kBAAC,IAAD,CAAMoC,MAAO,CAACC,OAAQ,WAAYrB,QAAS,kBAxI/DsB,EAwIgFrD,EAAK,UAvIrGb,EAAQmE,KAAR,oBAA0BD,IAD9B,IAAoBA,IAyIyBrD,EAAK,QAGd,kBAAC,IAAD,CAAWe,MAAM,UACb,kBAAC,IAAD,UACOf,EAAK,KAAS,IADrB,OAC8BA,EAAK,KAAS,IAD5C,MAIJ,kBAAC,IAAD,CAAWe,MAAM,UACb,kBAAC,IAAD,KACKoB,OAAOnC,EAAM,eAAeuD,kBAAkB,MAGvD,kBAAC,IAAD,CAAWxC,MAAM,UACb,kBAAC,IAAD,KACKf,EAAM,eAAe,MAG9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKe,MAAM,UACP,kBAAC,IAAD,CAAQoC,MAAO,CAACK,gBAAiBZ,EAAaa,MAAO,OAAQC,SAAU,UAClEb,iB,iCCjNrD,ihBAaMc,EAAS,IAAIC,IAGNC,EAAiB,SAAC7D,GAAD,OAAW,SAAAhB,GAAQ,OAAIA,EAAS,CAAC8E,KAAMC,IAAWC,QAAShE,MAE5EH,EAAmB,kBAAM,SAAAb,GAAQ,OAC1C2E,EAAOM,KAAK,CACRC,IAAI,8BACJC,OAAQ,CACJC,OAAQ,UAGXC,MAAK,SAAAC,GAAQ,OAAItF,EAAS,CAAC8E,KAAMS,IAAaP,QAASM,EAASE,UAChEC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAGzBE,EAAyB,SAAC5E,GAAD,OAAW,SAAAhB,GAAQ,OACrD2E,EAAOM,KAAK,CACRC,IAAI,+BAAD,OAAiClE,GACpCmE,OAAQ,CACJC,OAAQ,UAGXC,MAAK,SAAAC,GAAQ,OAAItF,EAAS,CAAC8E,KAAMe,IAAqBb,QAASM,EAASE,UACxEC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAGzBI,EAAwB,SAAC9E,GAAD,OAAW,SAAAhB,GAAQ,OACpD2E,EAAOM,KAAK,CACRC,IAAI,kBAAD,OAAoBlE,EAApB,WACHmE,OAAQ,CACJC,OAAQ,UAGXC,MAAK,SAAAC,GAAQ,OAAItF,EAAS,CAAC8E,KAAMiB,IAAmBf,SAAUM,EAASE,KAAKxE,IAAU,IAAzB,aAC7DyE,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAEzBM,EAAyB,SAAChF,GAAD,OAAW,SAAAhB,GAAQ,OACrD2E,EAAOM,KAAK,CACRC,IAAI,kBAAD,OAAoBlE,EAApB,+BACHmE,OAAQ,CACJC,OAAQ,UAGXC,MAAK,SAAAC,GAAQ,OAAItF,EAAS,CAAC8E,KAAMmB,IAAoBjB,QAASM,EAASE,KAAKxE,IAAQ,QACpFyE,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAEzBQ,EAAyB,SAAClF,GAAD,OAAW,SAAAhB,GAAQ,OACrD2E,EAAOM,KAAK,CACRC,IAAI,kBAAD,OAAoBlE,EAApB,cACHmE,OAAQ,CACJC,OAAQ,UAGXC,MAAK,SAAAC,GAAQ,OAAItF,EAAS,CAAC8E,KAAMqB,IAAoBnB,SAAWM,EAASE,KAAKxE,IAAU,IAAzB,UAA0C,QACzGyE,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAGzBU,EAAsB,SAACpF,GAAD,OAAW,SAAAhB,GAAQ,OAClD2E,EAAOM,KAAK,CACRC,IAAI,kBAAD,OAAoBlE,EAApB,WACHmE,OAAQ,CACJC,OAAQ,UAGXC,MAAK,SAAAC,GAAQ,OAAItF,EAAS,CAAC8E,KAAMuB,IAAiBrB,QAASM,EAASE,UACpEC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAEzBY,EAAyB,SAACtF,EAAOuF,GAAR,OAAkB,SAAAvG,GAAQ,OAAI2E,EAAOM,KAAK,CAC5EC,IAAI,kBAAD,OAAoBlE,EAApB,cACHwF,OAAQ,MACRhB,KAAMe,MAmBGE,EAAmC,SAAC,GAAD,IAAEzF,EAAF,EAAEA,MAAO0F,EAAT,EAASA,KAAMC,EAAf,EAAeA,KAAMjH,EAArB,EAAqBA,GAAIkH,EAAzB,EAAyBA,QAAzB,IAAkCC,eAAlC,MAA4C,KAA5C,SAAsD,SAAA7G,GAAQ,OAAI2E,EAAOM,KAAK,CAC1HC,IAAI,kBAAD,OAAoBlE,EAApB,YACHwF,OAAQ,OACRhB,UAAasB,IAAPpH,GAA2B,OAAPA,GAAsB,KAAPA,EACrC,CAAE6G,MAAO,CAAEQ,MAAO,CAAEC,IAAKtH,IAAQgH,OAAMC,OAAMvF,KAAM,CAAC,CAAE4F,IAAK,CAAEtG,MAAO,gBAExDoG,IAAZD,GAAqC,OAAZA,GAAgC,KAAZA,EACzC,CAAEN,MAAO,CACDU,KAAM,CACFC,qBAAsB,EACtBC,OAAQ,CACJ,CACIC,YAAa,CACTb,MAAOM,EACPpH,OAAQmH,EACRS,SAAU,KACVC,MAAO,IAGf,CACIP,MAAO,CACHC,IAAKH,OAMzBH,OACAC,OACAvF,KAAM,CACF,CAACmG,OAAQ,CAAC7G,MAAO,WAKzB,CAAEgG,OAAMC,OAAMvF,KAAM,CAChB,CAAEmG,OAAQ,CAAE7G,MAAO,aAIhC2E,MAAK,SAAAC,GAEJ,OADAtF,EAAS,CAAE8E,KAAM0C,IAAoCxC,QAASM,EAASE,OAChEF,EAASE,UAGPiC,EAAgC,SAAC,GAAD,IAAEzG,EAAF,EAAEA,MAAOtB,EAAT,EAASA,GAAIgI,EAAb,EAAaA,KAAb,OAAuB,SAAA1H,GAAQ,OAAI2E,EAAOM,KAAK,CACxFC,IAAI,kBAAD,OAAoBlE,EAApB,iBAAkCtB,GACrC8G,OAAQ,MACRhB,KAAMkC,IACPrC,MAAK,SAAAC,GAAQ,OAAIA,EAASE,UAEhBmC,EAA+B,SAAC,GAAD,IAAE3G,EAAF,EAAEA,MAAO0G,EAAT,EAASA,KAAT,OAAmB,SAAA1H,GAAQ,OAAI2E,EAAOM,KAAK,CACnFC,IAAI,kBAAD,OAAoBlE,EAApB,SACHwF,OAAQ,OACRhB,KAAMkC,IACPrC,MAAK,SAAAC,GAAQ,OAAIA,EAASE,UAEhBoC,EAAkC,SAAC,GAAD,IAAE5G,EAAF,EAAEA,MAAOtB,EAAT,EAASA,GAAT,OAAiB,SAAAM,GAAQ,OAAI2E,EAAOM,KAAK,CACpFC,IAAI,kBAAD,OAAoBlE,EAApB,iBAAkCtB,GACrC8G,OAAQ,WACTnB,MAAK,SAAAC,GAAQ,OAAIA,EAASE,UAEhBqC,EAA+B,SAAC7G,EAAO8G,GAAR,OAA6B,SAAA9H,GAAQ,OAAI2E,EAAOM,KAAK,CAC7FC,IAAI,YAAD,OAAclE,EAAd,aACHwF,OAAQ,OACRhB,KAAMsC,IACPzC,MAAK,SAAAC,GAAQ,OAAIA,EAASE,UAGhBuC,EAAwB,SAACC,EAAQhH,GAAT,OAAmB,SAAAhB,GAAQ,OAAI2E,EAAOM,KAAK,CAC5EC,IAAI,kBAAD,OAAoBlE,EAApB,YAA6BgH,GAChCxB,OAAQ,SACTnB,MAAK,SAAAC,GAAQ,OAAIA,EAASE,UAEhByC,EAAoB,SAAAjH,GAAK,OAAI,SAAAhB,GAAQ,OAAI2E,EAAOM,KAAK,CAC9DC,IAAI,kBAAD,OAAoBlE,GACvBwF,OAAQ,WACTnB,MAAK,SAAAC,GAAQ,OAAIA,EAASE","file":"static/js/61.ba7fc5d2.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Helmet from 'react-helmet';\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {\r\n    Box,\r\n    Divider as MuiDivider, FormControlLabel,\r\n    Link,\r\n    Paper, Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Avatar,\r\n    Typography,\r\n    TableSortLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {setIndicesAction} from \"../../../redux/actions/indicesActions\";\r\nimport {connect} from \"react-redux\";\r\nimport {green, grey, red, yellow} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({}));\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst fields = [\r\n    { id: \"no\", label: \"#\", sorting: true},\r\n    { id: \"index\", label: \"이름\", sorting: true},\r\n    { id: \"pri\", label: \"샤드\", sorting: false},\r\n    { id: \"docs.count\", label: \"문서 수\", sorting: true},\r\n    { id: \"store.size\", label: \"용량\", sorting: true},\r\n    { id: \"status\", label: \"상태\", sorting: false},\r\n]\r\n\r\n\r\nfunction Index({dispatch, indices}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [checked, setChecked] = useState(false)\r\n    const [orderBy, setOrderBy] = useState(\"\")\r\n    const [order, setOrder] = useState(\"asc\")\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndicesAction())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    function moveDetail(uuid) {\r\n        history.push(`./indices/${uuid}`)\r\n    }\r\n\r\n    function handleChecked(event) {\r\n        setChecked(!checked)\r\n    }\r\n    let sortedIndices = indices\r\n        .filter(index => checked ? true : index['index'].startsWith(\".\") === false )\r\n        .map((index, no) => { return index; })\r\n        .sort((a, b) => {\r\n            if(a['index'] > b['index']){\r\n                return 1;\r\n            }else if(a['index'] < b['index']){\r\n                return -1;\r\n            }else{\r\n                return 0;\r\n            }\r\n        })\r\n        .map((c, i) => ({...c, no: i }))\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"인덱스\"/>\r\n\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                인덱스\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            {/*<Box align={'right'}>*/}\r\n            {/*    <Link href={\"../indices/template\"} color={\"primary\"} >*/}\r\n            {/*        인덱스 생성*/}\r\n            {/*    </Link>*/}\r\n            {/*</Box>*/}\r\n\r\n            <br/>\r\n            <Box align={\"right\"}>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={checked}\r\n                            onChange={handleChecked}\r\n                            color=\"primary\"\r\n                            name=\"IndexModeSelector\"\r\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                        />\r\n                    }\r\n                    label=\"특수 인덱스 보기\"\r\n                />\r\n            </Box>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n\r\n                            {\r\n                                fields.map(field =>\r\n                                    <TableCell align=\"center\" key={field['id']}>\r\n                                        {\r\n                                            field[\"sorting\"] ?\r\n                                                <TableSortLabel\r\n                                                    active={orderBy === field['id']}\r\n                                                    direction={orderBy === field['id'] ? order : 'asc'}\r\n                                                    onClick={event => {\r\n                                                        setOrderBy(field['id'])\r\n                                                        const isAsc = orderBy === field['id'] && order === 'asc';\r\n                                                        setOrder(isAsc ? 'desc' : 'asc');\r\n                                                    }}\r\n                                                >\r\n                                                    {field['label']}\r\n                                                </TableSortLabel>\r\n                                                :\r\n                                                field['label']\r\n                                        }\r\n                                    </TableCell>)\r\n                            }\r\n                            {/*<TableCell align=\"center\">#</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">이름</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">샤드</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">문서 수</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">용량</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">상태</TableCell>*/}\r\n                            {/*health*/}\r\n                        {/*  status  */}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            sortedIndices.sort((a, b) => {\r\n                                if (orderBy && order) {\r\n                                    let x = a[orderBy]\r\n                                    let y = b[orderBy]\r\n                                    if (orderBy === 'docs.count') {\r\n                                        x = Number(x)\r\n                                        y = Number(y)\r\n                                    } else if (orderBy === 'store.size') {\r\n                                        let x1 = Number(x.replace(/[a-z]/gi, \"\"))\r\n                                        let y1 = Number(y.replace(/[a-z]/gi, \"\"))\r\n                                        let xUnit = String(x||\"\").replace(/[0-9.]/g, \"\").toLowerCase()\r\n                                        let yUnit = String(y||\"\").replace(/[0-9.]/g, \"\").toLowerCase()\r\n                                        x = x1 + Number(xUnit.includes(\"k\") ? 1024 : xUnit.includes(\"m\") ? (1024 * 1024) : xUnit.includes(\"g\") ? (1024 * 1024 * 1024) : xUnit.includes(\"t\") ? (1024 * 1024 * 1024 * 1024) : 0)\r\n                                        y = y1 + Number(yUnit.includes(\"k\") ? 1024 : yUnit.includes(\"m\") ? (1024 * 1024) : yUnit.includes(\"g\") ? (1024 * 1024 * 1024) : yUnit.includes(\"t\") ? (1024 * 1024 * 1024 * 1024) : 0)\r\n                                    }\r\n                                    if (order === 'asc') {\r\n                                        return x > y ? 1 : -1\r\n                                    } else {\r\n                                        return x > y ? -1 : 1\r\n                                    }\r\n                                } else {\r\n                                    return 0\r\n                                }\r\n                            }).map((index, no) => {\r\n                                let statusColor = \"\";\r\n                                let statusText = \"\";\r\n                                if (index['status'] === 'close') {\r\n                                    statusColor = grey[700];\r\n                                    statusText = \"닫힘\";\r\n                                } else if (index['health'] === \"yellow\") {\r\n                                    statusColor = yellow[700];\r\n                                    statusText = \"주의\";\r\n                                } else if (index['health'] === \"red\") {\r\n                                    statusColor = red[700];\r\n                                    statusText = \"오류\";\r\n                                } else {\r\n                                    statusColor = green[500];\r\n                                    statusText = \"정상\";\r\n                                }\r\n\r\n                                return (\r\n                                    <TableRow key={index['uuid']}>\r\n                                        <TableCell component=\"th\" scope=\"row\" align=\"center\">{index['no'] + 1}</TableCell>\r\n                                        <TableCell align=\"center\" >\r\n                                            <Link style={{cursor: \"pointer\"}} onClick={() => moveDetail(index['uuid'])}>\r\n                                                {index['index']}\r\n                                            </Link>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Box>\r\n                                                P[{index['pri']||'-'}] R[{index['rep']||'-'}]\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Box>\r\n                                                {Number(index['docs.count']).toLocaleString()||'-'}\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Box>\r\n                                                {index['store.size']||'-'}\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Box align=\"center\">\r\n                                                <Avatar style={{backgroundColor: statusColor, width: \"40px\", fontSize: \"0.8em\"}}>\r\n                                                    {statusText}\r\n                                                </Avatar>\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })}\r\n                        {/* {\r\n                            indices.filter(index => checked ? true : index['index'].startsWith(\".\") === false ).map((index, no) => {\r\n                                return (\r\n                                    <TableRow key={index['uuid']}>\r\n                                        <TableCell component=\"th\" scope=\"row\" align=\"center\">{no + 1}</TableCell>\r\n                                        <TableCell align=\"center\" >\r\n                                            <Link style={{cursor: \"pointer\"}} onClick={() => moveDetail(index['uuid'])}>\r\n                                                {index['index']}\r\n                                            </Link>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">{index['status']}</TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })\r\n                        } */}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    ...store.indicesReducers,\r\n}))(Index);\r\n","import Client from '~/Client'\r\nimport {\r\n    SET_INDEX,\r\n    SET_INDEX_ALIASES, SET_INDEX_DOCUMENT_SOURCE_RESPONSE,\r\n    SET_INDEX_DOCUMENTS,\r\n    SET_INDEX_INFO_LIST,\r\n    SET_INDEX_MAPPINGS,\r\n    SET_INDEX_SETTINGS,\r\n    SET_INDEX_STATE,\r\n    SET_INDICES\r\n} from \"../constants\";\r\n\r\n\r\nconst client = new Client()\r\n\r\n\r\nexport const setIndexAction = (index) => dispatch => dispatch({type: SET_INDEX, payload: index})\r\n\r\nexport const setIndicesAction = () => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDICES, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexInfoListAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices/${index}`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_INFO_LIST, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexAliasesAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_alias`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_ALIASES, payload: (response.data[index] || {})['aliases']}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexSettingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_settings?include_defaults`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_SETTINGS, payload: response.data[index]||{}}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexMappingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_mappings`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{}) }))\r\n        .catch(error => console.error(error))\r\n    // dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{})['properties'] })\r\n\r\nexport const setIndexStateAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_stats`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_STATE, payload: response.data }))\r\n        .catch(error => console.error(error))\r\n\r\nexport const editDynamicQueryAction = (index, query) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_settings`,\r\n    method: \"PUT\",\r\n    data: query\r\n})\r\n\r\n\r\nexport const setIndexDocumentsAction = ({index, pageNum, rowSize, id, analysis}) => dispatch => client.call({\r\n    uri: `/indices/${index}/_docs`,\r\n    params: {\r\n        index,\r\n        pageNum,\r\n        rowSize,\r\n        id,\r\n        analysis\r\n    }\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_DOCUMENTS,\r\n    payload: response.data,\r\n})).catch(err => console.error(err))\r\n\r\n\r\nexport const setIndexDocumentSourceListAction = ({index, from, size, id, columns, keyword = null}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_search`,\r\n    method: 'post',\r\n    data: id !== undefined && id !== null && id !== \"\" ?\r\n        { query: { match: { _id: id } }, from, size, sort: [{ _id: { order: \"desc\" } }] }\r\n        :\r\n        keyword !== undefined && keyword !== null && keyword !== \"\" ?\r\n            { query: {\r\n                    bool: {\r\n                        minimum_should_match: 1,\r\n                        should: [\r\n                            {\r\n                                multi_match: {\r\n                                    query: keyword,\r\n                                    fields: columns,\r\n                                    operator: \"or\",\r\n                                    boost: 1\r\n                                }\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    _id: keyword\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                from,\r\n                size,\r\n                sort: [\r\n                    {_score: {order: \"desc\"}}\r\n                    // , { \"_id\": { \"order\": \"desc\" } }\r\n                ]\r\n            }\r\n            :\r\n            { from, size, sort: [\r\n                { _score: { order: \"desc\" } },\r\n                // { _id: { order: \"desc\" } }\r\n                ]\r\n            }\r\n}).then(response => {\r\n    dispatch({ type: SET_INDEX_DOCUMENT_SOURCE_RESPONSE, payload: response.data })\r\n    return response.data;\r\n})\r\n\r\nexport const editIndexDocumentSourceAction = ({index, id, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'put',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const addIndexDocumentSourceAction = ({index, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc`,\r\n    method: 'post',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexDocumentSourceAction = ({index, id}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'DELETE',\r\n}).then(response => response.data)\r\n\r\nexport const analyzerDocumentSourceAction = (index, analyzerDocument) => dispatch => client.call({\r\n    uri: `/indices/${index}/analyzer`,\r\n    method: \"post\",\r\n    data: analyzerDocument\r\n}).then(response => response.data)\r\n\r\n\r\nexport const setIndexManagedAction = (action, index) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/${action}`,\r\n    method: \"post\"\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexAction = index => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}`,\r\n    method: \"delete\"\r\n}).then(response => response.data)"],"sourceRoot":""}
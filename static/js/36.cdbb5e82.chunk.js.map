{"version":3,"sources":["../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","../node_modules/@material-ui/icons/esm/OfflinePin.js","../node_modules/@material-ui/icons/esm/Delete.js","components/DynamicTable/index.js","pages/analysis/dictionary/Set.js","pages/analysis/dictionary/Synonym.js","pages/analysis/dictionary/Space.js","pages/analysis/dictionary/Synonym2Way.js","pages/analysis/dictionary/Custom.js","pages/analysis/dictionary/WrapperTabPanel.js","../node_modules/@material-ui/core/esm/internal/SwitchBase.js","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js","utils.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["DialogContentText","React","props","ref","Typography","_extends","component","variant","color","withStyles","root","marginBottom","name","createSvgIcon","createElement","d","useStyles","makeStyles","theme","input","border","DynamicTable","dataList","from","limit","showCheckBox","onSelectClick","isEdit","onUpdate","onDelete","classes","useState","selected","setSelected","array","setArray","useEffect","map","data","fields","field","rowCount","forEach","length","rows","i","cols","j","push","id","text","splice","TableContainer","Paper","Table","size","TableHead","TableRow","index","Fragment","key","TableCell","padding","Checkbox","defaultChecked","onChange","event","checked","ids","row","handleSelectAllClick","target","Box","align","TableBody","rowIdx","col","colIdx","includes","concat","filter","select","InputBase","className","value","cloneArray","slice","handleChange","fullWidth","b","IconButton","iconButton","onClick","updateFields","console","log","handleEdit","OfflinePin","Delete","prototype","PropTypes","isRequired","Button","styled","MuiButton","spacing","sizing","palette","MuiBox","formControl","minWidth","form","display","alignItems","width","marginLeft","flex","borderBottom","divider","height","margin","right","textAlign","checkedList","searchedKeyword","connect","store","authUser","dsearchReducers","dictionary","setting","result","dataSet","dispatch","useDispatch","searchColumns","setSearchColumns","keyword","setKeyword","isMatch","setMatch","mode","setMode","pageNum","setPageNum","rowSize","createId","setCreateId","createKeyword","setCreateKeyword","createValue","setCreateValue","deleteDialogOpen","setDeleteDialogOpen","createDialogOpen","setCreateDialogOpen","toggleCheckbox","handlePagination","setDictionary","handleSearchClick","a","deleteDictionary","utils","sleep","handleCreateData","createDictionary","column","hits","hit","createLabels","colId","find","colKeyword","colValue","Card","CardContent","Grid","container","item","xs","FormControl","Select","MenuItem","placeholder","onKeyUp","keyCode","type","aria-label","Search","md","mx","downloadDictionary","mr","role","analysis","disabled","m","Dialog","open","onClose","DialogTitle","style","cursor","DialogContent","mt","TextField","autoFocus","onKeyPress","e","DialogActions","createSearchColumn","window","confirm","checkedListId","columns","reduce","o","k","Object","assign","updateDictionary","dictionaryReducers","activeIndex","settings","Viewer","Set","Synonym","Space","Synonym2Way","Custom","SwitchBase","checkedProp","checkedIcon","disabledProp","icon","inputProps","inputRef","onBlur","onFocus","readOnly","required","tabIndex","other","_objectWithoutProperties","_useControlled","useControlled","controlled","default","Boolean","_useControlled2","_slicedToArray","setCheckedState","muiFormControl","useFormControl","hasLabelFor","clsx","undefined","newChecked","position","opacity","top","left","zIndex","_props$raised","raised","elevation","overflow","_props$component","Component","paddingBottom","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","_props$checkedIcon","_props$color","_props$icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","_props$size","capitalize","fontSize","secondary","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","colorSecondary","ms","Promise","resolve","setTimeout","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/36.cdbb5e82.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = React.forwardRef(function DialogContentText(props, ref) {\n  return React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z\"\n}), 'OfflinePin');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import React, {useState, useEffect} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    IconButton, InputBase\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {\r\n    Delete as DeleteIcon,\r\n    OfflinePin as OfflinePinIcon\r\n} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: { border: \"0px\" },\r\n}));\r\n\r\nfunction DynamicTable({dataList, from = 0, limit = 100000, showCheckBox = false, onSelectClick, isEdit = false, onUpdate = () => {}, onDelete = () => {}}) {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([])\r\n    const [array, setArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        setArray([...dataList.map(data => data.data)])\r\n    }, [dataList])\r\n\r\n    useEffect(() => {\r\n        setSelected([])\r\n    }, [showCheckBox])\r\n\r\n\r\n    const fields = dataList.map(data => data.field);\r\n\r\n    let rowCount = 0;\r\n    dataList.forEach(data => rowCount < data.data.length ? rowCount = data.data.length : rowCount);\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n        let cols = [];\r\n        for (let j = 0; j < fields.length; j++) {\r\n            if (array[j]) {\r\n                if (typeof array[j][i] !== 'object') {\r\n                    cols.push({id: array[j][i], text: array[j][i]})\r\n                } else {\r\n                    cols.push({id: array[j][i]['id'], text: array[j][i]['text']})\r\n                }\r\n            }\r\n        }\r\n        rows.push(cols)\r\n    }\r\n    rows = rows.splice(from, limit)\r\n\r\n    function handleSelectAllClick(checked) {\r\n        let ids = []\r\n        rows.forEach(row => {\r\n            onSelectClick(row[0].id, checked)\r\n            ids.push(row[0].id)\r\n        })\r\n        checked ? setSelected(ids) : setSelected([])\r\n    }\r\n    function handleSelectClick(id, checked) {\r\n        onSelectClick(id, checked)\r\n        checked ? setSelected(selected.concat(id)) : setSelected(selected.filter(select => select !== id))\r\n    }\r\n    function handleChange(event, id, colIdx, rowIdx) {\r\n        let cloneArray = array.slice()\r\n        cloneArray[colIdx][rowIdx]['text'] = event.target.value\r\n        setArray(cloneArray)\r\n    }\r\n    function handleEdit(id, rowIdx) {\r\n        let cols = []\r\n        let updateFields = []\r\n        for (let i = 0; i < array.length; i++) {\r\n            cols.push(array[i][rowIdx]['text'] || '')\r\n            console.log(fields[i])\r\n            updateFields.push(fields[i] || '')\r\n        }\r\n        onUpdate(id, cols, updateFields)\r\n    }\r\n    function handleDelete(id) {\r\n        onDelete(id)\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            fields.map((field, index) => (\r\n                                <React.Fragment key={field}>\r\n                                    {\r\n                                        showCheckBox && index === 0  ?\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox defaultChecked={false} onChange={(event) => handleSelectAllClick(event.target.checked)}/>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <TableCell>{field}</TableCell>\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        {\r\n                            showCheckBox && isEdit ?\r\n                                <TableCell>\r\n                                    <Box align={\"center\"}>\r\n                                        액션\r\n                                    </Box>\r\n                                </TableCell>\r\n                                :\r\n                                null\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((cols, rowIdx) => {\r\n                            return (\r\n                                <TableRow key={rowIdx}>\r\n                                    {\r\n                                        cols.map((col, colIdx) => {\r\n                                            return (\r\n                                                <React.Fragment key={colIdx}>\r\n                                                    {\r\n                                                        showCheckBox && colIdx === 0 ?\r\n                                                            <TableCell padding=\"checkbox\">\r\n                                                                <Checkbox checked={selected.includes(col.id)}\r\n                                                                          onChange={(event) => handleSelectClick(col.id, event.target.checked)}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <TableCell>\r\n                                                        {\r\n                                                            showCheckBox && isEdit ?\r\n                                                                // 수정 모드\r\n                                                                <InputBase className={classes.input}\r\n                                                                           value={col.text|| ''}\r\n                                                                           /*순서 주의 (colIdx, rowIdx)*/\r\n                                                                           onChange={(event) => handleChange(event, col.id, colIdx, rowIdx)}\r\n                                                                           fullWidth\r\n                                                                           b={0}\r\n                                                                />\r\n                                                                :\r\n                                                                // 조회 모드\r\n                                                                col.text\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        showCheckBox && isEdit ?\r\n                                            <TableCell>\r\n                                                <Box align={\"center\"}>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleEdit(cols[0]['id'], rowIdx)}\r\n                                                    >\r\n                                                        <OfflinePinIcon/>\r\n                                                    </IconButton>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleDelete(cols[0]['id'])}\r\n                                                    >\r\n                                                        <DeleteIcon/>\r\n                                                    </IconButton>\r\n\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nDynamicTable.prototype = {\r\n    dataList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DynamicTable","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle, FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase, Select,\r\n    TextField,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Set({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Set\", authUser)\r\n    // authUser.role.analysis = false;\r\n    \r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        // setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        // setKeyword(createKeyword)\r\n        // dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {\r\n                                                    setCreateId('');\r\n                                                    setCreateKeyword('');\r\n                                                    setCreateValue('');\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Set)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Grid, IconButton, InputBase,\r\n    Button as MuiButton,\r\n    Card, CardContent,\r\n    Box as MuiBox,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary, updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Synonym\", authUser);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        const createSearchColumn = createId !== '' ? 'id' : createKeyword !== '' ? 'keyword' : 'value'\r\n        const createSearchKeyword = createId !== '' ? createId : createKeyword !== '' ? createKeyword : createValue\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        // setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        setMatch(true)\r\n        setSearchColumns(createSearchColumn)\r\n        // setKeyword(createSearchKeyword)\r\n        // dispatch(setDictionary(dictionary, 0, rowSize, true, createSearchKeyword, createSearchColumn))\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    \r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                          checked={isMatch}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {setCreateKeyword('');setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                             {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState} from \"react\";\r\nimport {connect,useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle, FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase, Select,\r\n    TextField,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Space({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Space\", authUser);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        // setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        // setKeyword(createKeyword)\r\n        // dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            // 수정된 사항\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n            // data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][\"value\"] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {\r\n                                                    setCreateId('');\r\n                                                    setCreateKeyword('');\r\n                                                    setCreateValue('');\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Space)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Grid, IconButton, InputBase,\r\n    Button as MuiButton,\r\n    Card, CardContent,\r\n    Box as MuiBox,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary, updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Synonym2Way\", authUser);\r\n    // authUser.role.analysis = false;\r\n\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        // setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        // setKeyword(createKeyword)\r\n        // dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {setCreateKeyword('');setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value) } onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Grid, IconButton, InputBase,\r\n    Button as MuiButton,\r\n    Card, CardContent,\r\n    Box as MuiBox,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary, updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Custom\", authUser)\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        // setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        // setKeyword(createKeyword)\r\n        // dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {setCreateKeyword('');setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            \r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> \r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}} onChange={event => setCreateId(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}} onChange={event => setCreateKeyword(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}} onChange={event => setCreateValue(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Set from './Set'\r\nimport Synonym from './Synonym'\r\nimport Space from './Space'\r\nimport Synonym2Way from './Synonym2Way'\r\nimport Custom from './Custom'\r\n\r\nfunction WrapperTabPanel({ activeIndex, settings, dataSet }) {\r\n    const setting = settings[activeIndex]\r\n    const dictionary = setting['id']\r\n    const type = setting['type']\r\n\r\n    // console.log(\"settings \", settings);\r\n    // console.log(\"dictionary \", dictionary);\r\n    // console.log(\"type \", type);\r\n    // console.log(\"dataSet \", dataSet);\r\n\r\n    let Viewer = null\r\n    switch (type) {\r\n        case \"SET\": Viewer = Set; break;\r\n        case \"SYNONYM\": Viewer = Synonym; break;\r\n        case \"SPACE\": Viewer = Space; break; // Set 과 동일함...\r\n        case \"COMPOUND\": Viewer = Synonym; break; // Synonym 과 동일함...\r\n        case \"SYNONYM_2WAY\": Viewer = Synonym2Way; break; // Synonym 과 동일함...\r\n        case \"CUSTOM\": Viewer = Custom; break; // Synonym 과 동일함...\r\n        default: Viewer = () => <React.Fragment>지원하지 않는 타입 입니다.</React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Viewer dictionary={dictionary}\r\n                    setting={setting}\r\n                    dataSet={dataSet}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.dictionaryReducers}))(WrapperTabPanel)","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport IconButton from '../IconButton';\nexport var styles = {\n  root: {\n    padding: 9\n  },\n  checked: {},\n  disabled: {},\n  input: {\n    cursor: 'inherit',\n    position: 'absolute',\n    opacity: 0,\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    margin: 0,\n    padding: 0,\n    zIndex: 1\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar SwitchBase = React.forwardRef(function SwitchBase(props, ref) {\n  var autoFocus = props.autoFocus,\n      checkedProp = props.checked,\n      checkedIcon = props.checkedIcon,\n      classes = props.classes,\n      className = props.className,\n      defaultChecked = props.defaultChecked,\n      disabledProp = props.disabled,\n      icon = props.icon,\n      id = props.id,\n      inputProps = props.inputProps,\n      inputRef = props.inputRef,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      readOnly = props.readOnly,\n      required = props.required,\n      tabIndex = props.tabIndex,\n      type = props.type,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"autoFocus\", \"checked\", \"checkedIcon\", \"classes\", \"className\", \"defaultChecked\", \"disabled\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"]);\n\n  var _useControlled = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      checked = _useControlled2[0],\n      setCheckedState = _useControlled2[1];\n\n  var muiFormControl = useFormControl();\n\n  var handleFocus = function handleFocus(event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    var newChecked = event.target.checked;\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      onChange(event, newChecked);\n    }\n  };\n\n  var disabled = disabledProp;\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  var hasLabelFor = type === 'checkbox' || type === 'radio';\n  return React.createElement(IconButton, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className, checked && classes.checked, disabled && classes.disabled),\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ref: ref\n  }, other), React.createElement(\"input\", _extends({\n    autoFocus: autoFocus,\n    checked: checkedProp,\n    defaultChecked: defaultChecked,\n    className: classes.input,\n    disabled: disabled,\n    id: hasLabelFor && id,\n    name: name,\n    onChange: handleInputChange,\n    readOnly: readOnly,\n    ref: inputRef,\n    required: required,\n    tabIndex: tabIndex,\n    type: type,\n    value: value\n  }, inputProps)), checked ? checkedIcon : icon);\n}); // NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\n\nprocess.env.NODE_ENV !== \"production\" ? SwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'PrivateSwitchBase'\n})(SwitchBase);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = React.createElement(CheckBoxIcon, null);\nvar defaultIcon = React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}
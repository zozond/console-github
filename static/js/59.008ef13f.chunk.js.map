{"version":3,"sources":["components/LazyLoadImage/index.js","pages/search/referenceUI/result.js","components/AntTabs/index.js"],"names":["trackWindowScroll","image","effect","alt","height","src","width","scrollPosition","window","scrollY","style","maxWidth","Box","styled","MuiBox","spacing","palette","sizing","display","borders","Divider","MuiDivider","Grid","MuiGrid","Typography","MuiTypography","Button","MuiButton","Card","MuiCard","CardContent","MuiCardContent","List","MuiList","ListItem","MuiListItem","connect","store","referenceSearchReducers","dsearchReducers","dsearchPluginReducers","resultList","authUser","keyword","pluginResponse","useSelector","history","useHistory","tabs","map","result","label","component","documents","aggregations","template","pagination","dispatch","useDispatch","useState","disabledAppendButton","setDisabledAppendButton","replacePatternForSource","source","pattern","patternList","String","match","replaceStr","toString","replace","forEach","Total","ml","mt","totalCount","Fragment","container","item","xs","md","lg","p","pt","data","index","documentMap","title","thumbnails","clickUrl","key","py","pl","align","minWidth","px","LazyLoadImage","backgroundColor","borderRadius","href","rel","target","variant","dangerouslySetInnerHTML","__html","field","value","whiteSpace","aggs","Color","bucket","pageNum","lastPageNum","size","color","onClick","scrollX","addReferenceResult","id","then","disabled","SearchPanel","Number","rowSize","push","length","my","AntTabs","tabIndex","Tab","withStyles","theme","root","textTransform","fontWeight","typography","fontWeightRegular","marginRight","opacity","fontWeightMedium","selected","props","disableRipple","onChange","React","state","setState","event","indicatorColor","textColor","scrollButtons","tab","icon","role","hidden","aria-labelledby"],"mappings":"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","file":"static/js/59.008ef13f.chunk.js","sourcesContent":["import {LazyLoadImage, trackWindowScroll} from \"react-lazy-load-image-component\";\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\nimport React from \"react\";\r\n\r\n\r\nconst Lazy = ({ image }) => (\r\n    <div>\r\n        <LazyLoadImage\r\n            effect=\"blur\"\r\n            alt={image.alt}\r\n            height={image.height}\r\n            src={image.src}\r\n            width={image.width}\r\n            scrollPosition={window.scrollY}\r\n            style={{maxWidth: image.maxWidth || '100%'}}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default trackWindowScroll(Lazy);","import React, {useState} from \"react\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Helmet from 'react-helmet';\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent as MuiCardContent,\r\n    Divider as MuiDivider,\r\n    Grid as MuiGrid,\r\n    List as MuiList,\r\n    ListItem as MuiListItem,\r\n    Typography as MuiTypography,\r\n} from \"@material-ui/core\";\r\n\r\nimport * as Color from '@material-ui/core/colors';\r\n\r\nimport {borders, display, palette, sizing, spacing} from \"@material-ui/system\";\r\n\r\nimport AntTabs from \"~/components/AntTabs\"\r\nimport LazyLoadImage from \"~/components/LazyLoadImage\"\r\nimport {addReferenceResult} from \"../../../redux/actions/referenceSearchActions\";\r\n\r\nconst Box = styled(MuiBox)(spacing, palette, sizing, display, borders);\r\nconst Divider = styled(MuiDivider)(spacing, palette, sizing, display, borders);\r\nconst Grid = styled(MuiGrid)(spacing, palette, sizing, display, borders);\r\nconst Typography = styled(MuiTypography)(spacing, palette, sizing, display, borders);\r\nconst Button = styled(MuiButton)(spacing, palette, sizing, display, borders);\r\nconst Card = styled(MuiCard)(spacing, palette, sizing, display, borders);\r\nconst CardContent = styled(MuiCardContent)(spacing, palette, sizing, display, borders);\r\nconst List = styled(MuiList)(spacing, palette, sizing, display, borders);\r\nconst ListItem = styled(MuiListItem)(spacing, palette, sizing, display, borders);\r\n\r\nfunction SearchPanel(documents, aggregations, template, pagination) {\r\n    const dispatch = useDispatch()\r\n    const [disabledAppendButton, setDisabledAppendButton] = useState(false)\r\n\r\n    function appendResult() {\r\n        setDisabledAppendButton(true)\r\n        window.scrollX = 0\r\n        window.scrollY = 0\r\n        dispatch(addReferenceResult(pagination.id, pagination))\r\n            .then(() => {\r\n                setDisabledAppendButton(false)\r\n                // window.scrollTo(scrollX, scrollY);\r\n                // console.log(scrollY, window.scrollY)\r\n            })\r\n    }\r\n\r\n    function replacePatternForSource(source, pattern) {\r\n        const regExp = /(?<=\\$\\{).*?(?=\\})/g;\r\n        const patternList = String(pattern).match(regExp)\r\n        let replaceStr = pattern.toString()\r\n        if (patternList !== null) {\r\n            // eslint-disable-next-line no-template-curly-in-string\r\n            replaceStr = replaceStr.replace('${keyword}', template['keyword'])\r\n            patternList.forEach(pattern => {\r\n                replaceStr = replaceStr.replace('${' + pattern + '}', source[pattern])\r\n            })\r\n        }\r\n        return replaceStr\r\n    }\r\n\r\n    let Total = pagination ?\r\n        (\r\n            <Box ml={2} mt={2}>\r\n                {`총 갯수: ${pagination.totalCount}`}\r\n            </Box>\r\n        )\r\n        : null\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {Total}\r\n                </Grid>\r\n                <Grid item xs={12} md={8} lg={9}>\r\n\r\n                    <List p={0} pt={4}>\r\n\r\n                        {\r\n                            (documents || []).map((data, index) => {\r\n                                const documentMap = data['sourceAsMap']\r\n                                const title = replacePatternForSource(documentMap, String(template['title']))\r\n                                const thumbnails = replacePatternForSource(documentMap, String(template['thumbnails']))\r\n                                const clickUrl = replacePatternForSource(documentMap, String(template['clickUrl']))\r\n\r\n                                return (\r\n                                    <ListItem key={index} py={2} pl={0}>\r\n                                        <Card style={{width: \"100%\"}}>\r\n                                            <CardContent>\r\n                                                <Box style={{width: \"100%\"}}>\r\n                                                    <Grid container>\r\n                                                        <Grid item xs={4}>\r\n                                                            <Box align={\"center\"}\r\n                                                                 style={{width: \"100%\", minWidth: '100%'}} py={2}\r\n                                                                 px={5}>\r\n                                                                <LazyLoadImage image={{\r\n                                                                    src: thumbnails,\r\n                                                                    alt: \"no image\",\r\n                                                                    width: \"100%\",\r\n                                                                    maxWidth: \"130px\"\r\n                                                                }}/>\r\n                                                            </Box>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={8}>\r\n                                                            <Box style={{width: '100%'}}>\r\n                                                                <Box px={3} py={2} style={{\r\n                                                                    backgroundColor: \"#F7F9FC\",\r\n                                                                    borderRadius: '5px'\r\n                                                                }}>\r\n                                                                    <a href={clickUrl} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                                                        <Typography variant={\"h5\"} display={\"inline\"}>\r\n                                                                            <div dangerouslySetInnerHTML={{__html: title}}></div>\r\n                                                                        </Typography>\r\n                                                                    </a>\r\n                                                                </Box>\r\n                                                                <Box px={4} pt={3}>\r\n                                                                    <List>\r\n                                                                        {template['fields'].map((field, index) => {\r\n                                                                            const label = field['label']\r\n                                                                            const value = replacePatternForSource(documentMap, String(field['value']))\r\n                                                                            return (\r\n                                                                                <ListItem p={1} key={index}>\r\n                                                                                    <Box whiteSpace=\"nowrap\">\r\n                                                                                        <div dangerouslySetInnerHTML={{__html: label}}></div>\r\n                                                                                    </Box>\r\n                                                                                    :\r\n                                                                                    <Box ml={2}>\r\n                                                                                        <div dangerouslySetInnerHTML={{__html: value}}></div>\r\n                                                                                    </Box>\r\n                                                                                </ListItem>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </List>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Box>\r\n                                            </CardContent>\r\n                                        </Card>\r\n                                    </ListItem>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </List>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={4} lg={3} mt={2}>\r\n\r\n                    {\r\n                        template['aggs'].map((aggs, index) => {\r\n                            const label = aggs['label']\r\n                            const value = aggs['value']\r\n                            return (\r\n                                <Card key={index} mt={4} pl={2} style={{backgroundColor: Color.blueGrey['100'], width: '100%'}}>\r\n                                    <CardContent>\r\n                                        <Box>\r\n                                            <Typography variant=\"h5\" mt={1}> {label} </Typography>\r\n                                            <List>\r\n                                                {\r\n                                                    ((aggregations[value] || {})['buckets'] || []).map((bucket, index) => {\r\n                                                        return (\r\n                                                            <ListItem key={index} p={1}>\r\n                                                                <Box component={\"span\"}>\r\n                                                                    - {bucket['key']}\r\n                                                                </Box>\r\n                                                                <Box component={\"span\"} ml={2}>\r\n                                                                    {bucket['docCount']}\r\n                                                                </Box>\r\n                                                            </ListItem>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </List>\r\n                                        </Box>\r\n                                    </CardContent>\r\n                                </Card>\r\n\r\n\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Box align={\"center\"} mt={5}>\r\n                        {\r\n                            pagination && pagination.pageNum < pagination.lastPageNum ?\r\n                                (\r\n                                    <Button size={\"large\"}\r\n                                            variant={\"contained\"}\r\n                                            color={\"primary\"}\r\n                                            onClick={appendResult}\r\n                                            disabled={disabledAppendButton}\r\n                                    >더보기</Button>\r\n                                )\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction Result({resultList, authUser, pluginResponse}) {\r\n    const keyword = useSelector(store => (store.referenceSearchReducers.keyword))\r\n    const history = useHistory()\r\n    \r\n\r\n    const tabs = resultList.map(result => ({\r\n        label: result['template']['name'] || \"이름 없음\",\r\n        component: () => SearchPanel(\r\n            result['documents']['hits'],\r\n            result['documents']['aggregations'] || {},\r\n            result['template'],\r\n            {\r\n                id: result['template']['id'],\r\n                keyword: keyword,\r\n                pageNum: Number(result['documents']['pageNum']) + 1,\r\n                rowSize: result['documents']['rowSize'],\r\n                totalCount: result['documents']['totalCount'],\r\n                lastPageNum: result['documents']['lastPageNum'],\r\n            })\r\n    }))\r\n\r\n    function moveSetting() {\r\n        history.push(`/${authUser['cluster']['id']}/search/reference-ui`)\r\n    }\r\n\r\n    // let resultACList = pluginResponse.result;\r\n    // let listStr = \"\";\r\n    // if(resultACList !== undefined && resultACList !== null && resultACList.length > 0 ){\r\n    //     resultACList.forEach(\r\n    //         item => { \r\n    //             listStr += (item + \", \")\r\n    //         }\r\n    //     )\r\n    //     listStr = listStr.substring(0, listStr.length-2);\r\n    // }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"검색결과\"/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={10}>\r\n                    <Typography variant=\"h3\"  display=\"inline\">\r\n                        레퍼런스 UI\r\n                    </Typography>\r\n                </Grid>\r\n                \r\n                <Grid item xs={2}>\r\n                    <Box align={\"right\"}>\r\n                        <Button color={\"default\"} variant={\"contained\"}\r\n                                onClick={moveSetting}>설정</Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {tabs && tabs.length > 0 ? <Divider my={6}/> : null}\r\n\r\n            <AntTabs tabs={tabs} tabIndex={0}/>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({\r\n    ...store.referenceSearchReducers, \r\n    ...store.dsearchReducers,\r\n    ...store.dsearchPluginReducers\r\n    }))(Result)","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"} />)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;"],"sourceRoot":""}
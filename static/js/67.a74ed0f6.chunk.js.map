{"version":3,"sources":["pages/cluster/index.js"],"names":["Card","styled","MuiCard","spacing","Divider","MuiDivider","Grid","MuiGrid","useStyles","makeStyles","theme","title","fontWeight","addCardButton","border","margin","marginTop","marginBottom","withoutLabel","ClusterCard","classes","cluster","onEditClick","onRemoveClick","to","newTo","showMenu","connection","name","seed","nodes","indices","shards","store","kibana","console","log","Object","keys","length","React","useState","openMenu","setOpenMenu","open","Boolean","handleClose","event","stopPropagation","item","xs","md","lg","xl","variant","style","cursor","minHeight","onClick","className","align","position","height","right","top","size","display","currentTarget","id","anchorEl","keepMounted","onClose","PaperProps","maxHeight","ITEM_HEIGHT","width","my","container","mt","whiteSpace","Number","toLocaleString","backgroundColor","borderRadius","component","color","AddClusterCard","props","showButton","Fragment","justifyContent","m","aria-label","handleClick","AddGuideCard","target","href","connect","clusterReducers","dsearchReducers","dispatch","clusterList","authUser","fullScreen","useMediaQuery","useTheme","breakpoints","down","openEditModal","setOpenEditModal","scheme","setScheme","setName","host","setHost","port","setPort","username","setUsername","password","setPassword","setKibana","setTheme","modalMessage","setModalMessage","connTest","setConnTest","nameError","setNameError","hostError","setHostError","portError","setPortError","usernameError","setUsernameError","passwordError","setPasswordError","selectedClusterId","setSelectedClusterId","openRemoveModal","setOpenRemoveModal","isRemoveData","setRemoveData","mode","setMode","isProcess","setProcess","toggleOpenAddModal","resetError","requireValidation","toggleOpenEditModal","useEffect","setClusterList","isStatus","then","data","isManager","gutterBottom","map","key","window","outerWidth","outerHeight","Math","ceil","goNewDashboard","fullWidth","aria-setsize","placeholder","value","error","onChange","type","endAdornment","url","startsWith","axios","get","timeout","headers","Authorization","btoa","response","status","catch","request","message","disabled","setClusterStatus","nodeSize","values","node","tmp","filter","addr","addCluster","alert","editCluster","fontSize","find","c","marginLeft","pl","control","checked","label","marginRight","removeClusterAction"],"mappings":"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","file":"static/js/67.a74ed0f6.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport styled from \"styled-components\";\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport Helmet from 'react-helmet';\r\nimport {title} from \"../../title.json\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent, Checkbox,\r\n    Divider as MuiDivider,\r\n    Fab, FormControl, FormControlLabel,\r\n    Grid as MuiGrid, Input, InputAdornment,\r\n    Link,\r\n    MenuList,\r\n    Select,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {\r\n    addCluster,\r\n    editCluster,\r\n    removeClusterAction,\r\n    setClusterList,\r\n    setClusterStatus\r\n} from \"../../redux/actions/clusterActions\";\r\nimport axios from \"axios\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Grid = styled(MuiGrid)(spacing);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontWeight: \"bold\"\r\n    },\r\n    addCardButton: {\r\n        border: \"1px solid\"\r\n    },\r\n    margin: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    }\r\n}))\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nfunction ClusterCard({classes, cluster, onEditClick, onRemoveClick, to, newTo, showMenu}) {\r\n    const connection = cluster['status']['connection'] || false\r\n    const name = cluster['cluster']['name']\r\n    const seed = `${cluster['cluster']['scheme']}://${cluster['cluster']['host']}:${cluster['cluster']['port']}`\r\n    const theme = cluster['cluster']['theme']\r\n    let nodes = \"N/A\"\r\n    let indices = \"N/A\"\r\n    let shards = \"N/A\"\r\n    let store = \"N/A\"\r\n    let kibana = \"N/A\"\r\n    console.log(cluster);\r\n    if (connection) {\r\n        nodes = Object.keys((cluster['status']||{})['nodes']||{}).length\r\n        indices = cluster['status']['state']['indices']\r\n        shards = cluster['status']['state']['shards']\r\n        store = cluster['status']['state']['store']\r\n        kibana = cluster['cluster']['kibana']\r\n    }\r\n\r\n    const [openMenu, setOpenMenu] = React.useState(null);\r\n    const open = Boolean(openMenu);\r\n\r\n    const handleClick = (event) => {\r\n        event.stopPropagation()\r\n        setOpenMenu(event.currentTarget);\r\n    };\r\n    const handleClose = (event) => {\r\n        event.stopPropagation()\r\n        setOpenMenu(null);\r\n    };\r\n\r\n    const handleEdit = (event) => {\r\n        event.stopPropagation()\r\n        onEditClick(cluster)\r\n        handleClose(event)\r\n    }\r\n    const handleRemove = (event) => {\r\n        event.stopPropagation()\r\n        onRemoveClick(cluster)\r\n        handleClose(event)\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} md={6} lg={4} xl={3}>\r\n            <Card variant=\"outlined\" style={{cursor: \"pointer\"}}>\r\n                    <CardContent>\r\n                        <Box style={{minHeight: \"200px\"}} onClick={to}>\r\n\r\n                            <Box className={classes.title} align={\"center\"}>\r\n                                {name}\r\n                                <Box style={{position: \"relative\", height: \"0px\", right: \"-45%\", top: \"15px\"}}>\r\n                                    <IconButton\r\n                                        onClick={newTo}\r\n                                        size={\"small\"}\r\n                                    >\r\n                                        <LaunchIcon />\r\n                                    </IconButton>\r\n                                </Box>\r\n\r\n                                <Box style={{position: \"relative\", height: \"0px\", right: \"-45%\", top: \"-25px\", display: showMenu ? \"block\" : \"none\"}}>\r\n\r\n                                    <IconButton\r\n                                        onClick={handleClick}\r\n                                        size={\"small\"}\r\n                                    >\r\n                                        <MoreVertIcon />\r\n                                    </IconButton>\r\n                                    <Menu\r\n                                        id=\"long-menu\"\r\n                                        anchorEl={openMenu}\r\n                                        keepMounted\r\n                                        open={open}\r\n                                        onClose={handleClose}\r\n                                        PaperProps={{\r\n                                            style: {\r\n                                                maxHeight: ITEM_HEIGHT * 4.5,\r\n                                                width: '20ch',\r\n                                            },\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem onClick={handleEdit}> 수정 </MenuItem>\r\n                                        <MenuItem onClick={handleRemove}> 삭제 </MenuItem>\r\n                                    </Menu>\r\n\r\n                                </Box>\r\n                            </Box>\r\n\r\n\r\n                            <Divider my={2} />\r\n\r\n                            <Grid container mt={3}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        노드\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {seed}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        노드 수\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {nodes ? Number(nodes).toLocaleString() : \"-\"}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        인덱스\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {indices ? Number(indices).toLocaleString() : \"-\"}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        샤드\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {shards ? Number(shards).toLocaleString() : \"-\"}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        사용 용량\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {store}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        키바나\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {kibana}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        색상\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{ display: theme === \"0\" ? \"block\" : \"none\", backgroundColor: \"rgb(27, 36, 48)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"1\" ? \"block\" : \"none\", backgroundColor: \"rgb(255, 255, 255)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"2\" ? \"block\" : \"none\", backgroundColor: \"rgb(25, 118, 210)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"3\" ? \"block\" : \"none\", backgroundColor: \"rgb(56, 142, 60)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"4\" ? \"block\" : \"none\", backgroundColor: \"rgb(57, 73, 171)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"5\" ? \"block\" : \"none\", backgroundColor: \"rgb(0, 121, 107)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        연결상태\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {connection ?\r\n                                            <Box component={\"span\"} style={{color: \"green\"}}>정상</Box>\r\n                                            :\r\n                                            <Box component={\"span\"} style={{color: \"red\"}}>실패</Box>\r\n                                        }\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction AddClusterCard(props) {\r\n    const classes = props.className\r\n    const display = props.showButton ? \"block\" : \"none\"\r\n    return (\r\n        <React.Fragment>\r\n            <Grid item xs={12} md={6} lg={4} xl={3} style={{display: display}}>\r\n                {/* <Card variant=\"outlined\" style={{minHeight: \"245px\"}}> */}\r\n                <Card variant=\"outlined\" style={{minHeight: \"269px\"}}>\r\n                    <CardContent>\r\n                        <Box display=\"flex\"\r\n                             justifyContent=\"center\"\r\n                             m={1}\r\n                             mt={10}\r\n                             className={classes.title}\r\n                        >\r\n                            신규 클러스터 추가\r\n                        </Box>\r\n                        <Box display=\"flex\"\r\n                             justifyContent=\"center\"\r\n                             m={2}\r\n                             mt={5}\r\n                        >\r\n                            <Fab color=\"primary\"\r\n                                 aria-label=\"add\"\r\n                                 onClick={() => props.handleClick()}\r\n                            >\r\n                                <AddIcon />\r\n                            </Fab>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction AddGuideCard(props) {\r\n    const classes = props.className\r\n    return (\r\n        <Grid item xs={12} md={6} lg={4} xl={3}>\r\n            <Card variant=\"outlined\" style={{minHeight: \"269px\"}}>\r\n            {/* <Card variant=\"outlined\" style={{minHeight: \"245px\"}}> */}\r\n                <CardContent>\r\n                    <Box display=\"flex\"\r\n                         justifyContent=\"center\"\r\n                         m={1}\r\n                         mt={15}\r\n                         className={classes.title}\r\n                    >\r\n                        {title} 서버설치방법\r\n                    </Box>\r\n                    <Box display=\"flex\"\r\n                         justifyContent=\"center\"\r\n                         m={3}\r\n                    >\r\n                        <Link target=\"_blank\" href=\"https://github.com/danawalab/dsearch-server/blob/master/README.md\">\r\n                            바로가기\r\n                        </Link>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction Cluster({ dispatch, clusterList, authUser }) {\r\n    const classes = useStyles();\r\n    const fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    const [openEditModal, setOpenEditModal] = useState(false);\r\n\r\n    const [scheme, setScheme] = useState(\"http\")\r\n    const [name, setName] = useState(\"\")\r\n    const [host, setHost] = useState(\"\")\r\n    const [port, setPort] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [kibana, setKibana] = useState(\"\")\r\n    const [theme, setTheme] = useState(0)\r\n    const [modalMessage, setModalMessage] = useState(\"\")\r\n    const [connTest, setConnTest] = useState(false)\r\n\r\n    const [nameError, setNameError] = useState(false)\r\n    const [hostError, setHostError] = useState(false)\r\n    const [portError, setPortError] = useState(false)\r\n    const [usernameError, setUsernameError] = useState(false)\r\n    const [passwordError, setPasswordError] = useState(false)\r\n\r\n    const [selectedClusterId, setSelectedClusterId] = useState(\"\")\r\n    const [openRemoveModal, setOpenRemoveModal] = useState(false)\r\n    const [isRemoveData, setRemoveData] = useState(false)\r\n\r\n\r\n    const [mode, setMode] = useState(\"ADD\")\r\n\r\n    const [isProcess, setProcess] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(setClusterList({isStatus: false}))\r\n            .then(data => dispatch(setClusterList()))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function toggleOpenAddModal() {\r\n        setProcess(false)\r\n        setMode(\"ADD\")\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n        setName(\"\"); setScheme(\"http\"); setHost(\"\"); setPort(\"\");\r\n        setUsername(\"\"); setPassword(\"\"); setKibana(\"\");\r\n        setTheme(0); setModalMessage(\"\");\r\n        setConnTest(false)\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n    function handleClusterTestProcess() {\r\n        setConnTest(false)\r\n        setModalMessage(\"\")\r\n        dispatch(setClusterStatus({ name, host, port, scheme, username, password })).then(status => {\r\n            if (!status['connection']) {\r\n                setConnTest(false)\r\n                setModalMessage(\"연결 실패\")\r\n                return\r\n            }\r\n            setConnTest(true)\r\n            const nodeSize = Object.values(status['nodes']).map(node => {\r\n                const tmp = ((node['http'] || node['http']) || {})\r\n                return tmp['publish_address'] ? `${scheme}://${tmp['publish_address']}` : null\r\n            }).filter(addr => addr !== null).length\r\n            setModalMessage(\"[연결 성공] 노드 수:\" + nodeSize)\r\n        }).catch(error => {\r\n            setConnTest(false)\r\n            setModalMessage(\"\")\r\n            setModalMessage(\"연결 실패\")\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    function handleKibanaTestProcess() {\r\n        // setConnTest(false)\r\n        // setModalMessage(\"\")\r\n        let url = \"\";\r\n        if( kibana.startsWith(\"http://\") || kibana.startsWith(\"https://\")){\r\n            url = kibana + \"/api/status\";\r\n        }else{\r\n            url = \"http://\" + kibana + \"/api/status\";\r\n        }\r\n        \r\n        axios.get(`${url}`, {\r\n            timeout: 3000,\r\n            headers: {\r\n                Authorization: `Basic ${btoa(username + \":\" + password)}`\r\n            }\r\n        }).then((response) => {\r\n            let status = response.data;\r\n            console.log(\"status: \", status);\r\n            if(status['status']['overall']['state'] === \"green\"){\r\n                setModalMessage(\"[연결 성공] 키바나 \");\r\n            }else{\r\n                setModalMessage(\"[연결 실패] 키바나 상태 불안정\");\r\n            }\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\r\n                console.log(\"data: \", error.response.data);\r\n                console.log(\"status: \",error.response.status);\r\n                console.log(\"header: \",error.response.headers);\r\n                setModalMessage(\"\");\r\n                setModalMessage(\"[연결 성공] 키바나\");\r\n              }\r\n              else if (error.request) {\r\n                // 요청이 이루어 졌으나 응답을 받지 못했습니다.\r\n                // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\r\n                // Node.js의 http.ClientRequest 인스턴스입니다.\r\n                console.log(\"req: \",error.request);\r\n                setModalMessage(\"\");\r\n                setModalMessage(\"[연결 성공] 키바나\");\r\n              }\r\n              else {\r\n                // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\r\n                setModalMessage(\"\");\r\n                setModalMessage(\"[연결 실패] 키바나\");\r\n                console.log('Error', error.message);\r\n              }\r\n            //   console.log(error.config);\r\n            \r\n        });\r\n       \r\n    }\r\n\r\n    function resetError() {\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n    }\r\n    function requireValidation() {\r\n        if (name === \"\") { setNameError(true); return false }\r\n        if (host === \"\") { setHostError(true); return false }\r\n        if (port === \"\" || port === \"0\") { setPortError(true); return false }\r\n        // if (scheme === \"https\") {\r\n        //     if (username === \"\") { setUsernameError(true); return false }\r\n        //     if (password === \"\") { setPasswordError(true); return false }\r\n        // }\r\n        if (!connTest) { return false }\r\n        return true\r\n    }\r\n    function handleAddClusterProcess() {\r\n        setProcess(true)\r\n        resetError()\r\n        if(!requireValidation()) {\r\n            setProcess(false)\r\n            return false\r\n        }\r\n\r\n        dispatch(addCluster({\r\n            name, host, port, scheme,\r\n            username, password,\r\n            kibana, theme\r\n        })).then(cluster => {\r\n            setProcess(false)\r\n            dispatch(setClusterList())\r\n            toggleOpenAddModal()\r\n        }).catch(error => {\r\n            setProcess(false)\r\n            console.log(error)\r\n            setModalMessage(error.message||\"error\")\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function handleEditClusterProcess() {\r\n        resetError()\r\n        if(!requireValidation()) {\r\n            return false\r\n        }\r\n\r\n        dispatch(editCluster(selectedClusterId, {\r\n            name, host, port, scheme,\r\n            username, password,\r\n            kibana, theme\r\n        })).then(cluster => {\r\n            dispatch(setClusterList())\r\n            toggleOpenEditModal()\r\n        }).catch(error => {\r\n            console.log(error)\r\n            setModalMessage(error.message||\"error\")\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function toggleOpenEditModal(cluster) {\r\n        setMode(\"EDIT\")\r\n        console.log('edit', cluster)\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n        if (!openEditModal) {\r\n            // opening..\r\n            setSelectedClusterId(cluster['cluster']['id'])\r\n            setName(cluster['cluster']['name']);\r\n            setScheme(cluster['cluster']['scheme']);\r\n            setHost(cluster['cluster']['host']);\r\n            setPort(cluster['cluster']['port']);\r\n            setUsername(cluster['cluster']['username'] || \"\");\r\n            setPassword(cluster['cluster']['password'] || \"\");\r\n            setKibana(cluster['cluster']['kibana'] || \"\");\r\n            setTheme(cluster['cluster']['theme']);\r\n        } else {\r\n            setName(\"\"); setScheme(\"http\"); setHost(\"\"); setPort(\"\");\r\n            setUsername(\"\"); setPassword(\"\"); setKibana(\"\");\r\n            setTheme(0);\r\n        }\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n\r\n    function toggleOpenRemoveModal(id) {\r\n        setSelectedClusterId(id)\r\n        setRemoveData(false)\r\n        setOpenRemoveModal(true)\r\n    }\r\n\r\n    function removeClusterProcess() {\r\n        dispatch(removeClusterAction(selectedClusterId, isRemoveData)).then(cluster => {\r\n            dispatch(setClusterList())\r\n            setSelectedClusterId(\"\")\r\n            setOpenRemoveModal(false)\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n    function goDashboard(id) {\r\n        // const link = document.createElement('a');\r\n        // link.setAttribute(\"href\", `${id}/dashboard`)\r\n        // link.setAttribute(\"target\", \"_blank\")\r\n        // document.body.appendChild(link);\r\n        // link.click()\r\n        window.open(`${id}/dashboard`,\"_blank\" )\r\n    }\r\n\r\n    function goNewDashboard(event, id) {\r\n        event.stopPropagation()\r\n        let width = window.outerWidth\r\n        let height = window.outerHeight\r\n\r\n        width = Math.ceil(width / 2) <= 1500 ? 1500 : Math.ceil(width / 2)\r\n        height = (Math.ceil(height / 2) <= 900 ? 900 : Math.ceil(height / 2))\r\n\r\n        window.open(`${id}/dashboard`,id,`location=no,directories=no,resizable=no,status=no,toolbar=no,menubar=no,left=${window.outerWidth / 5},top=50,scrollbars=yes,width=${width},height=${height}`)\r\n    }\r\n\r\n    const isManager = authUser['role']['manage']\r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Helmet title=\"클러스터\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                클러스터\r\n            </Typography>\r\n            <Divider my={6}/>\r\n\r\n            <Grid container spacing={6}>\r\n\r\n                {clusterList.map(cluster => <ClusterCard key={cluster['cluster']['id']}\r\n                                                         cluster={cluster}\r\n                                                         classes={classes}\r\n                                                         onEditClick={() => toggleOpenEditModal(cluster)}\r\n                                                         onRemoveClick={() => toggleOpenRemoveModal(cluster['cluster']['id'])}\r\n                                                         to={() => goDashboard(cluster['cluster']['id'])}\r\n                                                         newTo={event => goNewDashboard(event, cluster['cluster']['id'])}\r\n                                                         showMenu={isManager}\r\n                />)}\r\n\r\n                <AddClusterCard key={\"add\"}\r\n                                className={classes}\r\n                                handleClick={toggleOpenAddModal}\r\n                                showButton={isManager}\r\n                />\r\n\r\n                <AddGuideCard key={\"guide\"}\r\n                              className={classes}\r\n                />\r\n\r\n            </Grid>\r\n\r\n\r\n            {/*        추가         */}\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={openEditModal}\r\n                onClose={toggleOpenAddModal}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>\r\n                    클러스터 {mode === \"ADD\" ? \"추가\" : \"수정\"}\r\n                </DialogTitle>\r\n                <DialogContent aria-setsize={500}>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>이름</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <TextField placeholder={\"운영 클러스터\"}\r\n                                       value={name}\r\n                                       error={nameError}\r\n                                       onChange={event => {\r\n                                           setNameError(false);\r\n                                           setName(event.target.value);\r\n                                       }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider my={3} />\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>접속정보</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box>\r\n                                <Select value={scheme}\r\n                                        onChange={event => setScheme(event.target.value)}\r\n                                        fullWidth\r\n                                >\r\n                                    <MenuList variant={\"menu\"} value={\"http\"}>HTTP</MenuList>\r\n                                    <MenuList variant={\"menu\"} value={\"https\"}>HTTPS</MenuList>\r\n                                </Select>\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                <TextField placeholder=\"127.0.0.1\"\r\n                                           fullWidth\r\n                                           value={host}\r\n                                           error={hostError}\r\n                                           onChange={event => {\r\n                                               setHostError(false);\r\n                                               setHost(event.target.value);\r\n                                           }}\r\n                                />\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                <TextField placeholder=\"9200\"\r\n                                           fullWidth\r\n                                           type=\"number\"\r\n                                           value={port}\r\n                                           error={portError}\r\n                                           onChange={event => {\r\n                                               setPortError(false)\r\n                                               setPort(event.target.value)\r\n                                           }}\r\n                                />\r\n                            </Box>\r\n                            {/*<Box display={scheme === \"http\" ? \"none\" : \"block\"}>*/}\r\n                            <Box>\r\n                                <Box mt={2}>\r\n                                    <TextField placeholder=\"elastic\"\r\n                                               fullWidth\r\n                                               error={usernameError}\r\n                                               value={username}\r\n                                               onChange={event => {\r\n                                                   setUsernameError(false)\r\n                                                   setUsername(event.target.value)\r\n                                               }}\r\n                                    />\r\n                                </Box>\r\n                                <Box mt={2}>\r\n                                    <TextField type=\"password\"\r\n                                               placeholder=\"********\"\r\n                                               fullWidth\r\n                                               error={passwordError}\r\n                                               value={password}\r\n                                               onChange={event => {\r\n                                                   setPasswordError(false)\r\n                                                   setPassword(event.target.value)\r\n                                               }}\r\n\r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider my={3} />\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>키바나</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box>\r\n                                {/*<TextField placeholder=\"http://kibana:5601\"*/}\r\n                                {/*           fullWidth*/}\r\n                                {/*           value={kibana}*/}\r\n                                {/*           onChange={event => setKibana(event.target.value)}*/}\r\n                                {/*/>*/}\r\n\r\n                                <FormControl fullWidth className={classes.margin}>\r\n                                    <Input placeholder=\"http://kibana:5601\"\r\n                                           value={kibana}\r\n                                           onChange={event => setKibana(event.target.value)}\r\n                                           endAdornment={\r\n                                               <InputAdornment position=\"end\">\r\n                                                   <Button color=\"primary\"\r\n                                                           size={\"small\"}\r\n                                                           style={{marginBottom: \"10px\"}}\r\n                                                           onClick={handleKibanaTestProcess}\r\n                                                           disabled={kibana.length === 0 || isProcess}\r\n                                                   > 확인 </Button>\r\n                                               </InputAdornment>\r\n                                           }\r\n                                    />\r\n                                </FormControl>\r\n\r\n\r\n\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={4}>색상</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box mt={2}>\r\n                                <Select value={theme}\r\n                                        onChange={event => setTheme(event.target.value)}\r\n                                        style={{width: \"100%\"}}\r\n                                >\r\n                                    <MenuList value={0} style={{width: \"100%\", backgroundColor: \"rgb(27, 36, 48)\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(27, 36, 48)\", color: \"white\"}}> Dark </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={1} style={{width: \"100%\", backgroundColor: \"rgb(255, 255, 255)\", color: \"black\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(255, 255, 255)\", color: \"black\"}}> Light </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={2} style={{width: \"100%\", backgroundColor: \"rgb(25, 118, 210)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(25, 118, 210)\", color: \"white\"}}> Blue </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={3} style={{width: \"100%\", backgroundColor: \"rgb(56, 142, 60)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(56, 142, 60)\", color: \"white\"}}> Green </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={4} style={{width: \"100%\", backgroundColor: \"rgb(57, 73, 171)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(57, 73, 171)\", color: \"white\"}}> Indigo </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={5} style={{width: \"100%\", backgroundColor: \"rgb(0, 121, 107)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(0, 121, 107)\", color: \"white\"}}> Teal </Box>\r\n                                    </MenuList>\r\n                                </Select>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Box display={modalMessage === \"\" ? \"none\" : \"block\"}>\r\n                        {modalMessage}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={handleClusterTestProcess}\r\n                            disabled={host.length === 0 || port.length === 0 || isProcess}\r\n                    > 연결테스트 </Button>\r\n                    {/*<Button variant={\"outlined\"}*/}\r\n                    {/*        color={\"primary\"}*/}\r\n                    {/*        // style={{color: \"#EE0000\"}}*/}\r\n                    {/*        onClick={handleKibanaTestProcess}*/}\r\n                    {/*        disabled={kibana.length === 0 || isProcess}*/}\r\n                    {/*> 키바나테스트 </Button>*/}\r\n                    <Box display={mode === \"ADD\" ? \"block\" : \"none\"}>\r\n                        <Button color=\"primary\"\r\n                                variant=\"contained\"\r\n                                disabled={!connTest || isProcess}\r\n                                onClick={handleAddClusterProcess}\r\n                        >\r\n                            추가\r\n                        </Button>\r\n                    </Box>\r\n                    <Box display={mode === \"EDIT\" ? \"block\" : \"none\"}>\r\n                        <Button color=\"primary\"\r\n                                variant=\"contained\"\r\n                                disabled={!connTest}\r\n                                onClick={handleEditClusterProcess}\r\n                        >\r\n                            저장\r\n                        </Button>\r\n                    </Box>\r\n                    <Button onClick={toggleOpenAddModal}\r\n                            variant=\"contained\"\r\n                            disabled={isProcess}\r\n                    >\r\n                        취소\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            {/*    삭제     */}\r\n\r\n            <Dialog open={openRemoveModal} fullWidth={true} onClose={() => setOpenRemoveModal(!openRemoveModal)}>\r\n                <DialogTitle>클러스터 삭제</DialogTitle>\r\n             <DialogContent>\r\n                 <Box style={{fontSize: \"1.2em\"}}>\r\n                     <Box component={\"span\"} style={{fontWeight: \"bold\"}}>\r\n                         {\r\n                             (((clusterList||[]).find(c => c[\"cluster\"]['id'] === selectedClusterId||'')||{})['cluster']||{})['name']||''\r\n                         }\r\n                     </Box>\r\n                     &nbsp; 클러스터 삭제 하시겠습니까?\r\n                 </Box>\r\n             </DialogContent>\r\n                <DialogActions>\r\n                    <Grid container>\r\n                        <Grid item xs={8} md={9}>\r\n                            <Box style={{marginLeft: \"3px\"}} pl={3}>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={isRemoveData} onChange={() => setRemoveData(!isRemoveData)} />}\r\n                                    label={\"컬렉션 설정과 색인히스토리, 메타데이터까지 포함하여 삭제\"}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={4} md={3}>\r\n                            <Box style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n                                <Button style={{marginRight: \"2px\"}}\r\n                                        variant=\"contained\"\r\n                                        color={\"secondary\"}\r\n                                        onClick={removeClusterProcess}\r\n                                >\r\n                                    삭제\r\n                                </Button>\r\n                                <Button style={{marginLeft: \"2px\"}}\r\n                                        onClick={() => setOpenRemoveModal(false)}\r\n                                        variant=\"contained\"\r\n                                >\r\n                                    취소\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ ...store.clusterReducers, ...store.dsearchReducers }))(Cluster);\r\n\r\n"],"sourceRoot":""}
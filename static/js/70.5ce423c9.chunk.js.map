{"version":3,"sources":["pages/cluster/index.js"],"names":["Card","styled","MuiCard","spacing","Divider","MuiDivider","Grid","MuiGrid","useStyles","makeStyles","theme","title","fontWeight","addCardButton","border","margin","marginTop","marginBottom","withoutLabel","ClusterCard","classes","cluster","clusterList","onEditClick","onRemoveClick","to","showMenu","newTo","connection","name","seed","nodes","indices","shards","store","kibana","dictionaryRemoteClusterName","Object","keys","length","dictionaryRemoteClusterId","undefined","find","c","React","useState","openMenu","setOpenMenu","open","Boolean","handleClose","event","stopPropagation","item","xs","md","lg","xl","variant","style","cursor","minHeight","onClick","className","align","position","height","right","top","display","currentTarget","size","id","anchorEl","keepMounted","onClose","PaperProps","maxHeight","ITEM_HEIGHT","width","my","container","mt","whiteSpace","Number","toLocaleString","backgroundColor","borderRadius","component","color","AddClusterCard","props","showButton","Fragment","justifyContent","m","aria-label","handleClick","AddGuideCard","target","href","connect","clusterReducers","dsearchReducers","dispatch","authUser","fullScreen","useMediaQuery","useTheme","breakpoints","down","openEditModal","setOpenEditModal","scheme","setScheme","setName","host","setHost","port","setPort","username","setUsername","password","setPassword","setKibana","setTheme","modalMessage","setModalMessage","connTest","setConnTest","nameError","setNameError","hostError","setHostError","portError","setPortError","usernameError","setUsernameError","passwordError","setPasswordError","selectedClusterId","setSelectedClusterId","openRemoveModal","setOpenRemoveModal","isRemoveData","setRemoveData","setDictionaryRemoteClusterId","mode","setMode","isProcess","setProcess","toggleOpenAddModal","resetError","requireValidation","toggleOpenEditModal","useEffect","setClusterList","isStatus","then","data","isManager","dictionaryRemoteClusterList","map","filter","gutterBottom","key","window","outerWidth","outerHeight","Math","ceil","goNewDashboard","fullWidth","aria-setsize","placeholder","value","error","onChange","type","endAdornment","url","startsWith","axios","get","timeout","headers","Authorization","btoa","response","status","console","log","catch","request","message","disabled","e","i","setClusterStatus","nodeSize","values","node","tmp","addr","addCluster","alert","editCluster","fontSize","marginLeft","pl","control","checked","label","marginRight","removeClusterAction"],"mappings":"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","file":"static/js/70.5ce423c9.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport styled from \"styled-components\";\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Helmet from 'react-helmet';\r\nimport {title} from \"../../title.json\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Divider as MuiDivider,\r\n    Fab,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid as MuiGrid,\r\n    Input,\r\n    InputAdornment,\r\n    Link,\r\n    MenuList,\r\n    Select,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {\r\n    addCluster,\r\n    editCluster,\r\n    removeClusterAction,\r\n    setClusterList,\r\n    setClusterStatus\r\n} from \"../../redux/actions/clusterActions\";\r\nimport axios from \"axios\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Grid = styled(MuiGrid)(spacing);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontWeight: \"bold\"\r\n    },\r\n    addCardButton: {\r\n        border: \"1px solid\"\r\n    },\r\n    margin: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    }\r\n}))\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nfunction ClusterCard({classes, cluster, clusterList, onEditClick, onRemoveClick, to, newTo, showMenu}) {\r\n    const connection = cluster['status']['connection'] || false\r\n    const name = cluster['cluster']['name']\r\n    const seed = `${cluster['cluster']['scheme']}://${cluster['cluster']['host']}:${cluster['cluster']['port']}`\r\n    const theme = cluster['cluster']['theme']\r\n    let nodes = \"N/A\"\r\n    let indices = \"N/A\"\r\n    let shards = \"N/A\"\r\n    let store = \"N/A\"\r\n    let kibana = \"N/A\"\r\n    let dictionaryRemoteClusterName = \"사용안함\"\r\n\r\n    if (connection) {\r\n        nodes = Object.keys((cluster['status']||{})['nodes']||{}).length\r\n        indices = cluster['status']['state']['indices']\r\n        shards = cluster['status']['state']['shards']\r\n        store = cluster['status']['state']['store']\r\n        kibana = cluster['cluster']['kibana']||'사용안함'\r\n\r\n        let dictionaryRemoteClusterId = cluster['cluster']['dictionaryRemoteClusterId']\r\n        if (dictionaryRemoteClusterId !== undefined && dictionaryRemoteClusterId !== null && dictionaryRemoteClusterId !== \"\") {\r\n            dictionaryRemoteClusterName = ((clusterList.find(c => c['cluster']['id'] === dictionaryRemoteClusterId)||{})['cluster']||{})['name']||''\r\n        }\r\n    }\r\n\r\n    const [openMenu, setOpenMenu] = React.useState(null);\r\n    const open = Boolean(openMenu);\r\n\r\n    const handleClick = (event) => {\r\n        event.stopPropagation()\r\n        setOpenMenu(event.currentTarget);\r\n    };\r\n    const handleClose = (event) => {\r\n        event.stopPropagation()\r\n        setOpenMenu(null);\r\n    };\r\n\r\n    const handleEdit = (event) => {\r\n        event.stopPropagation()\r\n        onEditClick(cluster)\r\n        handleClose(event)\r\n    }\r\n    const handleRemove = (event) => {\r\n        event.stopPropagation()\r\n        onRemoveClick(cluster)\r\n        handleClose(event)\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} md={6} lg={4} xl={3}>\r\n            <Card variant=\"outlined\" style={{cursor: \"pointer\"}}>\r\n                    <CardContent>\r\n                        <Box style={{minHeight: \"200px\"}} onClick={to}>\r\n\r\n                            <Box className={classes.title} align={\"center\"}>\r\n                                {name}\r\n                                <Box style={{position: \"relative\", height: \"0px\", right: \"-45%\", top: \"15px\"}}>\r\n                                    {/* <IconButton\r\n                                        onClick={newTo}\r\n                                        size={\"small\"}\r\n                                    >\r\n                                        <LaunchIcon />\r\n                                    </IconButton> */}\r\n                                </Box>\r\n\r\n                                <Box style={{position: \"relative\", height: \"0px\", right: \"-45%\", top: \"-25px\", display: showMenu ? \"block\" : \"none\"}}>\r\n\r\n                                    <IconButton\r\n                                        onClick={handleClick}\r\n                                        size={\"small\"}\r\n                                    >\r\n                                        <MoreVertIcon />\r\n                                    </IconButton>\r\n                                    <Menu\r\n                                        id=\"long-menu\"\r\n                                        anchorEl={openMenu}\r\n                                        keepMounted\r\n                                        open={open}\r\n                                        onClose={handleClose}\r\n                                        PaperProps={{\r\n                                            style: {\r\n                                                maxHeight: ITEM_HEIGHT * 4.5,\r\n                                                width: '20ch',\r\n                                            },\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem onClick={handleEdit}> 수정 </MenuItem>\r\n                                        <MenuItem onClick={handleRemove}> 삭제 </MenuItem>\r\n                                    </Menu>\r\n\r\n                                </Box>\r\n                            </Box>\r\n\r\n\r\n                            <Divider my={2} />\r\n\r\n                            <Grid container mt={3}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        노드\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {seed}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        노드 수\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {nodes ? Number(nodes).toLocaleString() : \"-\"}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        인덱스\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {indices ? Number(indices).toLocaleString() : \"-\"}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        샤드\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {shards ? Number(shards).toLocaleString() : \"-\"}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        사용 용량\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {store}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        키바나\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {kibana}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        색상\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{ display: theme === \"0\" ? \"block\" : \"none\", backgroundColor: \"rgb(27, 36, 48)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"1\" ? \"block\" : \"none\", backgroundColor: \"rgb(255, 255, 255)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"2\" ? \"block\" : \"none\", backgroundColor: \"rgb(25, 118, 210)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"3\" ? \"block\" : \"none\", backgroundColor: \"rgb(56, 142, 60)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"4\" ? \"block\" : \"none\", backgroundColor: \"rgb(57, 73, 171)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"5\" ? \"block\" : \"none\", backgroundColor: \"rgb(0, 121, 107)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        사전소스\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {dictionaryRemoteClusterName}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        연결상태\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {connection ?\r\n                                            <Box component={\"span\"} style={{color: \"green\"}}>정상</Box>\r\n                                            :\r\n                                            <Box component={\"span\"} style={{color: \"red\"}}>실패</Box>\r\n                                        }\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction AddClusterCard(props) {\r\n    const classes = props.className\r\n    const display = props.showButton ? \"block\" : \"none\"\r\n    return (\r\n        <React.Fragment>\r\n            <Grid item xs={12} md={6} lg={4} xl={3} style={{display: display}}>\r\n                {/* <Card variant=\"outlined\" style={{minHeight: \"245px\"}}> */}\r\n                {/*<Card variant=\"outlined\" style={{minHeight: \"269px\"}}>*/}\r\n                <Card variant=\"outlined\" style={{minHeight: \"295px\"}}>\r\n                    <CardContent>\r\n                        <Box display=\"flex\"\r\n                             justifyContent=\"center\"\r\n                             m={1}\r\n                             mt={10}\r\n                             className={classes.title}\r\n                        >\r\n                            신규 클러스터 추가\r\n                        </Box>\r\n                        <Box display=\"flex\"\r\n                             justifyContent=\"center\"\r\n                             m={2}\r\n                             mt={5}\r\n                        >\r\n                            <Fab color=\"primary\"\r\n                                 aria-label=\"add\"\r\n                                 onClick={() => props.handleClick()}\r\n                            >\r\n                                <AddIcon />\r\n                            </Fab>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction AddGuideCard(props) {\r\n    const classes = props.className\r\n    return (\r\n        <Grid item xs={12} md={6} lg={4} xl={3}>\r\n            {/* <Card variant=\"outlined\" style={{minHeight: \"245px\"}}> */}\r\n            {/*<Card variant=\"outlined\" style={{minHeight: \"269px\"}}>*/}\r\n            <Card variant=\"outlined\" style={{minHeight: \"295px\"}}>\r\n                <CardContent>\r\n                    <Box display=\"flex\"\r\n                         justifyContent=\"center\"\r\n                         m={1}\r\n                         mt={15}\r\n                         className={classes.title}\r\n                    >\r\n                        {title} 서버설치방법\r\n                    </Box>\r\n                    <Box display=\"flex\"\r\n                         justifyContent=\"center\"\r\n                         m={3}\r\n                    >\r\n                        <Link target=\"_blank\" href=\"https://github.com/danawalab/dsearch-server/blob/master/README.md\">\r\n                            바로가기\r\n                        </Link>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction Cluster({ dispatch, clusterList, authUser }) {\r\n    const classes = useStyles();\r\n    const fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    const [openEditModal, setOpenEditModal] = useState(false);\r\n\r\n    const [scheme, setScheme] = useState(\"http\")\r\n    const [name, setName] = useState(\"\")\r\n    const [host, setHost] = useState(\"\")\r\n    const [port, setPort] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [kibana, setKibana] = useState(\"\")\r\n    const [theme, setTheme] = useState(0)\r\n    const [modalMessage, setModalMessage] = useState(\"\")\r\n    const [connTest, setConnTest] = useState(false)\r\n\r\n    const [nameError, setNameError] = useState(false)\r\n    const [hostError, setHostError] = useState(false)\r\n    const [portError, setPortError] = useState(false)\r\n    const [usernameError, setUsernameError] = useState(false)\r\n    const [passwordError, setPasswordError] = useState(false)\r\n\r\n    const [selectedClusterId, setSelectedClusterId] = useState(\"\")\r\n    const [openRemoveModal, setOpenRemoveModal] = useState(false)\r\n    const [isRemoveData, setRemoveData] = useState(false)\r\n\r\n    const [dictionaryRemoteClusterId, setDictionaryRemoteClusterId] = useState(\" \")\r\n\r\n\r\n    const [mode, setMode] = useState(\"ADD\")\r\n\r\n    const [isProcess, setProcess] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(setClusterList({isStatus: false}))\r\n            .then(data => dispatch(setClusterList()))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function toggleOpenAddModal() {\r\n        setProcess(false)\r\n        setMode(\"ADD\")\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n        setName(\"\"); setScheme(\"http\"); setHost(\"\"); setPort(\"\");\r\n        setUsername(\"\"); setPassword(\"\"); setKibana(\"\");\r\n        setTheme(0); setModalMessage(\"\");\r\n        setConnTest(false)\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n    function handleClusterTestProcess() {\r\n        setConnTest(false)\r\n        setModalMessage(\"\")\r\n        dispatch(setClusterStatus({ name, host, port, scheme, username, password })).then(status => {\r\n            if (!status['connection']) {\r\n                setConnTest(false)\r\n                setModalMessage(\"연결 실패\")\r\n                return\r\n            }\r\n            setConnTest(true)\r\n            const nodeSize = Object.values(status['nodes']).map(node => {\r\n                const tmp = ((node['http'] || node['http']) || {})\r\n                return tmp['publish_address'] ? `${scheme}://${tmp['publish_address']}` : null\r\n            }).filter(addr => addr !== null).length\r\n            setModalMessage(\"[연결 성공] 노드 수:\" + nodeSize)\r\n        }).catch(error => {\r\n            setConnTest(false)\r\n            setModalMessage(\"\")\r\n            setModalMessage(\"연결 실패\")\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    function handleKibanaTestProcess() {\r\n        // setConnTest(false)\r\n        // setModalMessage(\"\")\r\n        let url = \"\";\r\n        if( kibana.startsWith(\"http://\") || kibana.startsWith(\"https://\")){\r\n            url = kibana + \"/api/status\";\r\n        }else{\r\n            url = \"http://\" + kibana + \"/api/status\";\r\n        }\r\n        \r\n        axios.get(`${url}`, {\r\n            timeout: 3000,\r\n            headers: {\r\n                Authorization: `Basic ${btoa(username + \":\" + password)}`\r\n            }\r\n        }).then((response) => {\r\n            let status = response.data;\r\n            console.log(\"status: \", status);\r\n            if(status['status']['overall']['state'] === \"green\"){\r\n                setModalMessage(\"[연결 성공] 키바나 \");\r\n            }else{\r\n                setModalMessage(\"[연결 실패] 키바나 상태 불안정\");\r\n            }\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\r\n                console.log(\"data: \", error.response.data);\r\n                console.log(\"status: \",error.response.status);\r\n                console.log(\"header: \",error.response.headers);\r\n                setModalMessage(\"\");\r\n                setModalMessage(\"[연결 성공] 키바나\");\r\n              }\r\n              else if (error.request) {\r\n                // 요청이 이루어 졌으나 응답을 받지 못했습니다.\r\n                // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\r\n                // Node.js의 http.ClientRequest 인스턴스입니다.\r\n                console.log(\"req: \",error.request);\r\n                setModalMessage(\"\");\r\n                setModalMessage(\"[연결 성공] 키바나\");\r\n              }\r\n              else {\r\n                // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\r\n                setModalMessage(\"\");\r\n                setModalMessage(\"[연결 실패] 키바나\");\r\n                console.log('Error', error.message);\r\n              }\r\n            //   console.log(error.config);\r\n            \r\n        });\r\n       \r\n    }\r\n\r\n    function resetError() {\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n    }\r\n    function requireValidation() {\r\n        if (name === \"\") { setNameError(true); return false }\r\n        if (host === \"\") { setHostError(true); return false }\r\n        if (port === \"\" || port === \"0\") { setPortError(true); return false }\r\n        // if (scheme === \"https\") {\r\n        //     if (username === \"\") { setUsernameError(true); return false }\r\n        //     if (password === \"\") { setPasswordError(true); return false }\r\n        // }\r\n        if (!connTest) { return false }\r\n        return true\r\n    }\r\n    function handleAddClusterProcess() {\r\n        setProcess(true)\r\n        resetError()\r\n        if(!requireValidation()) {\r\n            setProcess(false)\r\n            return false\r\n        }\r\n\r\n        dispatch(addCluster({\r\n            name, host, port, scheme,\r\n            username, password,\r\n            kibana, theme,\r\n            dictionaryRemoteClusterId\r\n        })).then(cluster => {\r\n            setProcess(false)\r\n            dispatch(setClusterList())\r\n            toggleOpenAddModal()\r\n        }).catch(error => {\r\n            setProcess(false)\r\n            console.log(error)\r\n            setModalMessage(error.message||\"error\")\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function handleEditClusterProcess() {\r\n        resetError()\r\n        if(!requireValidation()) {\r\n            return false\r\n        }\r\n        const tmp = dictionaryRemoteClusterId === \"\" || dictionaryRemoteClusterId === \" \" ? null : dictionaryRemoteClusterId\r\n        dispatch(editCluster(selectedClusterId, {\r\n            name, host, port, scheme,\r\n            username, password,\r\n            kibana, theme,\r\n            dictionaryRemoteClusterId: tmp\r\n        })).then(cluster => {\r\n            dispatch(setClusterList())\r\n            toggleOpenEditModal()\r\n        }).catch(error => {\r\n            console.log(error)\r\n            setModalMessage(error.message||\"error\")\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function toggleOpenEditModal(cluster) {\r\n        setMode(\"EDIT\")\r\n\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false); setConnTest(false)\r\n        if (!openEditModal) {\r\n            // opening..\r\n            if (cluster['cluster']['dictionaryRemoteClusterId'] !== undefined && cluster['cluster']['dictionaryRemoteClusterId'] !== null) {\r\n                setDictionaryRemoteClusterId(cluster['cluster']['dictionaryRemoteClusterId'])\r\n            } else {\r\n                setDictionaryRemoteClusterId(\" \")\r\n            }\r\n            setSelectedClusterId(cluster['cluster']['id'])\r\n            setName(cluster['cluster']['name']);\r\n            setScheme(cluster['cluster']['scheme']);\r\n            setHost(cluster['cluster']['host']);\r\n            setPort(cluster['cluster']['port']);\r\n            setUsername(cluster['cluster']['username'] || \"\");\r\n            setPassword(cluster['cluster']['password'] || \"\");\r\n            setKibana(cluster['cluster']['kibana'] || \"\");\r\n            setTheme(cluster['cluster']['theme']);\r\n        } else {\r\n            setDictionaryRemoteClusterId(\"\")\r\n            setName(\"\"); setScheme(\"http\"); setHost(\"\"); setPort(\"\");\r\n            setUsername(\"\"); setPassword(\"\"); setKibana(\"\");\r\n            setTheme(0);\r\n        }\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n\r\n    function toggleOpenRemoveModal(id) {\r\n        setSelectedClusterId(id)\r\n        setRemoveData(false)\r\n        setOpenRemoveModal(true)\r\n    }\r\n\r\n    function removeClusterProcess() {\r\n        dispatch(removeClusterAction(selectedClusterId, isRemoveData)).then(cluster => {\r\n            dispatch(setClusterList())\r\n            setSelectedClusterId(\"\")\r\n            setOpenRemoveModal(false)\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n    function goDashboard(id) {\r\n        // const link = document.createElement('a');\r\n        // link.setAttribute(\"href\", `${id}/dashboard`)\r\n        // link.setAttribute(\"target\", \"_blank\")\r\n        // document.body.appendChild(link);\r\n        // link.click()\r\n        window.open(`${id}/dashboard`,\"_blank\" )\r\n    }\r\n\r\n    function goNewDashboard(event, id) {\r\n        event.stopPropagation()\r\n        let width = window.outerWidth\r\n        let height = window.outerHeight\r\n\r\n        width = Math.ceil(width / 2) <= 1500 ? 1500 : Math.ceil(width / 2)\r\n        height = (Math.ceil(height / 2) <= 900 ? 900 : Math.ceil(height / 2))\r\n\r\n        window.open(`${id}/dashboard`,id,`location=no,directories=no,resizable=no,status=no,toolbar=no,menubar=no,left=${window.outerWidth / 5},top=50,scrollbars=yes,width=${width},height=${height}`)\r\n    }\r\n\r\n    const isManager = authUser['role']['manage']\r\n\r\n\r\n    const dictionaryRemoteClusterList = clusterList.map(cluster => cluster['cluster']||{}).filter(cluster => cluster['id'] !== selectedClusterId)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <Helmet title=\"클러스터\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                클러스터\r\n            </Typography>\r\n            <Divider my={6}/>\r\n\r\n            <Grid container spacing={6}>\r\n\r\n                {clusterList.map(cluster => <ClusterCard key={cluster['cluster']['id']}\r\n                                                         clusterList={clusterList||[]}\r\n                                                         cluster={cluster}\r\n                                                         classes={classes}\r\n                                                         onEditClick={() => toggleOpenEditModal(cluster)}\r\n                                                         onRemoveClick={() => toggleOpenRemoveModal(cluster['cluster']['id'])}\r\n                                                         to={() => goDashboard(cluster['cluster']['id'])}\r\n                                                         newTo={event => goNewDashboard(event, cluster['cluster']['id'])}\r\n                                                         showMenu={isManager}\r\n                />)}\r\n\r\n                <AddClusterCard key={\"add\"}\r\n                                className={classes}\r\n                                handleClick={toggleOpenAddModal}\r\n                                showButton={isManager}\r\n                />\r\n\r\n                <AddGuideCard key={\"guide\"}\r\n                              className={classes}\r\n                />\r\n\r\n            </Grid>\r\n\r\n\r\n            {/*        추가         */}\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={openEditModal}\r\n                onClose={toggleOpenAddModal}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>\r\n                    클러스터 {mode === \"ADD\" ? \"추가\" : \"수정\"}\r\n                </DialogTitle>\r\n                <DialogContent aria-setsize={500}>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>이름</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <TextField placeholder={\"운영 클러스터\"}\r\n                                       value={name}\r\n                                       error={nameError}\r\n                                       onChange={event => {\r\n                                           setNameError(false);\r\n                                           setName(event.target.value);\r\n                                       }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider my={3} />\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>접속정보</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box>\r\n                                <Select value={scheme}\r\n                                        onChange={event => setScheme(event.target.value)}\r\n                                        fullWidth\r\n                                >\r\n                                    <MenuList variant={\"menu\"} value={\"http\"}>HTTP</MenuList>\r\n                                    <MenuList variant={\"menu\"} value={\"https\"}>HTTPS</MenuList>\r\n                                </Select>\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                <TextField placeholder=\"127.0.0.1\"\r\n                                           fullWidth\r\n                                           value={host}\r\n                                           error={hostError}\r\n                                           onChange={event => {\r\n                                               setHostError(false);\r\n                                               setHost(event.target.value);\r\n                                           }}\r\n                                />\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                <TextField placeholder=\"9200\"\r\n                                           fullWidth\r\n                                           type=\"number\"\r\n                                           value={port}\r\n                                           error={portError}\r\n                                           onChange={event => {\r\n                                               setPortError(false)\r\n                                               setPort(event.target.value)\r\n                                           }}\r\n                                />\r\n                            </Box>\r\n                            <Box>\r\n                                <Box mt={2}>\r\n                                    <TextField placeholder=\"elastic\"\r\n                                               fullWidth\r\n                                               error={usernameError}\r\n                                               value={username}\r\n                                               onChange={event => {\r\n                                                   setUsernameError(false)\r\n                                                   setUsername(event.target.value)\r\n                                               }}\r\n                                    />\r\n                                </Box>\r\n                                <Box mt={2}>\r\n                                    <TextField type=\"password\"\r\n                                               placeholder=\"********\"\r\n                                               fullWidth\r\n                                               error={passwordError}\r\n                                               value={password}\r\n                                               onChange={event => {\r\n                                                   setPasswordError(false)\r\n                                                   setPassword(event.target.value)\r\n                                               }}\r\n\r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container mt={3}>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={3}>키바나</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box>\r\n                                <FormControl fullWidth className={classes.margin}>\r\n                                    <Input placeholder=\"http://kibana:5601\"\r\n                                           value={kibana}\r\n                                           onChange={event => setKibana(event.target.value)}\r\n                                           endAdornment={\r\n                                               <InputAdornment position=\"end\">\r\n                                                   <Button color=\"primary\"\r\n                                                           size={\"small\"}\r\n                                                           style={{marginBottom: \"10px\"}}\r\n                                                           onClick={handleKibanaTestProcess}\r\n                                                           disabled={kibana.length === 0 || isProcess}\r\n                                                   > 확인 </Button>\r\n                                               </InputAdornment>\r\n                                           }\r\n                                    />\r\n                                </FormControl>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider my={3} />\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={3}>색상</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box mt={2}>\r\n                                <Select value={theme}\r\n                                        onChange={event => setTheme(event.target.value)}\r\n                                        style={{width: \"100%\"}}\r\n                                >\r\n                                    <MenuList value={0} style={{width: \"100%\", backgroundColor: \"rgb(27, 36, 48)\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(27, 36, 48)\", color: \"white\"}}> Dark </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={1} style={{width: \"100%\", backgroundColor: \"rgb(255, 255, 255)\", color: \"black\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(255, 255, 255)\", color: \"black\"}}> Light </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={2} style={{width: \"100%\", backgroundColor: \"rgb(25, 118, 210)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(25, 118, 210)\", color: \"white\"}}> Blue </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={3} style={{width: \"100%\", backgroundColor: \"rgb(56, 142, 60)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(56, 142, 60)\", color: \"white\"}}> Green </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={4} style={{width: \"100%\", backgroundColor: \"rgb(57, 73, 171)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(57, 73, 171)\", color: \"white\"}}> Indigo </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={5} style={{width: \"100%\", backgroundColor: \"rgb(0, 121, 107)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(0, 121, 107)\", color: \"white\"}}> Teal </Box>\r\n                                    </MenuList>\r\n                                </Select>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={3}>사전소스 클러스터</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box mt={2}>\r\n                                <Select style={{width: \"100%\"}} value={dictionaryRemoteClusterId} onChange={e => setDictionaryRemoteClusterId(e.target.value)}>\r\n                                    <MenuList key={'empty'} value={\" \"} style={{width: \"100%\"}}> 선택안함 </MenuList>\r\n                                    {\r\n                                        (dictionaryRemoteClusterList||[]).map((c, i) => (\r\n                                            <MenuList key={i} value={c['id']} style={{width: \"100%\"}}> {c['name']} </MenuList>\r\n                                        ))\r\n                                    }\r\n\r\n                                </Select>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <br/>\r\n                    <Box display={modalMessage === \"\" ? \"none\" : \"block\"}>\r\n                        {modalMessage}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={handleClusterTestProcess}\r\n                            disabled={host.length === 0 || port.length === 0 || isProcess}\r\n                    > 연결테스트 </Button>\r\n                    <Box display={mode === \"ADD\" ? \"block\" : \"none\"}>\r\n                        <Button color=\"primary\"\r\n                                variant=\"contained\"\r\n                                disabled={!connTest || isProcess}\r\n                                onClick={handleAddClusterProcess}\r\n                        >\r\n                            추가\r\n                        </Button>\r\n                    </Box>\r\n                    <Box display={mode === \"EDIT\" ? \"block\" : \"none\"}>\r\n                        <Button color=\"primary\"\r\n                                variant=\"contained\"\r\n                                disabled={!connTest}\r\n                                onClick={handleEditClusterProcess}\r\n                        >\r\n                            저장\r\n                        </Button>\r\n                    </Box>\r\n                    <Button onClick={toggleOpenAddModal}\r\n                            variant=\"contained\"\r\n                            disabled={isProcess}\r\n                    >\r\n                        취소\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            {/*    삭제     */}\r\n\r\n            <Dialog open={openRemoveModal} fullWidth={true} onClose={() => setOpenRemoveModal(!openRemoveModal)}>\r\n                <DialogTitle>클러스터 삭제</DialogTitle>\r\n             <DialogContent>\r\n                 <Box style={{fontSize: \"1.2em\"}}>\r\n                     <Box component={\"span\"} style={{fontWeight: \"bold\"}}>\r\n                         {\r\n                             (((clusterList||[]).find(c => c[\"cluster\"]['id'] === selectedClusterId||'')||{})['cluster']||{})['name']||''\r\n                         }\r\n                     </Box>\r\n                     &nbsp; 클러스터 삭제 하시겠습니까?\r\n                 </Box>\r\n             </DialogContent>\r\n                <DialogActions>\r\n                    <Grid container>\r\n                        <Grid item xs={8} md={9}>\r\n                            <Box style={{marginLeft: \"3px\"}} pl={3}>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={isRemoveData} onChange={() => setRemoveData(!isRemoveData)} />}\r\n                                    label={\"컬렉션 설정과 색인히스토리, 메타데이터까지 포함하여 삭제\"}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={4} md={3}>\r\n                            <Box style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n                                <Button style={{marginRight: \"2px\"}}\r\n                                        variant=\"contained\"\r\n                                        color={\"secondary\"}\r\n                                        onClick={removeClusterProcess}\r\n                                >\r\n                                    삭제\r\n                                </Button>\r\n                                <Button style={{marginLeft: \"2px\"}}\r\n                                        onClick={() => setOpenRemoveModal(false)}\r\n                                        variant=\"contained\"\r\n                                >\r\n                                    취소\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ ...store.clusterReducers, ...store.dsearchReducers }))(Cluster);\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/analysis/dictionary/Settings.js","pages/analysis/dictionary/index.js","components/AntTabs/index.js","redux/actions/dictionaryActions.js"],"names":["useStyles","styled","MuiDivider","spacing","makeStyles","theme","formControl","minWidth","root","flexGrow","width","edit","link","cursor","fab","margin","absolute","position","bottom","right","connect","store","authUser","dsearchReducers","settings","dictionaryReducers","active","dispatch","classes","fullScreen","useMediaQuery","useTheme","breakpoints","down","React","useState","openEditDictModal","setOpenEditDictModal","selectedSetting","setSelectedSetting","openRemoveDictModal","setOpenRemoveDictModal","id","name","type","tokenType","ignoreCase","column_id","column_keyword","column_value","newDictSetting","setNewDictSetting","errorNewDictSetting","setErrorNewDictSetting","useEffect","setSettings","title","Box","align","role","index","Link","className","onClick","color","TableContainer","component","Paper","Table","table","TableHead","TableRow","TableCell","TableBody","length","colSpan","map","setting","key","filter","c","join","Button","size","variant","style","red","handleOpenRemoveSettingModal","Dialog","open","fullWidth","onClose","DialogTitle","DialogContent","my","Grid","container","item","xs","alignItems","justifyContent","display","TextField","autoFocus","placeholder","value","onChange","e","target","error","helperText","FormControl","select","Select","MenuItem","disabled","backgroundColor","includes","DialogActions","mx","marginRight","tmpError","trim","test","String","Object","keys","console","log","setAddDictionarySetting","columns_id","columns_keyword","columns_value","then","body","setTimeout","marginLeft","removeDictionarySetting","Divider","firstTabs","icon","Async","time","label","openSettings","setOpenSettings","dictTabs","concat","dictionary","Typography","gutterBottom","AntTabs","tabs","tabIndex","setActiveSettingIndex","MuiBox","Tab","withStyles","textTransform","fontWeight","typography","fontWeightRegular","opacity","fontWeightMedium","selected","props","disableRipple","state","setState","event","indicatorColor","textColor","scrollButtons","tab","hidden","aria-labelledby","client","Client","activeIndex","types","payload","call","uri","response","data","catch","setDictionary","pageNum","rowSize","isMatch","searchColumns","params","downloadDictionary","responseType","document","createElement","href","window","URL","createObjectURL","Blob","headers","setAttribute","appendChild","click","deleteDictionary","method","createDictionary","updateDictionary","searchDictionaries","setSummary","applyDictionary","columns"],"mappings":"6dA+BMA,GAFUC,YAAOC,IAAPD,CAAmBE,KAEjBC,aAAW,SAACC,GAAD,MAAY,CACrCC,YAAa,CACTC,SAAU,KAEdC,KAAM,CACFC,SAAU,EACVC,MAAO,QAEXC,KAAM,CACFD,MAAO,QAEXE,KAAM,CACFC,OAAQ,WAEZC,IAAK,CACDC,OAAQV,EAAMF,QAAQ,IAE1Ba,SAAU,CACNC,SAAU,WACVC,OAAQb,EAAMF,QAAQ,GACtBgB,MAAOd,EAAMF,QAAQ,SA2adiB,mBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,SAChCE,SAAUH,EAAMI,mBAAmBD,SACnCE,OAAQL,EAAMI,mBAAmBC,UAHtBN,EAraf,YAAmD,IAAhCO,EAA+B,EAA/BA,SAAUL,EAAqB,EAArBA,SAAUE,EAAW,EAAXA,SAC7BI,EAAU5B,IACV6B,EAAaC,YAAcC,cAAWC,YAAYC,KAAK,OAFf,EAGIC,IAAMC,UAAS,GAHnB,mBAGvCC,EAHuC,KAGpBC,EAHoB,OAKAH,IAAMC,SAAS,IALf,mBAKvCG,EALuC,KAKtBC,EALsB,OAMQL,IAAMC,UAAS,GANvB,mBAMvCK,EANuC,KAMlBC,EANkB,OAOFP,IAAMC,SAAS,CACvDO,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,UAAW,GACXC,eAAgB,GAChBC,aAAc,KAf4B,mBAOvCC,EAPuC,KAOvBC,EAPuB,OAiBQjB,IAAMC,SAAS,IAjBvB,mBAiBvCiB,EAjBuC,KAiBlBC,GAjBkB,KA0G9C,OAvFAC,qBAAU,WACN3B,EAAS4B,iBACV,IAsFC,oCACI,kBAAC,IAAD,CAAQC,MAAM,8BAEd,kBAACC,EAAA,EAAD,CAAKC,MAAO,SACPpC,EAASqC,KAAKC,MAAQ,kBAACC,EAAA,EAAD,CAAMC,UAAWlC,EAAQhB,KACnBmD,QAzFzC,WACIZ,EAAkB,CACdT,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,UAAW,GACXC,eAAgB,GAChBC,aAAc,KAElBZ,GAAqB,IA+EgB2B,MAAO,WAFb,6BAKb,sCAGd,6BAEA,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAON,UAAWlC,EAAQyC,OACtB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWd,MAAO,UAAlB,sBACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,gBACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,gBACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,yCACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,4BACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,oCACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,oCACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,wBACA,kBAACc,EAAA,EAAD,CAAWd,MAAO,UAAlB,kBAGR,kBAACe,EAAA,EAAD,KAE4B,IAApBjD,EAASkD,OACL,kBAACH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWG,QAAS,GAAIjB,MAAO,UAA/B,oEAKJlC,EAASoD,KAAI,SAACC,EAASjB,GACnB,OACI,kBAACW,EAAA,EAAD,CAAUO,IAAKlB,GACX,kBAACY,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,KAEjB,kBAACL,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,OAEjB,kBAACL,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,OAEjB,kBAACL,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,WAAiB,OAAS,UAE3C,kBAACL,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,YAEjB,kBAACL,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,QAAYE,QAAO,SAAAC,GAAC,MAAkB,OAAdA,EAAC,QAAmBJ,KAAI,SAAAI,GAAC,OAAIA,EAAC,SAAWC,KAAK,MAEvF,kBAACT,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,QAAYE,QAAO,SAAAC,GAAC,MAAkB,YAAdA,EAAC,QAAwBJ,KAAI,SAAAI,GAAC,OAAIA,EAAC,SAAWC,KAAK,MAE5F,kBAACT,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACD,EAAA,EAAD,KAAMoB,EAAO,QAAYE,QAAO,SAAAC,GAAC,MAAkB,UAAdA,EAAC,QAAsBJ,KAAI,SAAAI,GAAC,OAAIA,EAAC,SAAWC,KAAK,MAE1F,kBAACT,EAAA,EAAD,CAAWd,MAAO,UACd,kBAACwB,EAAA,EAAD,CAAQC,KAAM,QACNC,QAAS,WACTC,MAAO,CAACrB,MAAOsB,IAAI,MACnBvB,QAAS,kBA3I7D,SAAsCc,GAClCtC,EAAmBsC,GACnBpC,GAAuB,GAyIwC8C,CAA6BV,KAHpD,wBAepC,kBAACW,EAAA,EAAD,CAAQC,KAAMrD,EACNsD,WAAS,EACT7D,WAAYA,EACZ8D,QAAS,kBAAMtD,GAAqB,KAExC,kBAACuD,EAAA,EAAD,kCAGA,kBAACC,EAAA,EAAD,KACI,kBAACpC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,sBAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACI,EAAA,EAAD,CAAWZ,WAAW,EACXa,WAAW,EACXC,YAAa,UACbC,MAAOvD,EAAc,GACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBR,GAAIiE,EAAEC,OAAOH,UAClEI,MAAOzD,EAAmB,GAC1B0D,WAAY1D,EAAmB,IAAQ,QAK9D,kBAACK,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,gBAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACI,EAAA,EAAD,CAAWZ,WAAW,EACXc,YAAa,kCACbC,MAAOvD,EAAc,KACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBP,KAAMgE,EAAEC,OAAOH,UACpEI,MAAOzD,EAAmB,KAC1B0D,WAAY1D,EAAmB,MAAU,QAKhE,kBAACK,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,gBAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAajD,UAAWlC,EAAQoF,OAAQtB,WAAW,GAC/C,kBAACuB,EAAA,EAAD,CAAQT,YAAa,UACbC,MAAOvD,EAAc,KACrBwD,SAAU,SAAAC,GACNxD,EAAkB,2BACXD,GADU,IAEbH,UAAW,GACXC,eAAgB,GAChBC,aAAc,GACdL,KAAM+D,EAAEC,OAAOH,UAGvBI,MAAOzD,EAAmB,MAE9B,kBAAC8D,EAAA,EAAD,CAAUT,MAAO,GAAIU,UAAU,GAA/B,mCACA,kBAACD,EAAA,EAAD,CAAUT,MAAO,OAAjB,OACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,WAAjB,WACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,SAAjB,SACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,YAAjB,YACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,gBAAjB,gBACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,UAAjB,eAMpB,kBAAChD,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,6BAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAajD,UAAWlC,EAAQoF,OAAQtB,WAAW,GAC/C,kBAACuB,EAAA,EAAD,CAAQT,YAAa,MACbC,MAAOvD,EAAc,UACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBL,UAAW8D,EAAEC,OAAOH,UACzEI,MAAOzD,EAAmB,WAE9B,kBAAC8D,EAAA,EAAD,CAAUT,MAAO,GAAIU,UAAU,GAA/B,mCACA,kBAACD,EAAA,EAAD,CAAUT,MAAO,OAAjB,OACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,OAAjB,OACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,OAAjB,OACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,QAAjB,QACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,QAAjB,aAMpB,kBAAChD,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,0CAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACa,EAAA,EAAD,CAAajD,UAAWlC,EAAQoF,OAAQtB,WAAW,GAC/C,kBAACuB,EAAA,EAAD,CAAQR,MAAOvD,EAAc,WACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBJ,WAAY6D,EAAEC,OAAOH,UAC1EI,MAAOzD,EAAmB,YAE9B,kBAAC8D,EAAA,EAAD,CAAUT,MAAO,GAAIU,UAAU,GAA/B,mCACA,kBAACD,EAAA,EAAD,CAAUT,MAAO,QAAjB,QACA,kBAACS,EAAA,EAAD,CAAUT,MAAO,SAAjB,cAOpB,kBAAChD,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,gBAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACzC,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,sBAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACI,EAAA,EAAD,CAAWZ,WAAW,EACXe,MAAOvD,EAAc,UACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBH,UAAW4D,EAAEC,OAAOH,UACzED,YAAa,GACbnB,MAAO,CAAC+B,gBAAkB,CAAC,UAAUC,SAASnE,EAAc,MAAwB,KAAZ,WACxEiE,UAAY,CAAC,UAAUE,SAASnE,EAAc,MAC9C2D,MAAOzD,EAAmB,WAC1B0D,WAAY1D,EAAmB,WAAe,QAMrE,kBAACK,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,sBAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACI,EAAA,EAAD,CAAWZ,WAAW,EACXc,YAAa,GACbC,MAAOvD,EAAc,eACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBF,eAAgB2D,EAAEC,OAAOH,UAC9EpB,MAAO,CAAC+B,gBAAkB,CAAC,MAAO,UAAW,QAAS,WAAY,UAAUC,SAASnE,EAAc,MAAwB,KAAZ,WAC/GiE,UAAY,CAAC,MAAO,UAAW,QAAS,WAAY,UAAUE,SAASnE,EAAc,MACrF2D,MAAOzD,EAAmB,eAC1B0D,WAAY1D,EAAmB,gBAAoB,QAM1E,kBAACK,EAAA,EAAD,CAAKqC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGb,MAAO,CAACc,WAAY,SAAUC,eAAgB,SAAUC,QAAS,SAAnF,UAGA,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACI,EAAA,EAAD,CAAWZ,WAAW,EACXc,YAAa,GACbC,MAAOvD,EAAc,aACrBwD,SAAU,SAAAC,GAAC,OAAIxD,EAAkB,2BAAID,GAAL,IAAqBD,aAAc0D,EAAEC,OAAOH,UAC5EpB,MAAO,CAAC+B,gBAAkB,CAAC,UAAW,WAAY,eAAgB,UAAUC,SAASnE,EAAc,MAAwB,KAAZ,WAC/GiE,UAAY,CAAC,UAAW,WAAY,eAAgB,UAAUE,SAASnE,EAAc,MACrF2D,MAAOzD,EAAmB,aAC1B0D,WAAY1D,EAAmB,cAAkB,cAchG,kBAACkE,EAAA,EAAD,KACI,kBAAC7D,EAAA,EAAD,CAAK8D,GAAI,GACL,kBAACrC,EAAA,EAAD,CAAQE,QAAQ,YACRpB,MAAO,UACPqB,MAAO,CAACmC,YAAa,OACrBzD,QArV5B,WACI,IAAI0D,EAAW,GAiBf,IAfoC,KAAhCvE,EAAc,GAAOwE,QAAiB,gBAAgBC,KAAKzE,EAAc,GAAOwE,WAChFD,EAAQ,GAAS,4HAEiB,KAAlCvE,EAAc,KAASwE,SACvBD,EAAQ,KAAW,sDAEQ,KAA3BvE,EAAc,OACduE,EAAQ,KAAW,sDAEa,KAAhCvE,EAAc,YACduE,EAAQ,UAAgB,kEAES,KAAjCvE,EAAc,aACduE,EAAQ,WAAiB,gFAEzBvE,EAAc,KAAU,CACxB,IAAIN,EAAOM,EAAc,KACrB,CAAC,UAAUmE,SAASzE,IAA4D,KAAnDgF,OAAO1E,EAAc,WAAe,IAAIwE,SAErED,EAAQ,UAAgB,yEAExB,CAAC,MAAO,UAAW,QAAS,WAAY,UAAUJ,SAASzE,IAAiE,KAAxDgF,OAAO1E,EAAc,gBAAoB,IAAIwE,SAEjHD,EAAQ,eAAqB,+EAE7B,CAAC,UAAW,WAAY,eAAgB,UAAUJ,SAASzE,IAA+D,KAAtDgF,OAAO1E,EAAc,cAAkB,IAAIwE,SAE/GD,EAAQ,aAAmB,mEAInC,GAAII,OAAOC,KAAKL,GAAU/C,OAAS,EAG/B,OAFAqD,QAAQC,IAAIP,QACZpE,GAAuBoE,GAI3B9F,EAASsG,YAAwB,CAC7BvF,GAAIQ,EAAc,GAAQP,KAAMO,EAAc,KAAUJ,WAAYI,EAAc,WAClFN,KAAMM,EAAc,KAAUL,UAAWK,EAAc,UACvDgF,WAAYhF,EAAc,UAC1BiF,gBAAiBjF,EAAc,eAC/BkF,cAAelF,EAAc,gBAC7BmF,MAAK,SAAAC,GACLC,YAAW,WACP5G,EAAS4B,eACTlB,GAAqB,KACtB,UAgSS,gBAKA,kBAAC6C,EAAA,EAAD,CAAQE,QAAS,WACTrB,QAAS,kBAAM1B,GAAqB,IACpCgD,MAAO,CAACmD,WAAY,QAF5B,mBAWZ,kBAAChD,EAAA,EAAD,CAAQC,KAAMjD,EACNkD,WAAS,EACT7D,WAAYA,EACZ8D,QAAS,kBAAMlD,GAAuB,KAE1C,kBAACmD,EAAA,EAAD,kCAGA,kBAACC,EAAA,EAAD,KACKvD,EAAe,MAAU,GAD9B,yEAGA,kBAACgF,EAAA,EAAD,KACI,kBAACpC,EAAA,EAAD,CAAQE,QAAQ,YACRpB,MAAO,UACPD,QA1TxB,WACIpC,EAAS8G,YAAwBnG,EAAe,aAC3C+F,MAAK,SAAAC,GACNC,YAAW,WACP5G,EAAS4B,eACTd,GAAuB,KACxB,UAkTK,gBAIA,kBAACyC,EAAA,EAAD,CAAQE,QAAS,WACTrB,QAAS,kBAAMtB,GAAuB,KAD9C,sBCncdiG,EAAUzI,YAAOC,IAAPD,CAAmBE,KAE7BwI,EAAY,CACd,CAACC,KAAO,kBAAC,IAAD,MAAgB1E,UAAW2E,aAAM,kBAAM,kCAAoB,CAAEC,KAAM,KAC3E,CAACC,MAAO,eAAM7E,UAAW2E,aAAM,kBAAM,qCAuD1BzH,uBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,SAChCE,SAAUH,EAAMI,mBAAmBD,SACnCE,OAAQL,EAAMI,mBAAmBC,UAHtBN,EApDf,YAA6D,IAAxCO,EAAuC,EAAvCA,SAAUL,EAA6B,EAA7BA,SAAUE,EAAmB,EAAnBA,SAAUE,EAAS,EAATA,OAAS,EAChBQ,IAAMC,UAAS,GADC,mBACjD6G,EADiD,KACnCC,EADmC,KAEpDC,EAAWP,EAAUQ,OAAO3H,EAASoD,KAAI,SAAAwE,GAAU,MAAK,CAACL,MAAOK,EAAWzG,KAAMuB,UAAW2E,aAAM,kBAAO,wCAU7G,OARAvF,qBAAU,WACN3B,EAAS4B,iBACV,IAOC,oCACI,kBAAC,IAAD,CAAQC,MAAM,iBAEd,kBAACuC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACmD,EAAA,EAAD,CAAYjE,QAAQ,KAAKkE,cAAY,EAACjD,QAAQ,UAA9C,gBACQ2C,EAAe,eAAO,KAGlC,kBAACjD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACzC,EAAA,EAAD,CAAKC,MAAO,SACR,kBAACwB,EAAA,EAAD,CAAQlB,MAAO,UAAWoB,QAAS,WAAYrB,QAAS,kBAAMkF,GAAiBD,KAEvEA,EACI,eAEA,mBAOxB,kBAAC,EAAD,CAASlD,GAAI,IAGTkD,EACI,kBAAC,EAAD,MAEA,kBAACjD,EAAA,EAAD,CAAMC,WAAS,EAAC7F,QAAS,GACrB,kBAAC4F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACqD,EAAA,EAAD,CAASjI,SAAUA,EAAUkI,KAAMN,EAAUO,SAAU/H,EAAQgF,SApCvF,SAAyB9C,GACrBjC,EAAS+H,YAAsB9F,EAAQ+E,EAAUjE,mB,oICxBnDgE,EAAUzI,YAAOC,IAAPD,CAAmBE,KAC7BsD,EAAMxD,YAAO0J,IAAP1J,CAAeE,KAarByJ,EAAMC,aAAW,SAACxJ,GAAD,MAAY,CAC/BG,KAAM,CACFsJ,cAAe,OACfvJ,SAAU,GACVwJ,WAAY1J,EAAM2J,WAAWC,kBAC7BzC,YAAanH,EAAMF,QAAQ,GAC3B,UAAW,CACP6D,MAAO,UACPkG,QAAS,GAEb,aAAc,CACVlG,MAAO,UACP+F,WAAY1J,EAAM2J,WAAWG,kBAEjC,UAAW,CACPnG,MAAO,YAGfoG,SAAU,MACV,CAACxG,MAAO,GAnBAiG,EAmBI,SAACQ,GAAD,OAAW,kBAAC,IAAD,eAAQC,eAAa,GAAKD,OAmEtCd,IAtCf,YAAkD,IAAhCC,EAA+B,EAA/BA,KAA+B,IAAzBC,gBAAyB,MAAd,EAAc,EAAX/C,EAAW,EAAXA,SAAW,EACnBxE,IAAMC,SAAS,CAACsH,SAAUA,IADP,mBACtCc,EADsC,KAC/BC,EAD+B,KAW7C,OACI,oCACI,kBAAC,IAAD,CAAM/D,MAAO8D,EAAMd,SACb/C,SAZO,SAAC+D,EAAOhB,GACzBe,EAAS,CACLf,SAAUA,IAEU,oBAAb/C,GACPA,EAAS+C,IAQHiB,eAAe,UACfC,UAAU,UACVvF,QAAQ,aACRwF,cAAc,QAEfpB,EAAK5E,KAAI,SAACiG,EAAKjH,GAAN,OAAgB,kBAACgG,EAAD,CAAK9E,IAAKlB,EAAOlB,GAAIkB,EAAOgF,KAAMiC,EAAIjC,KAAMG,MAAO8B,EAAI9B,OAAS,SAE9F,kBAACL,EAAD,MACCc,EAAK5E,KAAI,SAACgF,EAAKhG,GACZ,OACI,kBAACH,EAAD,CAAKqB,IAAKlB,EACJD,KAAK,WACLmH,OAAQP,EAAMd,WAAa7F,EAC3BlB,GAAE,mCAA8BkB,GAChCmH,kBAAA,8BAAwCnH,IACzCA,IAAU2G,EAAMd,UAAYG,EAAI1F,WAAa,kBAACT,EAAD,SAAM,kBAACmG,EAAI1F,UAAL,CAAesF,KAAMI,IAA3B,Y,iCCtGtE,2aAGMoB,EAAS,IAAIC,IAENvB,EAAwB,SAACwB,GAAD,OAAiB,SAAAvJ,GAAQ,OAAIA,EAAS,CAACiB,KAAMuI,IAAgCC,QAASF,MAE9G3H,EAAc,kBAAM,SAAA5B,GAAQ,OACrCqJ,EAAOK,KAAK,CACRC,IAAI,2BAEHjD,MAAK,SAAAkD,GAAQ,OAAI5J,EAAS,CAACiB,KAAMuI,KAAgCC,QAASG,EAASC,UACnFC,OAAM,SAAA5E,GAAK,OAAIkB,QAAQlB,MAAMA,QAEzB6E,EAAgB,SAACtC,EAAYuC,EAASC,EAASC,EAASpF,EAAOqF,GAA/C,OAAiE,SAAAnK,GAAQ,OAClGqJ,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBlC,GACtB2C,OAAQ,CAACJ,UAASC,UAASC,UAASpF,QAAOqF,mBAE1CzD,MAAK,SAAAkD,GAAQ,OAAI5J,EAAS,CAACiB,KAAMuI,IAA8B/B,WAAYA,EAAYgC,QAASG,EAASC,UACzGC,OAAM,SAAA5E,GAAK,OAAIkB,QAAQlB,MAAMA,QAEzBmF,EAAqB,SAAC5C,GAAD,OAC9B4B,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBlC,EAAnB,aACH6C,aAAc,SAEb5D,MAAK,SAAAkD,GACF,IAAM3K,EAAOsL,SAASC,cAAc,KACpCvL,EAAKwL,KAAOC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACjB,EAASC,MAAO,CAC7D5I,KAAM2I,EAASkB,QAAQ,mBAE3B7L,EAAK8L,aAAa,WAAlB,UAAiCtD,EAAjC,SACA8C,SAAS5D,KAAKqE,YAAY/L,GAC1BA,EAAKgM,YAGJC,EAAmB,SAACzD,EAAY1G,GAAb,OAC5BsI,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBlC,EAAnB,YAAiC1G,GACpCoK,OAAQ,YAGHC,EAAmB,SAAC3D,EAAYoC,GAAb,OAC5BR,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBlC,GACtB0D,OAAQ,OACRtB,KAAMA,IAELnD,MAAK,SAAAkD,GACFxD,QAAQC,IAAIuD,MAEfE,OAAM,SAAA5E,GAAK,OAAIkB,QAAQlB,MAAMA,OAEzBmG,EAAmB,SAAC5D,EAAY1G,EAAI8I,GAAjB,OAC5BR,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBlC,EAAnB,YAAiC1G,GACpCoK,OAAQ,MACRtB,KAAMA,IAELnD,MAAK,SAAAkD,GACFxD,QAAQC,IAAIuD,MAEfE,OAAM,SAAA5E,GAAK,OAAIkB,QAAQlB,MAAMA,OAGzBoG,EAAqB,SAACzB,GAAD,OAAU,SAAA7J,GAAQ,OAAIqJ,EAAOK,KAAK,CAChEC,IAAK,0BACLwB,OAAQ,OACRtB,KAAMA,IACPnD,MAAK,SAAAkD,GAAQ,OAAI5J,EAAS,CAACiB,KAAMuI,IAAmCC,QAASG,EAASC,YAE5E0B,EAAa,kBAAM,SAAAvL,GAAQ,OAAIqJ,EAAOK,KAAK,CACpDC,IAAK,0BACNjD,MAAK,SAAAkD,GAAQ,OAAI5J,EAAS,CAACiB,KAAMuI,KAAoBC,QAASG,EAASC,YAG7D2B,EAAkB,SAAC3B,GAAD,OAAU,SAAA7J,GAAQ,OAAIqJ,EAAOK,KAAK,CAC7DC,IAAK,6BACLwB,OAAQ,OACRtB,KAAMA,IACPnD,MAAK,SAAAkD,GAAQ,OAAI5J,EAAS,CAACiB,KAAMuI,IAAsBC,QAASG,EAASC,YAE/DvD,EAA0B,SAAC,GAAD,IAAEvF,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,WAAYoF,EAAzC,EAAyCA,WAAYC,EAArD,EAAqDA,gBAAiBC,EAAtE,EAAsEA,cAAtE,OAAyF,SAAAzG,GAAQ,OAAIqJ,EAAOK,KAAK,CACpJC,IAAK,yBACLwB,OAAQ,OACRtB,KAAM,CACF9I,KAAIC,OAAMC,OAAMC,YAAWC,aAC3BsK,QAAS,CACLlF,EAAWxD,OAAS,EAAI,CAChB9B,KAAM,KACNmG,MAAOb,GAGX,KACJC,EAAgBzD,OAAS,EAAI,CACrB9B,KAAM,UACNmG,MAAOZ,GAGX,KACJC,EAAc1D,OAAS,EAAI,CACnB9B,KAAM,QACNmG,MAAOX,GAGX,SAGbC,MAAK,SAAAkD,GAAQ,OAAIA,EAASC,UAEhB/C,EAA0B,SAAA/F,GAAE,OAAI,SAAAf,GAAQ,OAAIqJ,EAAOK,KAAK,CACjEC,IAAK,0BAA4B5I,EACjCoK,OAAQ,WACTzE,MAAK,SAAAkD,GAAQ,OAAIA,EAASC","file":"static/js/50.a13cc7a2.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {\r\n    Divider as MuiDivider,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    Box,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Dialog,\r\n    Paper,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableContainer,\r\n    TableCell,\r\n    TableBody, TextField, Select, MenuItem, FormControl, IconButton, Link,\r\n} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {setSettings, setAddDictionarySetting, removeDictionarySetting} from \"../../../redux/actions/dictionaryActions\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {red} from \"@material-ui/core/colors\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    link: {\r\n        cursor: \"pointer\"\r\n    },\r\n    fab: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    absolute: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(3),\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction Settings({dispatch, authUser, settings}) {\r\n    const classes = useStyles();\r\n    const fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    const [openEditDictModal, setOpenEditDictModal] = React.useState(false)\r\n\r\n    const [selectedSetting, setSelectedSetting] = React.useState({})\r\n    const [openRemoveDictModal, setOpenRemoveDictModal] = React.useState(false)\r\n    const [newDictSetting, setNewDictSetting] = React.useState({\r\n        id: \"\",\r\n        name: \"\",\r\n        type: \"\",\r\n        tokenType: \"\",\r\n        ignoreCase: \"\",\r\n        column_id: \"\",\r\n        column_keyword: \"\",\r\n        column_value: \"\",\r\n    })\r\n    const [errorNewDictSetting, setErrorNewDictSetting] = React.useState({})\r\n\r\n    useEffect(() => {\r\n        dispatch(setSettings())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleOpenEditModal() {\r\n        setNewDictSetting({\r\n            id: \"\",\r\n            name: \"\",\r\n            type: \"\",\r\n            tokenType: \"\",\r\n            ignoreCase: \"\",\r\n            column_id: \"\",\r\n            column_keyword: \"\",\r\n            column_value: \"\",\r\n        })\r\n        setOpenEditDictModal(true)\r\n    }\r\n\r\n    function handleOpenRemoveSettingModal(setting) {\r\n        setSelectedSetting(setting);\r\n        setOpenRemoveDictModal(true)\r\n    }\r\n\r\n    function handleAddSetting() {\r\n        let tmpError = {}\r\n\r\n        if (newDictSetting['id'].trim() === '' || /[^a-z0-9_]+/gi.test(newDictSetting['id'].trim())) {\r\n            tmpError['id'] = \"아이디를 확인하세요. (a-zA-Z0-9_ 글자만 가능합니다.)\"\r\n        }\r\n        if (newDictSetting['name'].trim() === '') {\r\n            tmpError['name'] = \"이름를 확인하세요.\"\r\n        }\r\n        if (newDictSetting['type'] === '') {\r\n            tmpError['type'] = \"타입을 선택하세요.\"\r\n        }\r\n        if (newDictSetting['tokenType'] === '') {\r\n            tmpError['tokenType'] = \"토큰타입을 선택하세요.\"\r\n        }\r\n        if (newDictSetting['ignoreCase'] === '') {\r\n            tmpError['ignoreCase'] = \"대/소문자 무시를 선택하세요.\"\r\n        }\r\n        if (newDictSetting['type']) {\r\n            let type = newDictSetting['type']\r\n            if ([\"CUSTOM\"].includes(type) && String(newDictSetting['column_id']||'').trim() === '') {\r\n                // id\r\n                tmpError['column_id'] = \"필드 아이디를 확인하세요.\"\r\n            }\r\n            if ([\"SET\", \"SYNONYM\", \"SPACE\", \"COMPOUND\", \"CUSTOM\"].includes(type) && String(newDictSetting['column_keyword']||'').trim() === '') {\r\n                // keyword\r\n                tmpError['column_keyword'] = \"필드의 키워드를 확인하세요.\"\r\n            }\r\n            if ([\"SYNONYM\", \"COMPOUND\", \"SYNONYM_2WAY\", \"CUSTOM\"].includes(type) && String(newDictSetting['column_value']||'').trim() === '') {\r\n                // value\r\n                tmpError['column_value'] = \"필드의 값를 확인하세요.\"\r\n            }\r\n        }\r\n\r\n        if (Object.keys(tmpError).length > 0) {\r\n            console.log(tmpError)\r\n            setErrorNewDictSetting(tmpError)\r\n            return;\r\n        }\r\n\r\n        dispatch(setAddDictionarySetting({\r\n            id: newDictSetting['id'], name: newDictSetting['name'], ignoreCase: newDictSetting['ignoreCase'],\r\n            type: newDictSetting['type'], tokenType: newDictSetting['tokenType'],\r\n            columns_id: newDictSetting['column_id'],\r\n            columns_keyword: newDictSetting['column_keyword'],\r\n            columns_value: newDictSetting['column_value']\r\n        })).then(body => {\r\n            setTimeout(() => {\r\n                dispatch(setSettings())\r\n                setOpenEditDictModal(false)\r\n            }, 1000)\r\n        })\r\n    }\r\n\r\n    function handleRemoveDictionarySetting() {\r\n        dispatch(removeDictionarySetting(selectedSetting['documentId']))\r\n            .then(body => {\r\n            setTimeout(() => {\r\n                dispatch(setSettings())\r\n                setOpenRemoveDictModal(false)\r\n            }, 1000)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet title=\"사전 설정\"/>\r\n\r\n            <Box align={'right'}>\r\n                {authUser.role.index ? <Link className={classes.link}\r\n                                             onClick={handleOpenEditModal}\r\n                                             color={\"primary\"}\r\n                >\r\n                    사전 생성\r\n                </Link> : <></>}\r\n            </Box>\r\n\r\n            <br/>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align={\"center\"}>아이디</TableCell>\r\n                            <TableCell align={\"center\"}>이름</TableCell>\r\n                            <TableCell align={\"center\"}>타입</TableCell>\r\n                            <TableCell align={\"center\"}>대/소문자무시</TableCell>\r\n                            <TableCell align={\"center\"}>토큰타입</TableCell>\r\n                            <TableCell align={\"center\"}>필드(아이디)</TableCell>\r\n                            <TableCell align={\"center\"}>필드(키워드)</TableCell>\r\n                            <TableCell align={\"center\"}>필드(값)</TableCell>\r\n                            <TableCell align={\"center\"}>삭제</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            settings.length === 0 ?\r\n                                <TableRow>\r\n                                    <TableCell colSpan={11} align={\"center\"}>\r\n                                        등록된 사전이 없습니다.\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                :\r\n                                settings.map((setting, index) => {\r\n                                    return (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['id']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['name']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['type']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['ignoreCase'] ? \"true\" : \"false\"}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['tokenType']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['columns'].filter(c => c['type'] === 'id').map(c => c['label']).join(\"\")}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['columns'].filter(c => c['type'] === 'keyword').map(c => c['label']).join(\"\")}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['columns'].filter(c => c['type'] === 'value').map(c => c['label']).join(\"\")}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Button size={\"small\"}\r\n                                                        variant={\"outlined\"}\r\n                                                        style={{color: red[400]}}\r\n                                                        onClick={() => handleOpenRemoveSettingModal(setting)}\r\n                                                >삭제</Button>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n\r\n            <Dialog open={openEditDictModal}\r\n                    fullWidth\r\n                    fullScreen={fullScreen}\r\n                    onClose={() => setOpenEditDictModal(false)}\r\n            >\r\n                <DialogTitle>\r\n                    사전 추가\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                        아이디\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <TextField fullWidth={true}\r\n                                                   autoFocus={true}\r\n                                                   placeholder={\"Synonym\"}\r\n                                                   value={newDictSetting[\"id\"]}\r\n                                                   onChange={e => setNewDictSetting({...newDictSetting, id: e.target.value})}\r\n                                                   error={errorNewDictSetting['id']}\r\n                                                   helperText={errorNewDictSetting['id']||\"\"}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                        이름\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <TextField fullWidth={true}\r\n                                                   placeholder={\"동의어 사전\"}\r\n                                                   value={newDictSetting[\"name\"]}\r\n                                                   onChange={e => setNewDictSetting({...newDictSetting, name: e.target.value})}\r\n                                                   error={errorNewDictSetting['name']}\r\n                                                   helperText={errorNewDictSetting['name']||\"\"}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                        타입\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <FormControl className={classes.select} fullWidth={true}>\r\n                                            <Select placeholder={\"SYNONYM\"}\r\n                                                    value={newDictSetting[\"type\"]}\r\n                                                    onChange={e => {\r\n                                                        setNewDictSetting({\r\n                                                            ...newDictSetting,\r\n                                                            column_id: \"\",\r\n                                                            column_keyword: \"\",\r\n                                                            column_value: \"\",\r\n                                                            type: e.target.value,\r\n                                                        })\r\n                                                    }}\r\n                                                    error={errorNewDictSetting['type']}\r\n                                            >\r\n                                                <MenuItem value={\"\"} disabled={true} >선택하세요.</MenuItem>\r\n                                                <MenuItem value={\"SET\"}>SET</MenuItem>\r\n                                                <MenuItem value={\"SYNONYM\"}>SYNONYM</MenuItem>\r\n                                                <MenuItem value={\"SPACE\"}>SPACE</MenuItem>\r\n                                                <MenuItem value={\"COMPOUND\"}>COMPOUND</MenuItem>\r\n                                                <MenuItem value={\"SYNONYM_2WAY\"}>SYNONYM_2WAY</MenuItem>\r\n                                                <MenuItem value={\"CUSTOM\"}>CUSTOM</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                        토큰 타입\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <FormControl className={classes.select} fullWidth={true}>\r\n                                            <Select placeholder={\"MAX\"}\r\n                                                    value={newDictSetting[\"tokenType\"]}\r\n                                                    onChange={e => setNewDictSetting({...newDictSetting, tokenType: e.target.value})}\r\n                                                    error={errorNewDictSetting['tokenType']}\r\n                                            >\r\n                                                <MenuItem value={\"\"} disabled={true} >선택하세요.</MenuItem>\r\n                                                <MenuItem value={\"MAX\"}>MAX</MenuItem>\r\n                                                <MenuItem value={\"MIN\"}>MIN</MenuItem>\r\n                                                <MenuItem value={\"MID\"}>MID</MenuItem>\r\n                                                <MenuItem value={\"HIGH\"}>HIGH</MenuItem>\r\n                                                <MenuItem value={\"NONE\"}>NONE</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                        대/소문자 무시\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <FormControl className={classes.select} fullWidth={true}>\r\n                                            <Select value={newDictSetting[\"ignoreCase\"]}\r\n                                                    onChange={e => setNewDictSetting({...newDictSetting, ignoreCase: e.target.value})}\r\n                                                    error={errorNewDictSetting['ignoreCase']}\r\n                                            >\r\n                                                <MenuItem value={\"\"} disabled={true} >선택하세요.</MenuItem>\r\n                                                <MenuItem value={\"true\"}>true</MenuItem>\r\n                                                <MenuItem value={\"false\"}>false</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                        필드\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <Box my={3}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                                    아이디\r\n                                                </Grid>\r\n                                                <Grid item xs={9}>\r\n                                                    <TextField fullWidth={true}\r\n                                                               value={newDictSetting[\"column_id\"]}\r\n                                                               onChange={e => setNewDictSetting({...newDictSetting, column_id: e.target.value})}\r\n                                                               placeholder={\"\"}\r\n                                                               style={{backgroundColor: ![\"CUSTOM\"].includes(newDictSetting['type']) ? \"#bdbdbd\" : null}}\r\n                                                               disabled={ ![\"CUSTOM\"].includes(newDictSetting['type'])}\r\n                                                               error={errorNewDictSetting[\"columns_id\"]}\r\n                                                               helperText={errorNewDictSetting[\"column_id\"]||\"\"}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                        <Box my={3}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                                    키워드\r\n                                                </Grid>\r\n                                                <Grid item xs={9}>\r\n                                                    <TextField fullWidth={true}\r\n                                                               placeholder={\"\"}\r\n                                                               value={newDictSetting[\"column_keyword\"]}\r\n                                                               onChange={e => setNewDictSetting({...newDictSetting, column_keyword: e.target.value})}\r\n                                                               style={{backgroundColor: ![\"SET\", \"SYNONYM\", \"SPACE\", \"COMPOUND\", \"CUSTOM\"].includes(newDictSetting['type']) ? \"#bdbdbd\" : null}}\r\n                                                               disabled={ ![\"SET\", \"SYNONYM\", \"SPACE\", \"COMPOUND\", \"CUSTOM\"].includes(newDictSetting['type'])}\r\n                                                               error={errorNewDictSetting[\"column_keyword\"]}\r\n                                                               helperText={errorNewDictSetting[\"column_keyword\"]||\"\"}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                        <Box my={3}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} style={{alignItems: \"center\", justifyContent: \"center\", display: \"flex\"}}>\r\n                                                    값\r\n                                                </Grid>\r\n                                                <Grid item xs={9}>\r\n                                                    <TextField fullWidth={true}\r\n                                                               placeholder={\"\"}\r\n                                                               value={newDictSetting[\"column_value\"]}\r\n                                                               onChange={e => setNewDictSetting({...newDictSetting, column_value: e.target.value})}\r\n                                                               style={{backgroundColor: ![\"SYNONYM\", \"COMPOUND\", \"SYNONYM_2WAY\", \"CUSTOM\"].includes(newDictSetting['type']) ? \"#bdbdbd\" : null}}\r\n                                                               disabled={ ![\"SYNONYM\", \"COMPOUND\", \"SYNONYM_2WAY\", \"CUSTOM\"].includes(newDictSetting['type'])}\r\n                                                               error={errorNewDictSetting[\"column_value\"]}\r\n                                                               helperText={errorNewDictSetting[\"column_value\"]||\"\"}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Box mx={3}>\r\n                        <Button variant=\"contained\"\r\n                                color={\"primary\"}\r\n                                style={{marginRight: \"5px\"}}\r\n                                onClick={handleAddSetting}\r\n                        >추가</Button>\r\n                        <Button variant={\"outlined\"}\r\n                                onClick={() => setOpenEditDictModal(false)}\r\n                                style={{marginLeft: \"5px\"}}\r\n                        >닫기</Button>\r\n                    </Box>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n\r\n            <Dialog open={openRemoveDictModal}\r\n                    fullWidth\r\n                    fullScreen={fullScreen}\r\n                    onClose={() => setOpenRemoveDictModal(false)}\r\n            >\r\n                <DialogTitle>\r\n                    사전 삭제\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {selectedSetting['name']||''} 사전을 삭제하시겠습니까?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\"\r\n                            color={\"primary\"}\r\n                            onClick={handleRemoveDictionarySetting}\r\n                    >삭제</Button>\r\n                    <Button variant={\"outlined\"}\r\n                            onClick={() => setOpenRemoveDictModal(false)}\r\n                    >취소</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    settings: store.dictionaryReducers.settings, \r\n    active: store.dictionaryReducers.active }))(Settings);","import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Async from '~/components/Async';\r\n\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {\r\n    Divider as MuiDivider,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    Box,\r\n} from \"@material-ui/core\";\r\nimport AntTabs from \"~/components/AntTabs\"\r\nimport {spacing} from \"@material-ui/system\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {setActiveSettingIndex, setSettings} from \"../../../redux/actions/dictionaryActions\";\r\nimport Settings from \"./Settings\"\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst firstTabs = [\r\n    {icon: (<SearchIcon/>), component: Async(() => import(\"./Search\"), { time: 0 })},\r\n    {label: \"개요\", component: Async(() => import(\"./Summary\"))},\r\n]\r\n\r\nfunction Dictionary({dispatch, authUser, settings, active}) {\r\n    const [openSettings, setOpenSettings] = React.useState(false)\r\n    let dictTabs = firstTabs.concat(settings.map(dictionary => ({label: dictionary.name, component: Async(() =>  import(\"./WrapperTabPanel\") )})))\r\n\r\n    useEffect(() => {\r\n        dispatch(setSettings())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleTabChange(index) {\r\n        dispatch(setActiveSettingIndex(index - firstTabs.length))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet title=\"사전\"/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={10}>\r\n                    <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                        사전 {openSettings ? \"설정\" : \"\"}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Box align={\"right\"}>\r\n                        <Button color={\"primary\"} variant={\"outlined\"} onClick={() => setOpenSettings(!openSettings)}>\r\n                            {\r\n                                openSettings ?\r\n                                    \"닫기\"\r\n                                    :\r\n                                    \"설정\"\r\n                            }\r\n                        </Button >\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider my={6}/>\r\n\r\n            {\r\n                openSettings ?\r\n                    <Settings />\r\n                    :\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <AntTabs authUser={authUser} tabs={dictTabs} tabIndex={active} onChange={handleTabChange}/>\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    settings: store.dictionaryReducers.settings, \r\n    active: store.dictionaryReducers.active }))(Dictionary);","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"} />)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;","import Client from '~/Client'\r\nimport * as types from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setActiveSettingIndex = (activeIndex) => dispatch => dispatch({type: types.SET_ACTIVE_SETTING_INDEX, payload: activeIndex})\r\n\r\nexport const setSettings = () => dispatch =>\r\n    client.call({\r\n        uri: `/dictionaries/settings`\r\n    })\r\n        .then(response => dispatch({type: types.SET_SETTING_DICTIONARIES, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setDictionary = (dictionary, pageNum, rowSize, isMatch, value, searchColumns) => dispatch =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}`,\r\n        params: {pageNum, rowSize, isMatch, value, searchColumns}\r\n    })\r\n        .then(response => dispatch({type: types.SET_DICTIONARY_DATASET, dictionary: dictionary, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const downloadDictionary = (dictionary) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}/download`,\r\n        responseType: 'blob'\r\n    })\r\n        .then(response => {\r\n            const link = document.createElement('a');\r\n            link.href = window.URL.createObjectURL(new Blob([response.data], {\r\n                type: response.headers['content-type']\r\n            }));\r\n            link.setAttribute('download', `${dictionary}.txt`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n        })\r\n\r\nexport const deleteDictionary = (dictionary, id) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}/${id}`,\r\n        method: \"DELETE\"\r\n    })\r\n\r\nexport const createDictionary = (dictionary, data) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}`,\r\n        method: \"POST\",\r\n        data: data\r\n    })\r\n        .then(response => {\r\n            console.log(response)\r\n        })\r\n        .catch(error => console.error(error))\r\n\r\nexport const updateDictionary = (dictionary, id, data) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}/${id}`,\r\n        method: \"PUT\",\r\n        data: data\r\n    })\r\n        .then(response => {\r\n            console.log(response)\r\n        })\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const searchDictionaries = (data) => dispatch => client.call({\r\n    uri: \"/dictionaries/find-dict\",\r\n    method: \"POST\",\r\n    data: data\r\n}).then(response => dispatch({type: types.SET_DICTIONARY_SEARCH_LIST , payload: response.data}))\r\n\r\nexport const setSummary = () => dispatch => client.call({\r\n    uri: \"/dictionaries/summary\",\r\n}).then(response => dispatch({type: types.SET_SUMMARY , payload: response.data}))\r\n\r\n\r\nexport const applyDictionary = (data) => dispatch => client.call({\r\n    uri: \"/dictionaries/compile-dict\",\r\n    method: \"POST\",\r\n    data: data\r\n}).then(response => dispatch({type: types.SET_DICTIONARY, payload: response.data}))\r\n\r\nexport const setAddDictionarySetting = ({id, name, type, tokenType, ignoreCase, columns_id, columns_keyword, columns_value}) => dispatch => client.call({\r\n    uri: \"/dictionaries/settings\",\r\n    method: \"POST\",\r\n    data: {\r\n        id, name, type, tokenType, ignoreCase,\r\n        columns: [\r\n            columns_id.length > 0 ? {\r\n                    type: \"id\",\r\n                    label: columns_id\r\n                }\r\n                :\r\n                null,\r\n            columns_keyword.length > 0 ? {\r\n                    type: \"keyword\",\r\n                    label: columns_keyword\r\n                }\r\n                :\r\n                null,\r\n            columns_value.length > 0 ? {\r\n                    type: \"value\",\r\n                    label: columns_value\r\n                }\r\n                :\r\n                null,\r\n        ]\r\n    }\r\n}).then(response => response.data)\r\n\r\nexport const removeDictionarySetting = id => dispatch => client.call({\r\n    uri: \"/dictionaries/settings/\" + id,\r\n    method: \"DELETE\"\r\n}).then(response => response.data)\r\n"],"sourceRoot":""}
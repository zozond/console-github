{"version":3,"sources":["redux/actions/rankingTuningActions.js","pages/analysis/rankingTuning/index.js","redux/actions/indicesActions.js","components/IndicesSelect/index.js"],"names":["client","Client","setDocumentList","data","dispatch","call","uri","method","then","response","type","SET_RANKING_TUNING_DOCUMENT","payload","resetDocumentList","Total","SearchResponse","analyzerTokensMap","useStyles","makeStyles","theme","formControl","minWidth","Card","styled","MuiCard","spacing","Divider","MuiDivider","Table","MuiTable","ids","ScoreTreeView","details","expand","nodeToggle","description","TreeView","defaultExpanded","expanded","onNodeToggle","style","flexGrow","defaultCollapseIcon","defaultExpandIcon","TreeItem","key","nodeId","label","getTreeItemsFromData","treeItems","map","detail","children","undefined","length","value","ResultDocument","result","item","_index","dataList","Object","keys","forEach","id","text","analyzerTokens","find","obj","push","field","tokens","size","margin","TableBody","index","tokenValue","t","join","JSON","stringify","TableRow","TableCell","align","padding","fontWeight","borderLeft","width","height","borderRight","colSpan","_explanation","RankingTuningResults","pageNum","errorMessage","overflow","TableHead","number","borderStyle","border","Typography","eventCode","RankingTuningCard","classes","aceEditor","useRef","inputIndex","useState","setPageNum","progress","setProgress","setExpand","checked","setChecked","autoHeight","setAutoHeight","setErrorMessage","query","setQuery","useEffect","current","editor","setValue","clearInterval","setInterval","windowHeight","Math","ceil","window","innerHeight","handlePagination","document","querySelector","scrollTo","jsonData","assign","parse","explain","from","isMultiple","catch","error","message","error1","mb","CardContent","Grid","container","xs","md","lg","Box","display","alignItems","justifyContent","mx","TextField","className","inputRef","IndicesSelect","FormControlLabel","whiteSpace","control","Switch","onChange","evnet","color","name","inputProps","ref","mode","fontSize","placeholder","setOptions","useWorker","mt","CircularProgress","Button","fullWidth","variant","onClick","event","str","e","isJson","getValue","replace","Hidden","lgUp","m","Link","href","changeExpand","i","disabled","component","Number","connect","store","rankingTuningReducers","indicesReducers","Fragment","title","gutterBottom","my","setIndexAction","SET_INDEX","setIndicesAction","params","format","SET_INDICES","console","setIndexInfoListAction","SET_INDEX_INFO_LIST","setIndexAliasesAction","SET_INDEX_ALIASES","setIndexSettingsAction","SET_INDEX_SETTINGS","setIndexMappingsAction","SET_INDEX_MAPPINGS","setIndexStateAction","SET_INDEX_STATE","editDynamicQueryAction","setIndexDocumentSourceListAction","columns","keyword","match","_id","sort","order","bool","minimum_should_match","should","multi_match","fields","operator","boost","_score","SET_INDEX_DOCUMENT_SOURCE_RESPONSE","editIndexDocumentSourceAction","body","addIndexDocumentSourceAction","deleteIndexDocumentSourceAction","analyzerDocumentSourceAction","analyzerDocument","setIndexManagedAction","action","deleteIndexAction","indices","enableSystem","onSelected","labelId","target","filter","startsWith"],"mappings":"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","file":"static/js/52.d05fb667.chunk.js","sourcesContent":["import {SET_RANKING_TUNING_DOCUMENT} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setDocumentList = (data) => dispatch => client.call({\r\n    uri: \"/rankingtuning/\",\r\n    method: 'POST',\r\n    data: data\r\n}).then(response => dispatch({type: SET_RANKING_TUNING_DOCUMENT, payload: response.data}))\r\n\r\nexport const resetDocumentList = () => dispatch => dispatch({type: SET_RANKING_TUNING_DOCUMENT, payload: {\r\n        Total : {},\r\n        SearchResponse: [],\r\n        analyzerTokensMap: {}\r\n    }})\r\n\r\n\r\n// export const setDocumentList = (index, data) => dispatch => client.call({\r\n//     uri: \"/elasticsearch/\"+ index+ \"/_search\",\r\n//     method: 'POST',\r\n//     data: data\r\n// }).then(response => dispatch({type: SET_RANKING_TUNING_DOCUMENT, payload: response.data}))","import React, {useEffect, useRef, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n// import { NavLink as RouterNavLink} from \"react-router-dom\";\r\nimport Helmet from 'react-helmet';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport AceEditor from \"react-ace\";\r\nimport {connect} from \"react-redux\";\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {setDocumentList} from '@actions/rankingTuningActions'\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    CircularProgress,\r\n    Divider as MuiDivider,\r\n    FormControlLabel,\r\n    Grid,\r\n    Hidden,\r\n    Link,\r\n    Switch,\r\n    Table as MuiTable,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport {TreeItem, TreeView} from '@material-ui/lab';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport IndicesSelect from \"../../../components/IndicesSelect\";\r\nimport {resetDocumentList} from \"../../../redux/actions/rankingTuningActions\";\r\n\r\n// const NavLink = React.forwardRef((props, ref) => (\r\n//     <RouterNavLink innerRef={ref} {...props} />\r\n// ));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250\r\n    }\r\n}));\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Table = styled(MuiTable)(spacing);\r\n\r\nlet ids = 1;\r\nconst DEFAULT_TEMPLATE = `\r\n{\r\n    \"query\": {\r\n      \"match\": {\r\n        \"productName\": \"노트북\"\r\n      }\r\n    }\r\n}\r\n`;\r\n\r\n\r\nconst getTreeItemsFromData = treeItems => {\r\n    return treeItems.map(detail => {\r\n      let children = undefined;\r\n      if (detail.details && detail.details.length > 0) {\r\n        children = getTreeItemsFromData(detail.details);\r\n      }\r\n    \r\n      return (\r\n        <TreeItem\r\n          key={ids}\r\n          // nodeId={ids++}\r\n          nodeId={`node${ids++}`}\r\n          label={detail.value + \" : \" + detail.description}\r\n          children={children}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\nfunction ScoreTreeView({details, expand, nodeToggle, description}) {\r\n    return (\r\n        <TreeView\r\n            defaultExpanded={expand}\r\n            expanded={expand}\r\n            onNodeToggle={nodeToggle}\r\n            style={{ flexGrow: 1 }}\r\n            defaultCollapseIcon={<ExpandMoreIcon />}\r\n            defaultExpandIcon={<ChevronRightIcon />}\r\n        >\r\n            <TreeItem key={ids} nodeId={`node${ids++}`} label={description}>\r\n                {getTreeItemsFromData(details)}\r\n            </TreeItem>\r\n        </TreeView>\r\n    );\r\n}\r\n\r\nfunction ResultDocument({result, item, expand, nodeToggle}) {\r\n    if(result.SearchResponse.length === 0) return <></>;\r\n\r\n    const analyzerTokensMap = result.analyzerTokensMap[item._index]\r\n    let dataList = []\r\n\r\n    Object.keys(item).forEach(key => {\r\n        const id = item['_id']\r\n        let text = item[key]\r\n        if (\"_explanation\" === key || \"_id\"  === key || \"_index\" === key) {\r\n            return true;\r\n        }\r\n        \r\n        if (analyzerTokensMap[id] !== undefined) {\r\n            const analyzerFieldList = analyzerTokensMap[id]\r\n            const analyzerTokens = analyzerFieldList.find(obj => obj['field'] === key)\r\n            if (analyzerTokens !== undefined && analyzerTokens['tokens'] !== undefined && analyzerTokens['tokens'] !== null && analyzerTokens['tokens'].length > 0) {\r\n                dataList.push({\r\n                    field: key,\r\n                    text: text,\r\n                    tokens: analyzerTokens['tokens']\r\n                  })\r\n            } else {\r\n                dataList.push({\r\n                    field: key,\r\n                    text: text,\r\n                    tokens: []\r\n                })\r\n            }\r\n        } else {\r\n            dataList.push({\r\n                field: key,\r\n                text: text,\r\n                tokens: []\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Table size=\"small\" style={{margin: \"-16px\" }}>\r\n            <TableBody >\r\n                {\r\n                    dataList.map((data, index) => {\r\n                        let tokenValue = (data['tokens']||[]).map(t => `\"${t}\"`).join(\", \");\r\n                        let text = JSON.stringify(data['text']);\r\n                        let field = data['field'];\r\n                        return (\r\n                            <TableRow key={\"data-\" + index}>\r\n                                <TableCell align=\"center\" padding=\"none\" style={{fontWeight: \"bold\", borderLeft: '1px solid #D3D3D3', width: \"150px\", height: \"22px\"}}>{field}</TableCell>\r\n                                <TableCell align=\"center\" padding=\"none\" style={{borderLeft: '1px solid #D3D3D3', borderRight: '1px solid #D3D3D3'}}>{text}</TableCell>\r\n                                <TableCell align=\"center\" padding=\"none\" style={{borderLeft: '1px solid #D3D3D3', borderRight: '1px solid #D3D3D3'}}>{tokenValue.length > 0 ? tokenValue : text}</TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    })\r\n                }\r\n                <TableRow>\r\n                    <TableCell align=\"center\" padding=\"none\" style={{borderLeft: '1px solid #D3D3D3', width: \"150px\", height: \"22px\"}}>점수</TableCell>\r\n                    <TableCell align=\"center\" colSpan={2} padding=\"none\" style={{borderLeft: '1px solid #D3D3D3', borderRight: '1px solid #D3D3D3'}}>\r\n                         <ScoreTreeView description={item._explanation.description}\r\n                                        details={item._explanation.details}\r\n                                        expand={expand}\r\n                                        nodeToggle={nodeToggle}\r\n                         />\r\n                     </TableCell>\r\n                 </TableRow>\r\n            </TableBody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nfunction RankingTuningResults({pageNum, result, expand, nodeToggle, errorMessage}) {\r\n    ids = 1;\r\n\r\n    if (errorMessage.length > 0) {\r\n        return (\r\n            <Table style={{ margin: \"2px\", overflow: \"scroll\" }}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\"> 오류. </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <pre>\r\n                                {errorMessage}\r\n                            </pre>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    } else {\r\n        return (\r\n            <Table style={{ overflow: \"scroll\" }}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\"> # </TableCell>\r\n                        <TableCell align=\"center\"> 결과 문서 </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {result.SearchResponse.length !== 0 ?\r\n                        result.SearchResponse.map((item, index) => {\r\n                            let number = index + ((pageNum-1)*10) + 1;\r\n                            // return <></>;\r\n                            return (<TableRow key={\"a\" + number}>\r\n                                <TableCell style={{fontWeight: \"bold\", width: \"60px\"}} padding=\"none\" align=\"center\">{number}</TableCell>\r\n                                <TableCell style={{borderStyle: \"none\", border: \"none\"}}>\r\n                                    <ResultDocument result={result} item={item} expand={expand} nodeToggle={nodeToggle}/>\r\n                                </TableCell>\r\n                            </TableRow>);\r\n                        })\r\n                        : <TableRow>\r\n                            <TableCell align=\"center\"></TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <Typography>현재 검색된 결과가 없습니다.</Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\nlet eventCode = null\r\nfunction RankingTuningCard({dispatch, result, index}) {\r\n    const classes = useStyles()\r\n    const aceEditor = useRef(\"\");\r\n    let inputIndex = useRef('');\r\n\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [progress, setProgress] = useState(false);\r\n    const [expand, setExpand] = useState([]);\r\n    const [checked, setChecked] = useState(false);\r\n    const [autoHeight, setAutoHeight] = useState('600px')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [query, setQuery] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        dispatch(resetDocumentList())\r\n        setQuery('')\r\n        setPageNum(0)\r\n        setErrorMessage('')\r\n        aceEditor.current.editor.setValue(DEFAULT_TEMPLATE)\r\n\r\n        if (eventCode !== null) {\r\n            clearInterval(eventCode)\r\n        }\r\n        eventCode = setInterval(() => {\r\n            let windowHeight = Math.ceil(window.innerHeight * 0.6)\r\n            if (windowHeight < 500) {\r\n                windowHeight = 500\r\n            } else if (windowHeight > 900) {\r\n                windowHeight = Math.ceil(window.innerHeight * 0.8)\r\n            }\r\n            setAutoHeight(windowHeight + \"px\")\r\n        }, 500)\r\n        return () => {\r\n            if (eventCode !== null) {\r\n                clearInterval(eventCode)\r\n            }\r\n        }\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    const handleChecked = (evnet) =>{\r\n        setChecked(!checked);\r\n    }\r\n\r\n    const handleExpandAll = (event) =>{\r\n        let changeExpand = [];\r\n        for (let i = 1; i <= ids; i++)\r\n            changeExpand.push(`node${i}`);\r\n        setExpand(changeExpand)\r\n    }\r\n\r\n    const handleFoldAll = (event) =>{\r\n        setExpand([])\r\n    }\r\n\r\n    function isJson(str) {\r\n        try {\r\n            let json = JSON.parse(str);\r\n            return (typeof json === 'object');\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    const handleSearchQuery = (event) =>{\r\n        // dispatch(resetDocumentList())\r\n        setPageNum(0)\r\n        setQuery('')\r\n        setErrorMessage('')\r\n\r\n        ids = 1;\r\n        if(!isJson(aceEditor.current.editor.getValue())){\r\n            setErrorMessage(\"올바른 JSON 형식이 아닙니다.\")\r\n            return;\r\n        }\r\n\r\n        /* 스크롤 top으로 위치 시키기 */\r\n        document.querySelector(\"#move\").scrollTo(0, 0);\r\n\r\n        setProgress(true);\r\n        let jsonData = JSON.parse(aceEditor.current.editor.getValue());\r\n        jsonData.explain = true;\r\n        jsonData.from = 0;\r\n        jsonData.size = 10;\r\n        let data = {};\r\n\r\n        if(checked){\r\n            data.isMultiple = true;\r\n            data.index = inputIndex.current.value.replace(/ /gi, \"\");\r\n            data.text = JSON.stringify(jsonData);\r\n        } else {\r\n            data.isMultiple = true;\r\n            data.index = index;\r\n            data.text = JSON.stringify(jsonData);\r\n        }\r\n\r\n        dispatch(setDocumentList(data)).then((result) => {\r\n            if( result.payload.Total.value > 0 ) setPageNum(1);\r\n            else setPageNum(0);\r\n            setProgress(false);\r\n            setQuery(aceEditor.current.editor.getValue())\r\n        }).catch((error)=>{\r\n            setQuery('')\r\n            dispatch(resetDocumentList())\r\n            setPageNum(0);\r\n            setProgress(false);\r\n            try {\r\n                setErrorMessage(error.response.data.message)\r\n            } catch (error1) {\r\n                setErrorMessage(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    function nodeToggle(event, expanded) {\r\n        setExpand(expanded)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // dispatch(resetDocumentList())\r\n        setErrorMessage('')\r\n        ids = 1;\r\n        // if(!isJson(aceEditor.current.editor.getValue())){\r\n        //     setErrorMessage(\"올바른 JSON 형식이 아닙니다.\")\r\n        //     return;\r\n        // }\r\n        document.querySelector(\"#move\").scrollTo(0, 0);\r\n        setProgress(true);\r\n        // let jsonData = JSON.parse(aceEditor.current.editor.getValue());\r\n        let jsonData = Object.assign(JSON.parse(query),{\r\n            explain: true,\r\n            from: ((pageNum - 1) * 10),\r\n            size: 10\r\n        })\r\n        // jsonData.explain = true;\r\n        // jsonData.from = (pageNum - 1) * 10;\r\n        // jsonData.size = 10;\r\n\r\n        let data = {};\r\n        if(checked){\r\n            data.isMultiple = true;\r\n            data.index = inputIndex.current.value;\r\n        }else{\r\n            data.isMultiple = true;\r\n            data.index = index;\r\n        }\r\n        \r\n        data.text = JSON.stringify(jsonData);\r\n        dispatch(setDocumentList(data)).then(() => {\r\n            setProgress(false);\r\n        }).catch((error) => {\r\n            dispatch(resetDocumentList())\r\n            try {\r\n                setErrorMessage(error.response.data.message)\r\n            } catch (error1) {\r\n                setErrorMessage(error)\r\n            }\r\n        })\r\n        setPageNum(pageNum)\r\n    }\r\n\r\n    return (\r\n        <Card mb={6}>\r\n            <CardContent>\r\n\r\n                <Grid container>\r\n                    <Grid item xs={12} md={12} lg={5}>\r\n\r\n                        <Box display=\"flex\"  alignItems=\"center\"  justifyContent=\"space-between\" mx={3} mb={2}>\r\n                            {checked ? <TextField className={classes.formControl} inputRef={inputIndex} label=\"인덱스를 입력해주세요\"/> : <IndicesSelect />}\r\n                            <FormControlLabel\r\n                                style={{whiteSpace: \"nowrap\"}}\r\n                                control={\r\n                                    <Switch\r\n                                        checked={checked}\r\n                                        onChange={handleChecked}\r\n                                        color=\"primary\"\r\n                                        name=\"IndexModeSelector\"\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                                }\r\n                                label=\"직접 입력\"\r\n                            />\r\n                        </Box>\r\n\r\n                        <Box mx={3} style={{border: \"1px solid silver\"}}>\r\n                            <AceEditor\r\n                                ref={aceEditor}\r\n                                id=\"aceEditor\"\r\n                                mode=\"json\"\r\n                                theme=\"kuroir\"\r\n                                fontSize=\"15px\"\r\n                                height={autoHeight}\r\n                                width=\"100%\"\r\n                                placeholder=\"검색쿼리를 입력해주세요.\"\r\n                                setOptions={{ useWorker: false }}\r\n                            />\r\n                        </Box>\r\n\r\n                        <Box align=\"right\" mx={3} mt={3}>\r\n                            {progress? <CircularProgress /> : <Button fullWidth variant=\"outlined\" color=\"primary\" onClick={handleSearchQuery}>검색</Button>}\r\n                        </Box>\r\n\r\n                        {/*<Snackbar open={alert} autoHideDuration={5000} onClose={handleSnackBarClose}>*/}\r\n                        {/*    <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">*/}\r\n                        {/*        올바른 형식의 JSON이 아닙니다.*/}\r\n                        {/*    </MuiAlert>*/}\r\n                        {/*</Snackbar>*/}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={12} lg={7}>\r\n\r\n                        <Hidden lgUp>\r\n                            <Box mt={10}> </Box>\r\n                        </Hidden>\r\n\r\n                        <Box display=\"flex\" alignItems=\"center\"  justifyContent=\"space-between\" mx={3} style={{height: \"52px\"}}>\r\n                            <Typography variant=\"h6\">총 {result.Total.value ? result.Total.value : \"0\"}건의 검색결과</Typography>\r\n                            <Box display=\"flex\">\r\n                                <Box m={2}><Link href=\"#\" onClick={handleExpandAll} > + 점수 펼치기 </Link></Box>\r\n                                <Box m={2}><Link href=\"#\" onClick={handleFoldAll}> - 점수 접기 </Link></Box>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box style={{overflow: \"scroll\", height: autoHeight, border: \"1px solid silver\"}} mx={3} id=\"move\">\r\n                                <RankingTuningResults pageNum={pageNum} result={result} expand={expand} nodeToggle={nodeToggle} errorMessage={errorMessage}/>\r\n                        </Box>\r\n                        <Box align=\"center\" mx={3} mt={3}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={() => handlePagination(pageNum - 1)}\r\n                                disabled={pageNum === 0 || pageNum === 1 }\r\n                                > 이전 </Button>\r\n                            <Box component={\"span\"} m={3}>\r\n                                {pageNum} / {result.Total.value ? ( Math.ceil(Number(result.Total.value) / 10)) : \"0\" }\r\n                            </Box>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={() => handlePagination(pageNum + 1)}\r\n                                disabled={pageNum === 0 ? true : Math.ceil(Number(result.Total.value) / 10) === pageNum ? true : false}\r\n                                > 다음 </Button>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction RankingTuning({ dispatch, result, index}) {\r\n\r\n    useEffect(() => {\r\n        return () => dispatch(resetDocumentList())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"랭킹튜닝\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                랭킹튜닝\r\n            </Typography>\r\n\r\n            <Divider my={6} />\r\n\r\n            <Grid container spacing={6}>\r\n                <Grid item xs={12}  >\r\n                    <RankingTuningCard dispatch={dispatch} result={result} index={index} />\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    result: store.rankingTuningReducers.result,\r\n    index: store.indicesReducers.index\r\n}))(RankingTuning);\r\n","import Client from '~/Client'\r\nimport {\r\n    SET_INDEX,\r\n    SET_INDEX_ALIASES,\r\n    SET_INDEX_DOCUMENT_SOURCE_RESPONSE,\r\n    SET_INDEX_DOCUMENTS,\r\n    SET_INDEX_INFO_LIST,\r\n    SET_INDEX_MAPPINGS,\r\n    SET_INDEX_SETTINGS,\r\n    SET_INDEX_STATE,\r\n    SET_INDICES\r\n} from \"../constants\";\r\n\r\n\r\nconst client = new Client()\r\n\r\n\r\nexport const setIndexAction = (index) => dispatch => dispatch({type: SET_INDEX, payload: index})\r\n\r\nexport const setIndicesAction = () => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDICES, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexInfoListAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices/${index}`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_INFO_LIST, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexAliasesAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_alias`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_ALIASES, payload: (response.data[index] || {})['aliases']}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexSettingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_settings?include_defaults`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_SETTINGS, payload: response.data[index]||{}}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexMappingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_mappings`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{}) }))\r\n        .catch(error => console.error(error))\r\n    // dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{})['properties'] })\r\n\r\nexport const setIndexStateAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_stats`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_STATE, payload: response.data }))\r\n        .catch(error => console.error(error))\r\n\r\nexport const editDynamicQueryAction = (index, query) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_settings`,\r\n    method: \"PUT\",\r\n    data: query\r\n})\r\n\r\n\r\nexport const setIndexDocumentsAction = ({index, pageNum, rowSize, id, analysis}) => dispatch => client.call({\r\n    uri: `/indices/${index}/_docs`,\r\n    params: {\r\n        index,\r\n        pageNum,\r\n        rowSize,\r\n        id,\r\n        analysis\r\n    }\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_DOCUMENTS,\r\n    payload: response.data,\r\n})).catch(err => console.error(err))\r\n\r\n\r\nexport const setIndexDocumentSourceListAction = ({index, from, size, id, columns, keyword = null}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_search`,\r\n    method: 'post',\r\n    data: id !== undefined && id !== null && id !== \"\" ?\r\n        { query: { match: { _id: id } }, from, size, sort: [{ _id: { order: \"desc\" } }] }\r\n        :\r\n        keyword !== undefined && keyword !== null && keyword !== \"\" ?\r\n            { query: {\r\n                    bool: {\r\n                        minimum_should_match: 1,\r\n                        should: [\r\n                            {\r\n                                multi_match: {\r\n                                    query: keyword,\r\n                                    fields: columns,\r\n                                    operator: \"or\",\r\n                                    boost: 1,\r\n                                    \"type\": \"phrase\"\r\n                                }\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    _id: keyword\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                from,\r\n                size,\r\n                sort: [\r\n                    {_score: {order: \"desc\"}}\r\n                    // , { \"_id\": { \"order\": \"desc\" } }\r\n                ]\r\n            }\r\n            :\r\n            { from, size, sort: [\r\n                { _score: { order: \"desc\" } },\r\n                // { _id: { order: \"desc\" } }\r\n                ]\r\n            }\r\n}).then(response => {\r\n    dispatch({ type: SET_INDEX_DOCUMENT_SOURCE_RESPONSE, payload: response.data })\r\n    return response.data;\r\n})\r\n\r\nexport const editIndexDocumentSourceAction = ({index, id, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'put',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const addIndexDocumentSourceAction = ({index, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc`,\r\n    method: 'post',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexDocumentSourceAction = ({index, id}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'DELETE',\r\n}).then(response => response.data)\r\n\r\nexport const analyzerDocumentSourceAction = (index, analyzerDocument) => dispatch => client.call({\r\n    uri: `/indices/${index}/analyzer`,\r\n    method: \"post\",\r\n    data: analyzerDocument\r\n}).then(response => response.data)\r\n\r\n\r\nexport const setIndexManagedAction = (action, index) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/${action}`,\r\n    method: \"post\"\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexAction = index => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}`,\r\n    method: \"delete\"\r\n}).then(response => response.data)","import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Box, FormControl, InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport {setIndexAction, setIndicesAction} from \"../../redux/actions/indicesActions\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 100\r\n    }\r\n}));\r\n\r\nfunction IndicesSelect({dispatch, indices, index, enableSystem=true, onSelected}) {\r\n    const classes = useStyles()\r\n    const handleChange = (event) => {\r\n        if (onSelected) {\r\n            onSelected(event.target.value)\r\n        }\r\n        dispatch(setIndexAction(event.target.value))\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndicesAction())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"demo-simple-select-label\">인덱스</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={index}\r\n                        onChange={handleChange}\r\n                    >\r\n                        {\r\n                            indices.filter(index => !enableSystem ? !index['index'].startsWith(\".\") : true ).map(index => index['index']).sort()\r\n                                .map((index, i) => (<MenuItem key={i} value={index}>{index}</MenuItem>))\r\n                            // indices.filter(index => !enableSystem ? !index['index'].startsWith(\".\") : true )\r\n                            //     .map((index, i) => (<MenuItem key={i} value={index['index']}>{index['index']}</MenuItem>))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                {/*<Checkbox*/}\r\n                {/*    defaultChecked*/}\r\n                {/*    color=\"default\"*/}\r\n                {/*    inputProps={{ 'aria-label': 'checkbox with default color' }}*/}\r\n                {/*/>*/}\r\n            </Box>\r\n            <br/>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    ...store.indicesReducers,\r\n}))(IndicesSelect);\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/auth/SignIn.js"],"names":["Button","styled","MuiButton","spacing","Wrapper","Paper","props","theme","breakpoints","up","connect","store","dsearchReducers","dispatch","history","useHistory","newServer","React","useRef","value","newEmail","newPassword","useState","serverError","setServerError","inValid","setInValid","loginSave","setLoginSave","handleSignIn","email","current","password","server","localStorage","removeItem","SET_DSEARCH_AUTH_USER","length","signInProcess","startsWith","sessionStorage","setItem","SET_DSEARCH_SERVER","setDsearchSignIn","then","response","console","log","JSON","stringify","hash1","hash2","btoa","hash3","hash4","replace","catch","err","useEffect","dsearchServer","getItem","hash","parse","setDsearchAuthUser","atob","error","Fragment","title","align","alt","src","style","marginTop","fontSize","component","variant","gutterBottom","margin","required","fullWidth","htmlFor","id","name","autoComplete","autoFocus","inputRef","onBlur","checkServer","setDsearchServer","onKeyUp","event","keyCode","type","control","color","checked","onChange","label","container","item","xs","mb","onClick","position","top","height","textAlign"],"mappings":"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","file":"static/js/69.04bcc5b5.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useHistory, useLocation, useParams} from \"react-router-dom\"\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {\r\n    Box,\r\n    Button as MuiButton,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    Input,\r\n    InputLabel,\r\n    Paper,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {setDsearchAuthUser, setDsearchServer, setDsearchSignIn} from \"../../redux/actions/dsearchActions\";\r\nimport {SET_DSEARCH_AUTH_USER, SET_DSEARCH_SERVER} from \"../../redux/constants\";\r\n\r\nconst Button = styled(MuiButton)(spacing);\r\n\r\nconst Wrapper = styled(Paper)`\r\n  padding: ${props => props.theme.spacing(6)}px;\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    padding: ${props => props.theme.spacing(10)}px;\r\n  }\r\n`;\r\n\r\nconst getCookie = function(name) {\r\n    const value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n    return value? value[2] : null;\r\n}\r\n\r\nconst authenticatedRoute = \"/cluster\"\r\n\r\nfunction SignIn({dispatch}) {\r\n    const history = useHistory()\r\n    const newServer = React.useRef({value: \"\"});\r\n    const newEmail = React.useRef({value: \"\"});\r\n    const newPassword = React.useRef({value: \"\"});\r\n\r\n    // const [server, setServer] = useState(\"\")\r\n    // const [email, setEmail] = useState(\"\")\r\n    // const [password, setPassword] = useState(\"\")\r\n\r\n    const [serverError, setServerError] = useState(false)\r\n    const [inValid, setInValid] = useState(false)\r\n    const [loginSave, setLoginSave] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const dsearchServer = localStorage.getItem(SET_DSEARCH_SERVER)\r\n        const hash = JSON.parse(localStorage.getItem(SET_DSEARCH_AUTH_USER) || \"{}\")\r\n        // 서버의 세션 유무 체크.\r\n        try {\r\n            dispatch(setDsearchAuthUser())\r\n                .then(response => {\r\n                    console.log(\"authenticated\")\r\n                    sessionStorage.setItem(SET_DSEARCH_SERVER, localStorage.getItem(SET_DSEARCH_SERVER));\r\n                    // location.replace(authenticatedRoute)\r\n                    history.replace(authenticatedRoute)\r\n                })\r\n\r\n            // 자동로그인 (로컬 스토리지 정보 로그인 시도)\r\n            if (hash['hash1']) {\r\n                console.log(\"auto login\")\r\n                setLoginSave(hash['hash1'])\r\n                signInProcess(atob(atob(atob(hash['hash2']))), atob(atob(atob(hash['hash3']))), atob(atob(atob(hash['hash4']))))\r\n            }\r\n\r\n            // 마지막 서버 접속 정보\r\n            if (dsearchServer) {\r\n                // setServer(dsearchServer)\r\n                newServer.current.value = dsearchServer\r\n            }\r\n        } catch(error) {\r\n            console.error(error)\r\n            sessionStorage.removeItem(SET_DSEARCH_SERVER);\r\n            localStorage.removeItem(SET_DSEARCH_SERVER)\r\n        }\r\n\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function checkServer() {\r\n        let server = newServer.current.value;\r\n\r\n        if (server.length === 0) {\r\n            setServerError(true)\r\n            return\r\n        }\r\n        let checkServer = server\r\n        if (!server.startsWith(\"http\")) {\r\n            checkServer = \"http://\" + server\r\n        }\r\n        dispatch(setDsearchServer(checkServer))\r\n            .then(response => {\r\n                response ? setServerError(false) : setServerError(true)\r\n            })\r\n            .catch(error => setServerError(true))\r\n    }\r\n\r\n    function handleSignIn() {\r\n        let email = newEmail.current.value;\r\n        let password = newPassword.current.value;\r\n        let server = newServer.current.value;\r\n        // 자동로그인 (로컬 스토리지 정보 삭제)\r\n        localStorage.removeItem(SET_DSEARCH_AUTH_USER)\r\n        if (email.length === 0 || password.length === 0) {\r\n            setInValid(true)\r\n            return\r\n        }\r\n        setInValid(false)\r\n        signInProcess(server, email, password)\r\n    }\r\n\r\n    function signInProcess(server, email, password) {\r\n        if (!server.startsWith(\"https://\") && !server.startsWith(\"http://\")) {\r\n            server = \"http://\" + server\r\n        }\r\n        sessionStorage.setItem(SET_DSEARCH_SERVER, server);\r\n        dispatch(setDsearchSignIn({server, email, password}))\r\n            .then(response => {\r\n                console.log(\"sign in success\")\r\n                setInValid(false)\r\n                if (loginSave) {\r\n                    // 자동로그인 (로컬 스토리지 추가)\r\n                    localStorage.setItem(SET_DSEARCH_AUTH_USER, JSON.stringify({\r\n                        hash1: loginSave,\r\n                        hash2: btoa(btoa(btoa(server))),\r\n                        hash3: btoa(btoa(btoa(email))),\r\n                        hash4: btoa(btoa(btoa(password)))\r\n                    }))\r\n                }\r\n                history.replace(authenticatedRoute)\r\n            })\r\n            .catch(err => {\r\n                setInValid(true);\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Wrapper>\r\n                <Helmet title=\"로그인\"/>\r\n                <Box align={\"center\"}>\r\n                    <img alt=\"dsearch\" src={\"/static/img/dsearch/danawa_m_login.png\"} />\r\n                </Box>\r\n                <Box style={{marginTop: \"12px\"}}>\r\n                    <Typography style={{fontSize: \"1.45rem\"}} component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\r\n                        로그인\r\n                    </Typography>\r\n                </Box>\r\n                {/*<Typography component=\"h2\" variant=\"body1\" align=\"center\">*/}\r\n                {/*    Sign in to your account to continue*/}\r\n                {/*</Typography>*/}\r\n                <form>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                        <InputLabel htmlFor=\"server\">서버</InputLabel>\r\n                        <Input id=\"server\"\r\n                               name=\"server\"\r\n                               autoComplete=\"server\"\r\n                               autoFocus\r\n                               inputRef={newServer}\r\n                            //    수정\r\n                            //    onChange={event => setServer(event.target.value)}\r\n                            //    value={server}\r\n                               onBlur={checkServer}\r\n                               error={serverError}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                        <InputLabel htmlFor=\"server\">이메일</InputLabel>\r\n                        <Input id=\"email\"\r\n                               name=\"email\"\r\n                               autoComplete=\"email\"\r\n                               inputRef={newEmail}\r\n                            // 수정\r\n                            //    onChange={event => setEmail(event.target.value)}\r\n                            //    value={email}\r\n                               error={inValid}\r\n                               onKeyUp={event => event.keyCode === 13 ? handleSignIn() : null}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                        <InputLabel htmlFor=\"password\">비밀번호</InputLabel>\r\n                        <Input\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            inputRef={newPassword}\r\n                            // value={password}\r\n                            // onChange={event => setPassword(event.target.value)}\r\n                            error={inValid}\r\n                            onKeyUp={event => event.keyCode === 13 ? handleSignIn() : null}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\"\r\n                                           checked={loginSave}\r\n                                           onChange={() => setLoginSave(!loginSave)}\r\n                        />}\r\n                        label=\"로그인 저장\"\r\n                    />\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box>\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    mb={2}\r\n                                    onClick={handleSignIn}\r\n                                >\r\n                                    로그인\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        {/*<Grid item xs={6}>*/}\r\n                        {/*    <Button*/}\r\n                        {/*        fullWidth*/}\r\n                        {/*        variant=\"contained\"*/}\r\n                        {/*        color=\"primary\"*/}\r\n                        {/*        mb={2}*/}\r\n                        {/*        onClick={handleSignIn}*/}\r\n                        {/*    >*/}\r\n                        {/*        로그인*/}\r\n                        {/*    </Button>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={6}>*/}\r\n                        {/*    <Button*/}\r\n                        {/*        fullWidth*/}\r\n                        {/*        color=\"primary\"*/}\r\n                        {/*    >*/}\r\n                        {/*        취소*/}\r\n                        {/*    </Button>*/}\r\n                        {/*</Grid>*/}\r\n                    </Grid>\r\n                </form>\r\n\r\n                <Box style={{position: \"relative\", top: \"60px\", height: \"0px\", textAlign: \"center\", fontSize: \"0.8em\"}}>\r\n                    © 2020. danawa Co., Ltd. All Rights Reserved.\r\n                </Box>\r\n            </Wrapper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.dsearchReducers}))(SignIn);\r\n"],"sourceRoot":""}
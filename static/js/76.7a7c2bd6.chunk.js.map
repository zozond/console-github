{"version":3,"sources":["pages/indices/index/DataEditTable.js","pages/indices/index/IndexedDataTable.js","pages/indices/index/Data.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","searchInterval","connect","store","indicesReducers","dsearchReducers","dispatch","index","authUser","mappings","documentSourceResponse","useSelector","useState","keyword","setKeyword","pageNum","setPageNum","rowSize","setRowSize","columns","setColumns","dataList","setDataList","selectData","setSelectData","process","setProcess","boxRef","useRef","fetchIndexDocumentSourceList","searchSize","setIndexMappingsAction","then","response","indexMapping","payload","setIndexDocumentSourceListAction","from","size","console","log","tmpColumns","Object","assign","forEach","hit","source","flat","keys","key","undefined","hits","map","flatHit","tmpData","column","replace","handleChangeRowsPerPage","row","handleSearch","clearTimeout","setTimeout","flatMappings","filter","c","includes","customSort","a","b","length","useEffect","Fragment","Box","style","width","height","display","zIndex","top","justifyContent","alignItems","backgroundColor","opacity","position","CircularProgress","color","role","icons","title","localization","body","emptyDataSourceMessage","sort","field","editable","cellStyle","whiteSpace","maxWidth","overflow","data","onChangeRowsPerPage","onRowAdd","newData","Promise","resolve","reject","tmpBody","unflatten","addIndexDocumentSourceAction","catch","onRowUpdate","oldData","id","editIndexDocumentSourceAction","onRowDelete","deleteIndexDocumentSourceAction","onSearchChange","options","headerStyle","onRowClick","event","rowData","target","innerText","Card","CardContent","mt","Typography","variant","gutterBottom","useStyles","makeStyles","theme","rowSizeList","classes","keywordInput","setKeywordInput","setFrom","setSize","totalSize","setTotalSize","loading","setLoading","fetchDocuments","searchFrom","searchKeyword","searchColumns","documents","documentAnalyzerMap","flatSource","flatField","analyzer","push","text","tmpMap","k","endsWith","substring","values","o","analyzerDocumentSourceAction","tmpDataList","value","term","find","obj","join","error","handlePagination","handleChangeKeyword","Grid","container","item","xs","className","form","InputBase","input","placeholder","onChange","onKeyUp","keyCode","IconButton","iconButton","onClick","align","Button","disabled","component","m","isNaN","Math","ceil","FormControl","formControl","Select","labelId","num","MenuItem","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","colSpan","dataIndex","err","Data","chk","setChk","handleRadioChange","e","marginTop","RadioGroup","aria-label","name","defaultValue","FormControlLabel","checked","control","Radio","label"],"mappings":"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","file":"static/js/76.7a7c2bd6.chunk.js","sourcesContent":["import React, {forwardRef, useEffect, useRef, useState} from \"react\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {Box, Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport MaterialTable from 'material-table';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {\r\n    addIndexDocumentSourceAction,\r\n    deleteIndexDocumentSourceAction,\r\n    editIndexDocumentSourceAction,\r\n    setIndexDocumentSourceListAction,\r\n    setIndexMappingsAction\r\n} from \"../../../redux/actions/indicesActions\";\r\nimport flat, {unflatten} from 'flat'\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\r\n};\r\nlet searchInterval = null\r\nfunction DataEditTable({dispatch, index, authUser, mappings}) {\r\n    const documentSourceResponse = useSelector(store => ({ ...store.indicesReducers}))['documentSourceResponse']\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(5);\r\n    const [columns, setColumns] = useState([])\r\n    const [dataList, setDataList] = useState([])\r\n    const [selectData, setSelectData] = useState(\"\")\r\n    const [process, setProcess] = useState(false)\r\n    const boxRef = useRef(null);\r\n\r\n    // 인덱스 변경시 호출\r\n    useEffect(() => {\r\n        setDataList([])\r\n        setSelectData(\"\")\r\n        setKeyword(\"\")\r\n        setPageNum(0)\r\n        setRowSize(5)\r\n        if (index === \"\") {\r\n            return\r\n        }\r\n        fetchIndexDocumentSourceList({keyword})\r\n    }, [index]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        const response = documentSourceResponse;\r\n        if (!response || !response['hits']) {\r\n            return false\r\n        }\r\n\r\n        let tmpColumns = {};\r\n        tmpColumns['ID'] = null\r\n        // tmpColumns = Object.assign(tmpColumns, mappings['properties']);\r\n        response['hits']['hits'].forEach(hit => {\r\n            const source = flat(hit['_source'])\r\n            Object.keys(source).forEach(key => {\r\n                tmpColumns[key] = null\r\n            })\r\n        })\r\n\r\n        const columns = Object.keys(tmpColumns)\r\n        setColumns(columns)\r\n\r\n        setDataList(response['hits']['hits'].map(hit => {\r\n            const flatHit = flat(hit)\r\n            let tmpData = {}\r\n            columns.forEach(column => {\r\n                tmpData[column.replace(/\\./gi, \"___\")] = flatHit['_source.' + column] || \"\"\r\n            })\r\n            tmpData['ID'] = hit['_id']\r\n            tmpData['_hitsId'] = hit['_id']\r\n            return tmpData\r\n        }))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function fetchIndexDocumentSourceList({searchSize=100, columns=[], keyword=null}) {\r\n            return dispatch(setIndexMappingsAction(index)).then((response)=> {\r\n                let indexMapping = response.payload;\r\n                dispatch(setIndexDocumentSourceListAction({index, from: pageNum, size: searchSize||rowSize, columns, keyword})).then(response => {\r\n\r\n\r\n                console.log('확인용', response['hits']);\r\n                // columns 적용\r\n                let tmpColumns = {};\r\n                // let tmpColumns = {}\r\n                tmpColumns['ID'] = null;\r\n                \r\n                tmpColumns = Object.assign(tmpColumns, indexMapping['properties']);\r\n                ((response['hits']||{})['hits']).forEach(hit => {\r\n                    const source = flat(hit['_source'])\r\n                    Object.keys(source).forEach(key => {\r\n                        tmpColumns[key] = null\r\n                    })\r\n                })\r\n    \r\n                if (keyword === undefined || keyword === null || keyword === '') {\r\n                    setColumns(Object.keys(tmpColumns))\r\n                }\r\n    \r\n                // setColumns(Object.keys(tmpColumns))\r\n                return {\r\n                    columns: Object.keys(tmpColumns),\r\n                    hits: response['hits']\r\n                }\r\n            }).then(payload => {\r\n                if(payload) {\r\n                    setDataList((payload['hits']||{})['hits'].map(hit => {\r\n                        const flatHit = flat(hit)\r\n                        let tmpData = {}\r\n                        payload['columns'].forEach(column => {\r\n                            tmpData[column.replace(/\\./gi, \"___\")] = flatHit['_source.' + column] || \"\"\r\n                        })\r\n                        tmpData['ID'] = hit['_id']\r\n                        tmpData['_hitsId'] = hit['_id']\r\n                        return tmpData\r\n                    }))\r\n                } else {\r\n                    setDataList([])\r\n                }\r\n                setProcess(false)\r\n            })})\r\n    }\r\n\r\n    function handleChangeRowsPerPage(row) {\r\n        setRowSize(row)\r\n        fetchIndexDocumentSourceList({keyword})\r\n    }\r\n\r\n    function handleSearch(keyword) {\r\n        setDataList([])\r\n\r\n        if (searchInterval !== null) {\r\n            clearTimeout(searchInterval)\r\n        }\r\n\r\n        searchInterval = setTimeout(() => {\r\n            setProcess(true)\r\n            setKeyword(keyword)\r\n            // setColumns(columns)\r\n            let searchColumns = []\r\n            const flatMappings = flat(mappings)\r\n            // if (/[^0-9]/gi.test(keyword)) {\r\n            //     // 문자\r\n            //     searchColumns = columns.filter(c => ['text','keyword'].includes(flatMappings[`${c}.type`]))\r\n            // } else {\r\n            //     searchColumns = columns\r\n            // }\r\n            searchColumns = columns.filter(c => ['text','keyword'].includes(flatMappings[`${c}.type`]))\r\n\r\n            // 포멧 형식이 있으면 무시.\r\n            searchColumns = searchColumns.filter(c => !flatMappings[`${c}.format`])\r\n            fetchIndexDocumentSourceList({columns: searchColumns, keyword})\r\n\r\n        }, 500)\r\n    }\r\n\r\n    function handleRowAdd(newData) {\r\n        return new Promise((resolve, reject) => {\r\n            const tmpBody = unflatten(newData)\r\n            let body = {}\r\n            Object.keys(tmpBody).forEach(key => body[key.replace(/___/gi, \".\")] = tmpBody[key])\r\n            delete body['ID']\r\n            dispatch(addIndexDocumentSourceAction({ index, body }))\r\n                .then(() => setTimeout(() => {\r\n                    setProcess(true)\r\n                    fetchIndexDocumentSourceList({keyword})\r\n                        .then(resolve)\r\n                }, 1000))\r\n                .catch(reject)\r\n        })\r\n    }\r\n    function handleRowUpdate(newData, oldData) {\r\n        return new Promise((resolve, reject) => {\r\n            const tmpBody = unflatten(newData)\r\n            let body = {}\r\n            Object.keys(tmpBody).forEach(key => body[key.replace(/___/gi, \".\")] = tmpBody[key])\r\n            const id = body['_hitsId']\r\n            delete body['_hitsId']\r\n            delete body['ID']\r\n            delete body['_id']\r\n            dispatch(editIndexDocumentSourceAction({ index, id, body }))\r\n                .then(() => setTimeout(() => {\r\n                    setProcess(true);\r\n                    fetchIndexDocumentSourceList({keyword})\r\n                        .then(resolve)\r\n                }, 1000))\r\n                .catch(reject)\r\n        })\r\n    }\r\n    function handleRowDelete(oldData) {\r\n        return new Promise((resolve, reject) => {\r\n            const id = unflatten(oldData)['_hitsId']\r\n            dispatch(deleteIndexDocumentSourceAction({ index, id }))\r\n                .then(() => setTimeout(() => {\r\n                    setProcess(true)\r\n                    fetchIndexDocumentSourceList({keyword})\r\n                        .then(resolve)\r\n                }, 1000))\r\n                .catch(reject)\r\n        })\r\n    }\r\n\r\n    function customSort(a, b){\r\n        if(a === \"ID\") return -1;\r\n        if(b === \"ID\") return 1;\r\n\r\n        if (a.length > b.length) return 1;\r\n        if (b.length > a.length) return -1;\r\n        return 0;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/**/}\r\n            <Box style={{width: \"100%\", height: \"0px\", display: process ? \"block\" : \"none\"}}>\r\n                <Box style={{\r\n                    zIndex: \"1201\",\r\n                    width: \"100%\",\r\n                    top: \"120px\",\r\n                    height: ((((boxRef||{})[\"current\"]||{})[\"offsetHeight\"]||478) - 175) + \"px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    backgroundColor: \"#4646465c\",\r\n                    opacity: 0.5,\r\n                    position: \"relative\"\r\n                }}>\r\n                    <CircularProgress color=\"primary\" style={{zIndex: \"1202\"}} />\r\n                </Box>\r\n            </Box>\r\n            <Box ref={boxRef}>\r\n                {\r\n                    authUser.role.index ?\r\n                        <MaterialTable\r\n                            icons={tableIcons}\r\n                            title=\"\"\r\n                            localization={{\r\n                                body: {\r\n                                    emptyDataSourceMessage: '',\r\n                                }\r\n                            }}\r\n                            columns={columns.sort((a, b) => customSort(a,b) )\r\n                                .map(column => ({\r\n                                title: column,\r\n                                field: column.replace(/\\./gi, \"___\"),\r\n                                editable: column === \"ID\" ? 'never' : \"always\",\r\n                                cellStyle:{whiteSpace: \"nowrap\", maxWidth: \"180px\", overflow: \"hidden\"},\r\n                            }))}\r\n                            data={dataList.map(data => {\r\n                                let tmpData = {}\r\n                                Object.keys(data).forEach(key => {\r\n                                    if (typeof data[key] !== 'object') {\r\n                                        tmpData[key] = data[key]\r\n                                    }\r\n                                })\r\n                                return tmpData\r\n                            })}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            editable={{ onRowAdd: handleRowAdd, onRowUpdate: handleRowUpdate, onRowDelete: handleRowDelete }}\r\n                            onSearchChange={handleSearch}\r\n                            options={{\r\n                                headerStyle: {\r\n                                    maxWidth: \"180px\"\r\n                                }\r\n                            }}\r\n                            onRowClick={(event, rowData) => {\r\n                                setSelectData(event.target.innerText || \"\")\r\n                            }}\r\n                        />\r\n                        :\r\n                        <MaterialTable\r\n                            icons={tableIcons}\r\n                            title=\"\"\r\n                            localization={{\r\n                                body: {\r\n                                    emptyDataSourceMessage: '',\r\n                                }\r\n                            }}\r\n                            columns={columns.sort((a, b) => customSort(a,b) ).map(column => ({\r\n                                title: column,\r\n                                field: column.replace(/\\./gi, \"___\"),\r\n                                editable: column === \"ID\" ? 'never' : \"always\",\r\n                                cellStyle:{whiteSpace: \"nowrap\", maxWidth: \"180px\"},\r\n                            }))}\r\n                            data={dataList}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            onSearchChange={handleSearch}\r\n                            options={{\r\n                                headerStyle: {\r\n                                    maxWidth: \"180px\"\r\n                                }\r\n                            }}\r\n                            onRowClick={(event, rowData) => {\r\n                                setSelectData(event.target.innerText || \"\")\r\n                            }}\r\n                        />\r\n                }\r\n            </Box>\r\n\r\n            <Card style={{display: selectData === \"\" ? \"none\" : \"block\"}}>\r\n                <CardContent>\r\n                    <Box mt={5}>\r\n                        <Typography variant=\"h5\" gutterBottom >\r\n                            {selectData}\r\n                        </Typography>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.indicesReducers, ...store.dsearchReducers}))(DataEditTable)","import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport flat from \"flat\"\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CircularProgress,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {\r\n    analyzerDocumentSourceAction,\r\n    setIndexDocumentSourceListAction,\r\n    setIndexMappingsAction\r\n} from \"../../../redux/actions/indicesActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({}));\r\n\r\nconst rowSizeList = [5, 10, 20]\r\nconst idKey = \"* ID\"\r\nfunction IndexedDataTable({dispatch, index, mappings}) {\r\n    const classes = useStyles()\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [keywordInput, setKeywordInput] = useState(\"\");\r\n    const [columns, setColumns] = useState([]);\r\n    const [from, setFrom] = useState(0);\r\n    const [size, setSize] = useState(5);\r\n    const [dataList, setDataList] = useState([])\r\n    const [totalSize, setTotalSize] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    // 인덱스 변경시 호출\r\n    useEffect(() => {\r\n        setKeyword(\"\")\r\n        setColumns([])\r\n        setFrom(0)\r\n        fetchDocuments({searchKeyword: \"\", searchFrom: 0})\r\n    }, [index]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function fetchDocuments({ searchFrom, searchSize, searchKeyword }) {\r\n        setDataList([])\r\n        setLoading(true)\r\n        dispatch(setIndexMappingsAction(index)).then(response => {\r\n            const mappings = (((response||{})['payload']||{})['properties']||{})\r\n            let flatMappings = {}\r\n            Object.keys(flat(mappings))\r\n                .forEach(key => {\r\n                    flatMappings[key.replace(/.properties/gi, \"\")] = flat(mappings)[key]\r\n                })\r\n            return { mappings, flatMappings }\r\n        }).then(payload => {\r\n\r\n            let searchColumns = []\r\n            const flatMappings = flat(mappings)\r\n            // if (/[^0-9]/gi.test(searchKeyword)) {\r\n            //     // 문자\r\n            //     searchColumns = columns.filter(c => ['text','keyword'].includes(flatMappings[`${c}.type`]))\r\n            // } else {\r\n            //     searchColumns = columns\r\n            // }\r\n            searchColumns = columns.filter(c => ['text','keyword'].includes(flatMappings[`${c}.type`]))\r\n            // 포멧 형식이 있으면 무시.\r\n            searchColumns = searchColumns.filter(c => !flatMappings[`${c}.format`])\r\n\r\n            return dispatch(setIndexDocumentSourceListAction({\r\n                index,\r\n                from: searchFrom||from,\r\n                size: searchSize||size,\r\n                keyword: searchKeyword === undefined ? keyword : searchKeyword,\r\n                columns: searchColumns\r\n            })).then(documents => ({\r\n                ...payload,\r\n                documents: documents\r\n            }))\r\n        }).then(payload => {\r\n            const hits = ((((payload||{})['documents']||{})['hits']||{})['hits']||[])\r\n\r\n            if (searchKeyword === undefined || searchKeyword === '') {\r\n                let tmpColumns = {}\r\n                // tmpColumns['ID'] = null\r\n                hits.forEach(hit => {\r\n                    const source = flat(hit['_source'])\r\n                    Object.keys(source).forEach(key => {\r\n                        tmpColumns[key] = null\r\n                    })\r\n                })\r\n                setColumns(Object.keys(tmpColumns))\r\n            }\r\n\r\n            let documentAnalyzerMap = {}\r\n            hits.forEach(hit => {\r\n                const id = hit['_id']\r\n                const flatSource = flat(hit['_source'])\r\n\r\n                documentAnalyzerMap[id] = []\r\n                Object.keys(flatSource).forEach(flatField => {\r\n                    let analyzer = \"\"\r\n                    if(((payload||{})['flatMappings']||{})[flatField + \".type\"] === \"text\") {\r\n                        analyzer = \"standard\"\r\n                    }\r\n                    if (((payload||{})['flatMappings']||{})[flatField + \".analyzer\"]) {\r\n                        analyzer = (payload||{})['flatMappings'][flatField + \".analyzer\"]\r\n                    }\r\n\r\n                    if (analyzer && analyzer !== \"\") {\r\n                        documentAnalyzerMap[id].push({\r\n                            field: flatField, text: flatSource[flatField], analyzer: analyzer\r\n                        })\r\n                    }\r\n\r\n                    // fields 하위 필드에 대해 분석을 시도함.\r\n                    let tmpMap = {}\r\n                    Object.keys(((payload||{})['flatMappings']||{}))\r\n                        .filter(k => k.includes(`${flatField}.fields`))\r\n                        .forEach(k => {\r\n                            if (k.endsWith(\".analyzer\")) {\r\n                                // 분석기가 있는 경우.\r\n                                delete tmpMap[`${k.substring(0, k.length - 9)}.type`]\r\n                                tmpMap[k] = {\r\n                                    field: (k.substring(0, k.length - 9).replace(/\\.fields/gi, \"\")),\r\n                                    text: flatSource[flatField],\r\n                                    analyzer: ((payload||{})['flatMappings']||{})[k]||\"standard\"\r\n                                }\r\n                            } else if (k.endsWith(\".type\") && !tmpMap[`${k.substring(0, k.length - 5)}.analyzer`]) {\r\n                                // 분석기 없으면 standard 선택\r\n                                tmpMap[k] = {\r\n                                    field: (k.substring(0, k.length - 5).replace(/\\.fields/gi, \"\")),\r\n                                    text: flatSource[flatField],\r\n                                    analyzer: \"standard\"\r\n                                }\r\n                            }\r\n                        })\r\n                    Object.values(tmpMap).forEach(o => {\r\n                        hit['_source'][o['field']] = flatSource[flatField]\r\n                        documentAnalyzerMap[id].push(o)\r\n                    })\r\n                })\r\n            })\r\n            return {\r\n                ...payload||{},\r\n                totalSize: ((((payload||{})['documents']||{})['hits']||{})['total']||{})['value']||0,\r\n                documentAnalyzerMap: documentAnalyzerMap\r\n            }\r\n        }).then(payload => {\r\n            dispatch(analyzerDocumentSourceAction(index, (payload||{})['documentAnalyzerMap']||{})).then(response => {\r\n                let tmpDataList = [];\r\n                ((((payload||{})['documents']||{})['hits']||{})['hits']||[]).forEach(hit => {\r\n                    const source = flat(hit['_source'])\r\n                    tmpDataList.push({key: idKey, value: hit['_id'], term: \"-\"})\r\n                    Object.keys(source).forEach(key => {\r\n                        let term = \"\"\r\n                        if (response[hit['_id']] && response[hit['_id']].length > 0) {\r\n                            let analyzer = response[hit['_id']].find(obj => obj['field'] === key)\r\n                            if (analyzer && analyzer['term'] && analyzer['term'].length > 0) {\r\n                                term = analyzer['term'].join(\", \")\r\n                            }\r\n                        }\r\n                        tmpDataList.push({key: key, value: source[key], term: term})\r\n                    })\r\n                })\r\n                setLoading(false)\r\n                setDataList(tmpDataList)\r\n                setTotalSize(payload['totalSize'])\r\n            })\r\n        }).catch(error => {\r\n            setLoading(false)\r\n            // alert(\"실패.\" + error)\r\n            console.log('error', error)\r\n        })\r\n    }\r\n\r\n    function handleSizeChange(event) {\r\n        setSize(event.target.value)\r\n        fetchDocuments({searchFrom:0, searchSize: event.target.value})\r\n    }\r\n\r\n    function handlePagination(searchFrom) {\r\n        setFrom(searchFrom)\r\n        fetchDocuments({searchFrom:searchFrom})\r\n    }\r\n\r\n    function handleChangeKeyword(searchKeyword) {\r\n        setKeyword(searchKeyword)\r\n        setFrom(0)\r\n        fetchDocuments({searchFrom:0, searchKeyword: searchKeyword})\r\n    }\r\n    // 인덱스가 없으면 무시.\r\n    if (!index) return null;\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box className={classes.form}>\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"Search\"\r\n                                    value={keywordInput}\r\n                                    onChange={event => setKeywordInput(event.target.value)}\r\n                                    onKeyUp={event => {\r\n                                        if (event.keyCode === 13) {\r\n                                            handleChangeKeyword(keywordInput)\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                <IconButton  className={classes.iconButton} onClick={() => handleChangeKeyword(keywordInput)}>\r\n                                    <Search/>\r\n                                </IconButton>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from - size)}\r\n                                        disabled={from <= 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {\r\n                                        dataList.length > 0 ?\r\n                                            isNaN((from / size) + 1) ? 0 : (from / size) + 1\r\n                                            :\r\n                                            0\r\n                                    }\r\n                                    /\r\n                                    {isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size)}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from + size)}\r\n                                        disabled={\r\n                                            (isNaN((from / size) + 1) ? 0 : (from / size) + 1)\r\n                                            >=\r\n                                            (isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size))\r\n                                        }\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"right\"}>\r\n                                <FormControl className={classes.formControl}>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        value={size}\r\n                                        onChange={handleSizeChange}\r\n                                    >\r\n                                        {\r\n                                            rowSizeList.map(num => <MenuItem key={num} value={num}>{num}</MenuItem>)\r\n                                        }\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <TableContainer>\r\n                        <Table size={\"small\"}>\r\n                            <colgroup>\r\n                                <col style={{width:'20%'}}/>\r\n                                <col style={{width:'40%'}}/>\r\n                                <col style={{width:'40%'}}/>\r\n                            </colgroup>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>아이디</TableCell>\r\n                                    <TableCell>값</TableCell>\r\n                                    <TableCell>분석결과</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody style={{display: loading ? \"table-row-group\" : \"none\"}}>\r\n                                <TableRow>\r\n                                    <TableCell colSpan={3}>\r\n                                        <Box align={\"center\"}>\r\n                                            <CircularProgress />\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            <TableBody style={{display: loading ? \"none\" : \"table-row-group\"}}>\r\n                                {\r\n                                    dataList.map((data, dataIndex) => {\r\n                                        try {\r\n                                            return (\r\n                                                <TableRow key={`${data['key']}-${dataIndex}`}>\r\n                                                    <TableCell>\r\n                                                        {data['key']}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        {data['value']}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        {data['term']}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )\r\n                                        } catch (err) {\r\n                                            console.error(err)\r\n                                            return false\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from - size)}\r\n                                        disabled={from <= 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {\r\n                                        dataList.length > 0 ?\r\n                                            isNaN((from / size) + 1) ? 0 : (from / size) + 1\r\n                                            :\r\n                                            0\r\n                                    }\r\n                                    /\r\n                                    {isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size)}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from + size)}\r\n                                        disabled={\r\n                                            (isNaN((from / size) + 1) ? 0 : (from / size) + 1)\r\n                                            >=\r\n                                            (isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size))\r\n                                        }\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(store => ({...store.indicesReducers}))(IndexedDataTable)","import React, {useState} from \"react\";\r\nimport {Box, FormControl, FormControlLabel, Radio, RadioGroup} from \"@material-ui/core\";\r\nimport DataEditTable from \"./DataEditTable\";\r\nimport IndexedDataTable from \"./IndexedDataTable\";\r\n\r\nfunction Data() {\r\n    const [chk, setChk] = useState('source'); // source, indexed\r\n\r\n    function handleRadioChange(e) {\r\n        setChk(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <FormControl component=\"fieldset\" style={{marginTop: \"20px\"}}>\r\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                    <FormControlLabel value=\"source\" checked={chk === \"source\"} onChange={handleRadioChange}\r\n                                      control={<Radio color=\"primary\"/>} label=\"기본\"/>\r\n                    <FormControlLabel value=\"indexed\" checked={chk === \"indexed\"} onChange={handleRadioChange}\r\n                                      control={<Radio color=\"primary\"/>} label=\"분석된 색인어\"/>\r\n                </RadioGroup>\r\n            </FormControl>\r\n\r\n            <Box mt={0}>\r\n                {\r\n                    chk === \"source\" ? <DataEditTable/> : <IndexedDataTable />\r\n                }\r\n            </Box>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Data"],"sourceRoot":""}
{"version":3,"sources":["utils.js","pages/analysis/dictionary/Summary.js"],"names":["utils","sleep","ms","Promise","resolve","setTimeout","systemInfo","SummaryTable","summary","makeCheckedIdList","makeCheckedList","undefined","dictionaryInfo","dictionarySettings","infoDict","JSON","parse","dictionary","settings","tableInfo","i","type","info","name","push","j","id","count","words","indexCount","handleCheckBox","event","target","value","checked","map","key","documentId","onChange","Number","toLocaleString","updatedTime","Date","appliedTime","tokenType","ignoreCase","connect","store","authUser","dsearchReducers","dictionaryReducers","update","dispatch","useState","applyDict","setApplyDict","progress","setProgress","disabled","setDisabled","checkedList","setCheckedList","checkedIdList","setCheckedIdList","useEffect","setSummary","Fragment","role","analysis","variant","color","onClick","data","str","ids","Object","keys","length","applyDictionary","then","open","autoHideDuration","onClose","elevation","severity","cList","list","keyList","flag","disabledApplyButton"],"mappings":"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","file":"static/js/59.c3dfe893.chunk.js","sourcesContent":["const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Box, CircularProgress,\r\n    Card,\r\n    CardContent,\r\n    Button,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Checkbox, Snackbar\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport {setSummary, applyDictionary} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\n\r\nconst systemInfo = {\r\n    type: \"SYSTEM\",\r\n    name: \"시스템 사전\"\r\n}\r\n\r\nfunction SummaryTable({summary, makeCheckedIdList, makeCheckedList}){\r\n    if(summary.dictionaryInfo === undefined || summary.dictionarySettings === undefined) return <></>;\r\n\r\n    let infoDict = JSON.parse(summary.dictionaryInfo).dictionary;\r\n    let settings = summary.dictionarySettings;\r\n    let tableInfo = [];\r\n\r\n    for(let i in infoDict){\r\n        if(infoDict[i].type === systemInfo.type){\r\n            var info = infoDict[i];\r\n            info.name = systemInfo.name;\r\n            tableInfo.push(info);\r\n            break;\r\n        }\r\n    }\r\n\r\n    for(let i in settings){\r\n        let info = settings[i];\r\n        for(var j in infoDict){\r\n            if(settings[i].id === infoDict[j].type){\r\n                info.count = infoDict[j].count;\r\n                info.words = infoDict[j].words;\r\n                info.indexCount = infoDict[j].indexCount;\r\n                break;\r\n            }\r\n        }\r\n\r\n        tableInfo.push(info);\r\n    }\r\n    \r\n    const handleCheckBox = (event) =>{\r\n        makeCheckedIdList(event.target.value, event.target.id);\r\n        makeCheckedList(event.target.value, event.target.checked);\r\n    }\r\n    \r\n    return tableInfo.map((info) => { \r\n        return  <TableRow key={info.id}>\r\n            <TableCell> {info.type === systemInfo.type ? <></> : <Checkbox id={info.documentId} name={\"checkbox\"} value={info.id} onChange={handleCheckBox}/>} </TableCell>\r\n            <TableCell>{info.name}</TableCell>\r\n            <TableCell>{info.type}</TableCell>\r\n            <TableCell>{info.indexCount ? Number(info.indexCount).toLocaleString() : \"0\"}</TableCell>\r\n            <TableCell> {info.updatedTime ? new Date(info.updatedTime).toLocaleString() : \"-\"} </TableCell>\r\n            <TableCell>{Number(info.count).toLocaleString()}</TableCell>\r\n            <TableCell> {info.appliedTime ? new Date(info.appliedTime).toLocaleString() : \"-\"} </TableCell>\r\n            <TableCell> {info.tokenType ? info.tokenType : \"-\"} </TableCell>\r\n            <TableCell> {info.ignoreCase ? info.ignoreCase ? \"Y\": \"N\" : \"-\"} </TableCell>\r\n        </TableRow> });\r\n}\r\n\r\n\r\n function Summary({dispatch, authUser, summary, update}) {\r\n    const [applyDict, setApplyDict] = useState(false);\r\n    const [progress, setProgress] = useState(false);\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [checkedList, setCheckedList] = useState({});\r\n    const [checkedIdList, setCheckedIdList] = useState({});\r\n\r\n    useEffect(() => {\r\n        dispatch(setSummary())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function makeCheckedIdList(key, value){\r\n        let cList = {};\r\n        let list = Object.keys(checkedIdList);\r\n        for(let key of list){\r\n            cList[key] = checkedIdList[key];\r\n        }\r\n\r\n        cList[key] = value;\r\n        setCheckedIdList(cList);\r\n    }\r\n\r\n    function makeCheckedList(key, value){\r\n        let cList = {};\r\n        let list = Object.keys(checkedList);\r\n        for(let key of list){\r\n            cList[key] = checkedList[key];\r\n        }\r\n\r\n        cList[key] = value;\r\n        setCheckedList(cList);\r\n        disabledApplyButton(cList)\r\n    }\r\n\r\n    const clickApplyDictionary = (event) => {\r\n        let data = {};\r\n        let str = \"\";\r\n        let ids = \"\";\r\n        \r\n        setProgress(true);\r\n        let keyList = Object.keys(checkedList);\r\n        for(let key of keyList){\r\n            if(checkedList[key]){\r\n                if(str.length === 0){\r\n                    str = key;\r\n                    ids = checkedIdList[key]\r\n                }else{\r\n                    str += \",\" + key;\r\n                    ids += \",\" + checkedIdList[key]\r\n                }\r\n            }\r\n        }\r\n        data.ids = ids;\r\n        data.type = str;\r\n        dispatch(applyDictionary(data)).then(() => {setApplyDict(true); setProgress(false); utils.sleep(1000).then(() => { dispatch(setSummary()) }); });\r\n    }\r\n\r\n    function disabledApplyButton(list){\r\n        let keyList = Object.keys(list);\r\n        let flag = true;\r\n        for(let key of keyList){\r\n            if(list[key]){\r\n                flag = false; \r\n                break;\r\n            }\r\n        }\r\n        setDisabled(flag);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Box>\r\n                        {authUser.role.analysis ? \r\n                             progress ? <CircularProgress /> : <Button disabled={disabled} variant={\"contained\"} color={\"primary\"} onClick={clickApplyDictionary}>사전적용</Button> \r\n                            : <></> }\r\n                    </Box>\r\n                    <Box>\r\n                        <Snackbar open={applyDict} autoHideDuration={5000} onClose={() => { setApplyDict(false) }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> 사전 적용 성공 </MuiAlert>\r\n                        </Snackbar>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>#</TableCell>\r\n                                    <TableCell>이름</TableCell>\r\n                                    <TableCell>타업</TableCell>\r\n                                    <TableCell>작업단어갯수</TableCell>\r\n                                    <TableCell>수정시간</TableCell>\r\n                                    <TableCell>적용단어갯수</TableCell>\r\n                                    <TableCell>적용시간</TableCell>\r\n                                    <TableCell>토큰타입</TableCell>\r\n                                    <TableCell>대소문자무시</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <SummaryTable authUser={authUser} summary={summary} makeCheckedIdList={makeCheckedIdList} makeCheckedList={makeCheckedList} />\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    summary: store.dictionaryReducers.summary,\r\n    update: store.dictionaryReducers.update\r\n}))(Summary)"],"sourceRoot":""}
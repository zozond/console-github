{"version":3,"sources":["pages/indices/indexTemplates/view.js","components/AntTabs/index.js","redux/actions/indexTemplateActions.js","components/Json2Html/index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","edit","width","minHeight","Divider","styled","MuiDivider","spacing","Box","MuiBox","positions","Card","MuiCard","Typography","MuiTypography","Button","MuiButton","palette","tabs","label","connect","store","authUser","dsearchReducers","indexTemplateReducers","dispatch","template","templates","comments","history","useHistory","classes","useState","selectedTemplate","setSelectedTemplate","indexPatternText","setIndexPatternText","tabIndex","setTabIndex","mappingMode","setMappingMode","settingMode","setSettingMode","detail","setDetail","mappingsJson","setMappingsJson","settingsJson","setSettingsJson","openMessage","setOpenMessage","useEffect","setIndexTemplateAction","setIndexTemplatesAction","location","pathname","substring","lastIndexOf","join","JSON","stringify","setIndexTemplateCommentsAction","Fragment","title","variant","gutterBottom","display","my","container","item","xs","align","value","onChange","event","push","handleTemplateChange","target","style","map","sort","name","key","role","index","color","onClick","disabled","className","placeholder","marginTop","component","row","checked","control","e","m","overflow","Json2html","json","type","mode","autoFocus","open","fullWidth","Tab","withStyles","root","textTransform","fontWeight","typography","fontWeightRegular","marginRight","opacity","fontWeightMedium","selected","props","disableRipple","AntTabs","React","state","setState","indicatorColor","textColor","scrollButtons","tab","id","icon","hidden","aria-labelledby","client","Client","call","uri","then","response","SET_INDEX_TEMPLATES","payload","data","filter","startsWith","addIndexTemplateAction","index_patterns","settings","mappings","method","deleteIndexTemplateAction","SET_INDEX_TEMPLATE","undefined","hits","length","SET_COMMENTS","list","addCommentsAction","updatedComment","Render","validJson","parse","error","comment","forEach","sourceAsMap","topFields","val","cursor","flatJsonMap","flat","formatKeyFlatJsonMap","Object","keys","replaceKey","replace","sortKey","suffix","border","cellSpacing","cellPadding","field","endsWith","obj","etc","k","find","o","mappingName","includes","onKeyPress","n","console","log","res","catch","err","onBlur","defaultValue","MappingsJson2html","flatSettingsMap","mt","SettingsJson2html"],"mappings":"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","file":"static/js/50.5f8829a9.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport AntTabs from \"~/components/AntTabs\";\r\nimport Json2html from \"~/components/Json2Html\"\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    TextareaAutosize,\r\n    TextField,\r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {palette, positions, spacing} from \"@material-ui/system\";\r\nimport {connect} from \"react-redux\";\r\nimport {setIndexTemplateAction, setIndexTemplatesAction, setIndexTemplateCommentsAction} from \"../../../redux/actions/indexTemplateActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    edit: {\r\n        width: '100%',\r\n        minHeight: '500px'\r\n    },\r\n}));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions, palette);\r\n\r\nconst tabs = [{label: \"매핑\"}, {label: \"셋팅\"}]\r\n\r\nlet message = \"\"\r\nfunction View({ dispatch, authUser, template, templates, comments}) {\r\n    const history = useHistory()\r\n    const classes = useStyles();\r\n    const [selectedTemplate, setSelectedTemplate] = useState(\"\")\r\n    const [indexPatternText, setIndexPatternText] = useState(\"\")\r\n\r\n    const [tabIndex, setTabIndex] = useState(0)\r\n\r\n    const [mappingMode, setMappingMode] = useState(\"form\")\r\n    const [settingMode, setSettingMode] = useState(\"form\")\r\n\r\n    const [detail, setDetail] = useState(false);\r\n    const [mappingsJson, setMappingsJson] = useState(\"\")\r\n    const [settingsJson, setSettingsJson] = useState(\"\")\r\n\r\n    const [openMessage, setOpenMessage] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (selectedTemplate !== \"\") {\r\n            dispatch(setIndexTemplateAction({template: selectedTemplate}))\r\n            dispatch(setIndexTemplatesAction())\r\n        } else {\r\n            // eslint-disable-next-line no-restricted-globals\r\n            setSelectedTemplate(location.pathname.substring(location.pathname.lastIndexOf(\"/\") + 1))\r\n        }\r\n    }, [selectedTemplate]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setIndexPatternText((template['index_patterns'] || []).join(\",\"))\r\n    }, [template['index_patterns']]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setMappingsJson(JSON.stringify((template['mappings'] || {}), null, 4))\r\n        // setMappingsJson(JSON.stringify(((template['mappings'] || {})['properties']), null, 4))\r\n\r\n    }, [template['mappings']]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setSettingsJson(JSON.stringify(((template['settings'] || {})['index']), null, 4))\r\n    }, [template['settings']]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndexTemplateCommentsAction())\r\n    }, []) \r\n    \r\n    function handleTemplateChange(template) {\r\n        history.push(`../indices-templates/${template}`)\r\n        setSelectedTemplate(template)\r\n    }\r\n    function handleTabChane(index) {\r\n        setTabIndex(index)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"템플릿 조회\"/>\r\n\r\n            <Typography variant=\"h3\"\r\n                        gutterBottom\r\n                        display=\"inline\"\r\n            >\r\n                템플릿 조회\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <Box align={'left'}>\r\n                        <FormControl>\r\n                            <InputLabel>템플릿</InputLabel>\r\n                            <Select value={selectedTemplate}\r\n                                    onChange={event => handleTemplateChange(event.target.value)}\r\n                                    style={{minWidth: 250}}\r\n                            >\r\n                                {\r\n                                    templates.map(template => template['name']).sort().map(name => <MenuItem key={name} value={name}>{name}</MenuItem>)\r\n                                    // templates.map(template => <MenuItem key={template['name']} value={template['name']}>{template['name']}</MenuItem>)\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {\r\n                        authUser.role.index ? \r\n                        <Box align={'right'}>\r\n                            <Button variant=\"outlined\"\r\n                                color={\"primary\"}\r\n                                onClick={() => history.push(`${selectedTemplate}/edit`)}\r\n                            >수정</Button>\r\n                            {/* <Button variant=\"outlined\"\r\n                                onClick={() => {\r\n                                    history.goBack();\r\n                                }}\r\n                                ml={1}\r\n                            >뒤로</Button> */}\r\n                        </Box> :\r\n                        <Box align={'right'}>\r\n                            <Button variant=\"outlined\"\r\n                                    color={\"primary\"}\r\n                                    disabled\r\n                            >수정</Button>\r\n                            {/* <Button variant=\"outlined\"\r\n                                onClick={() => {\r\n                                    history.goBack();\r\n                                }}\r\n                                ml={1}\r\n                            >뒤로</Button> */}\r\n                        </Box>\r\n                    }\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <TextField label=\"인덱스 패턴\"\r\n                           placeholder={\"access-log-*,error-log-*\"}\r\n                           value={indexPatternText}\r\n                           onChange={event => setIndexPatternText(event.target.value)}\r\n                           disabled\r\n                />\r\n            </FormControl>\r\n\r\n            <br/><br/>\r\n\r\n\r\n            <AntTabs tabs={tabs}\r\n                     tabIndex={tabIndex}\r\n                     onChange={handleTabChane}\r\n            />\r\n\r\n            <Box display={tabIndex === 0 ? \"block\" : \"none\"} style={{marginTop: \"20px\"}}>\r\n                {/* 맵핑 */}\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup row onChange={event => setMappingMode(event.target.value)}>\r\n                        <FormControlLabel value=\"form\"\r\n                                          checked={mappingMode === \"form\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"폼\"\r\n                        />\r\n                        <FormControlLabel value=\"json\"\r\n                                          checked={mappingMode === \"json\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"json\"\r\n                        />\r\n                    </RadioGroup>\r\n                    {\r\n                        mappingMode === 'form' ? \r\n                            <FormControlLabel value=\"상세보기\"\r\n                                onChange={(e) => {setDetail(e.target.checked)}}\r\n                                checked={detail}\r\n                                control={<Checkbox color=\"primary\"/>}\r\n                                label=\"상세보기\"/> \r\n                            : <></>\r\n                    }\r\n                </FormControl>\r\n                {\r\n                    mappingMode === \"form\" ?\r\n                        <Card>\r\n                            <CardContent m={0}>\r\n                                <Box style={{overflow: \"auto\", minWidth: \"700px\"}}>\r\n                                    {Json2html({json: mappingsJson, type: \"mappings\", name:selectedTemplate, comments, dispatch, mode:\"view\", detail: detail})}\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                        :\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <TextareaAutosize className={classes.edit}\r\n                                                      value={mappingsJson}\r\n                                                      onChange={event => setMappingsJson(event.target.value)}\r\n                                                      autoFocus\r\n                                                      disabled\r\n                                    />\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                }\r\n            </Box>\r\n\r\n            <Box display={tabIndex === 1 ? \"block\" : \"none\"} style={{marginTop: \"20px\"}}>\r\n                {/* 설정 */}\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup row onChange={event => setSettingMode(event.target.value)}>\r\n                        <FormControlLabel value=\"form\"\r\n                                          checked={settingMode === \"form\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"폼\"\r\n                        />\r\n                        <FormControlLabel value=\"json\"\r\n                                          checked={settingMode === \"json\"}\r\n                                          control={<Radio color=\"primary\"/>}\r\n                                          label=\"json\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n                {\r\n                    settingMode === \"form\" ?\r\n                        <Card>\r\n                            <CardContent m={0}>\r\n                                {Json2html({json: template, type: \"settings\", name: selectedTemplate, comments:comments, dispatch})}\r\n                            </CardContent>\r\n                        </Card>\r\n                        :\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Box>\r\n                                    <TextareaAutosize className={classes.edit}\r\n                                                      value={settingsJson}\r\n                                                      onChange={event => setSettingsJson(event.target.value)}\r\n                                                      disabled\r\n                                    />\r\n                                </Box>\r\n                            </CardContent>\r\n                        </Card>\r\n                }\r\n            </Box>\r\n\r\n            <Dialog open={openMessage}\r\n                    fullWidth={true}>\r\n                <DialogTitle>오류</DialogTitle>\r\n                <DialogContent>\r\n                    {message}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={() => setOpenMessage(false)}>\r\n                        확인\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.indexTemplateReducers\r\n}))(View);","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"} />)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;","import Client from '~/Client'\r\nimport {SET_INDEX_TEMPLATE, SET_INDEX_TEMPLATES, SET_COMMENTS} from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexTemplatesAction = () => dispatch => client.call({\r\n    uri: '/elasticsearch/_cat/templates?format=json'\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_TEMPLATES,\r\n    payload: response.data.filter(template => !template['name'].startsWith(\".\"))\r\n}))\r\n\r\n\r\nexport const addIndexTemplateAction = ({template, index_patterns, settings, mappings}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"PUT\",\r\n    data: {\r\n        index_patterns,\r\n        settings,\r\n        mappings\r\n    }\r\n})\r\n\r\nexport const deleteIndexTemplateAction = ({template}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"DELETE\",\r\n})\r\n\r\nexport const setIndexTemplateAction = ({ template }) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`\r\n}).then(response => dispatch({type: SET_INDEX_TEMPLATE, payload: response.data[template]}))\r\n\r\n\r\nexport const setIndexTemplateCommentsAction = () => dispatch => client.call({\r\n    uri: `/templates/comments`,\r\n    method: \"GET\",\r\n}).then(response => {\r\n    if(response.data == undefined || response.data.hits == undefined || response.data.hits.hits.length === 0){\r\n        dispatch({type: SET_COMMENTS, payload: []})\r\n    }else{\r\n        let list = response.data.hits.hits.map((item) => {\r\n            return item;\r\n        })\r\n        dispatch({type: SET_COMMENTS, payload: list})\r\n    }\r\n})\r\n\r\nexport const addCommentsAction = ({id, name, updatedComment}) => dispatch => client.call({\r\n    uri: `/templates/comments`,\r\n    method: \"PUT\",\r\n    data: {\r\n        \"name\": name,\r\n        \"id\": id,\r\n        \"data\": updatedComment\r\n    }\r\n})\r\n","import React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField, \r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\nimport flat from \"flat\";\r\nimport styled from \"styled-components\";\r\nimport {positions, spacing} from \"@material-ui/system\";\r\n\r\nimport {addCommentsAction, setIndexTemplateCommentsAction} from \"../../redux/actions/indexTemplateActions\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\n\r\nfunction SettingsJson2html(settings) {\r\n    if (!settings) {\r\n        return null\r\n    }\r\n\r\n    const flatSettingsMap = flat(settings['settings'] ? settings['settings'] : settings)\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        주요항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>샤드 갯수</TableCell>\r\n                                <TableCell>레플리카 갯수</TableCell>\r\n                                <TableCell>리프레쉬 간격</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_shards']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_replicas']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['defaults']||{})['index']||{})['refresh_interval']|| '-')}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        기타항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>키</TableCell>\r\n                                <TableCell>값</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                Object.keys(flatSettingsMap||{}).map(key => {\r\n                                    return (\r\n                                        <TableRow key={key}>\r\n                                            <TableCell>{key}</TableCell>\r\n                                            <TableCell>{flatSettingsMap[key]||''}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction MappingsJson2html(json, name, comments, dispatch, mode, detail) {\r\n    \r\n    let comment = {};\r\n    if(comments && comments.length > 0){\r\n        comments.forEach((item) => {\r\n            let map = item.sourceAsMap;\r\n            if(map[\"name\"] == name){\r\n                comment.id = item.id;\r\n                comment.comments = item.sourceAsMap.comments;\r\n                comment.name = item.sourceAsMap.name;\r\n            }\r\n        })\r\n    }else{\r\n        comment.name = name;\r\n    }\r\n\r\n    let topFields = []\r\n    if(mode === 'view' && !detail){\r\n        topFields = [\r\n            {title: \"타입\", key: \"type\", component: (val) => {return val}},\r\n            // {title: \"색인\", key: \"enabled\", component: (val) => {return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>}},\r\n            {title: \"색인\", key: \"enabled\", component: (val) => {\r\n                if (val !== undefined && val !== null && val === false) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                        </React.Fragment>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n            }},\r\n            {title: \"분석기\", key: \"analyzer\", component: (val) => {return val}},\r\n        ]\r\n    }else{\r\n        topFields = [\r\n            {title: \"타입\", key: \"type\", component: (val) => {return val}},\r\n            // {title: \"색인\", key: \"enabled\", component: (val) => {return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>}},\r\n            {title: \"색인\", key: \"enabled\", component: (val) => {\r\n                if (val !== undefined && val !== null && val === false) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                        </React.Fragment>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n            }},\r\n            {title: \"분석기\", key: \"analyzer\", component: (val) => {return val}},\r\n            {title: \"copy_to\", key: \"copy_to\", component: (val) => {return val}},\r\n            {title: \"ignore_above\", key: \"ignore_above\", component: (val) => {return val}},\r\n            {title: \"null_value\", key: \"null_value\", component: (val) => {return val}},\r\n            {title: \"doc_values\", key: \"doc_values\", component: (val) => {return val}},\r\n            {title: \"similarity\", key: \"similarity\", component: (val) => {return val||\"\"}},\r\n            {title: \"term_vector\", key: \"term_vector\", component: (val) => {return val}},\r\n            {title: \"store\", key: \"store\", component: (val) => {\r\n                    if (val !== undefined && val !== null && val === false) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                            </React.Fragment>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                // return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>\r\n            }}\r\n        ]\r\n    }\r\n\r\n    const flatJsonMap = flat(json['properties'] ? json['properties'] : json)\r\n\r\n    let formatKeyFlatJsonMap = {}\r\n    Object.keys(flatJsonMap).forEach(key => {\r\n        const replaceKey = key.replace(/\\.properties/gi, \"\")\r\n\r\n        const sortKey = replaceKey.substring(0, replaceKey.lastIndexOf(\".\"))\r\n        const suffix = replaceKey.substring(replaceKey.lastIndexOf(\".\") + 1)\r\n        if (!formatKeyFlatJsonMap[sortKey]) {\r\n            formatKeyFlatJsonMap[sortKey] = {}\r\n        }\r\n        formatKeyFlatJsonMap[sortKey][suffix] = flatJsonMap[key]\r\n    })\r\n\r\n    return (\r\n        <table border={1} width={\"100%\"} cellSpacing={0} cellPadding={8}>\r\n            <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>이름</th>\r\n                {\r\n                    topFields.map(field => <th key={field['title']}>{field['title']}</th>)\r\n                }\r\n                <th>기타설정</th>\r\n                <th >설명</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                Object.keys(formatKeyFlatJsonMap)\r\n                    .filter(key => !key.endsWith(\".copy_to\")).map((key, index) => {\r\n                    const obj = formatKeyFlatJsonMap[key]\r\n\r\n                    const etc = Object.keys(obj).map(k => {\r\n                        const o = topFields.find(m => m['key'] === k)\r\n                        return o ? null : k + \": \" + obj[k]\r\n                    }).filter(o => o)\r\n\r\n                    let mappingName = key.replace(/\\.fields/gi, \"\");\r\n                    if(mappingName.includes(\"s-prod-v\")){\r\n                        mappingName = \"s-prod-v\";\r\n                    }\r\n\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td align={\"center\"}>{index + 1}</td>\r\n                            <td>{key.replace(/\\.fields/gi, \"\")}</td>\r\n                            {\r\n                                topFields.map(field => <td key={field['title']} align={\"center\"}>{field['component'](obj[field['key']])}</td>)\r\n                            }\r\n                            <td>\r\n                                {etc.join(\", \")}\r\n                            </td>\r\n                            <td>\r\n                                {\r\n                                mode === 'view' ? \r\n                                    mappingName.includes(\".\") ? <></> \r\n                                        :\r\n                                            comment.comments === undefined || comment.comments === null ? \r\n                                            <></> :\r\n                                            <Box width=\"100%\">\r\n                                                {comment.comments[mappingName]}\r\n                                            </Box> \r\n                                : <></> \r\n                                }\r\n                                \r\n                                {\r\n                                    mode === 'edit' ?  \r\n                                        mappingName.includes(\".\") ? <></> :\r\n                                            comment.comments === undefined || comment.comments === null  ? \r\n                                                <TextField \r\n                                                    fullWidth\r\n                                                    onKeyPress={(e) => {\r\n                                                        // if(e.key =='Enter'){\r\n                                                            if(comment.comments == undefined){\r\n                                                                comment.comments = {};\r\n                                                            }\r\n\r\n                                                            let n = mappingName + \"\";\r\n                                                            comment.comments[n] = e.target.value;\r\n                                                            console.log(comment);\r\n                                                            dispatch(addCommentsAction({\"id\": null, \"name\": name, \"updatedComment\": comment}))\r\n                                                                .then((res) => {\r\n                                                                    dispatch(setIndexTemplateCommentsAction())\r\n                                                                }).catch((err) => { \r\n                                                                    console.log(err) \r\n                                                                });\r\n                                                        // }\r\n                                                    }}\r\n                                                    onBlur={(e) => {\r\n                                                        if(comment.comments == undefined){\r\n                                                            comment.comments = {};\r\n                                                        }\r\n                                                        let n = mappingName + \"\";\r\n                                                        comment.comments[n] = e.target.value;\r\n                                                        console.log(comment);\r\n                                                        dispatch(addCommentsAction({\"id\": null, \"name\": name, \"updatedComment\": comment}))\r\n                                                            .then((res) => {\r\n                                                                dispatch(setIndexTemplateCommentsAction())\r\n                                                            }).catch((err) => { \r\n                                                                console.log(err) \r\n                                                            });\r\n                                                    }}\r\n                                                    key={mappingName}\r\n                                                    defaultValue={\"\"} /> : \r\n                                                <TextField \r\n                                                    fullWidth\r\n                                                    onKeyPress={\r\n                                                        (e) => {\r\n                                                            // if(e.key =='Enter'){\r\n                                                                if(comment.comments == undefined){\r\n                                                                    comment.comments = {};\r\n                                                                }\r\n\r\n                                                                let n = mappingName + \"\";\r\n                                                                comment.comments[n] = e.target.value;\r\n                                                                console.log(comment);\r\n                                                                dispatch(addCommentsAction({\"id\": comment.id, \"name\": name, \"updatedComment\": comment}))\r\n                                                                    .then((res) => {\r\n                                                                        dispatch(setIndexTemplateCommentsAction())\r\n                                                                    }).catch((err) => { \r\n                                                                        console.log(err) \r\n                                                                    });\r\n                                                            // }\r\n                                                        }\r\n                                                    }\r\n                                                    onBlur={(e) => {\r\n                                                        if(comment.comments == undefined){\r\n                                                            comment.comments = {};\r\n                                                        }\r\n                                                        let n = mappingName + \"\";\r\n                                                        comment.comments[n] = e.target.value;\r\n                                                        console.log(comment);\r\n                                                        dispatch(addCommentsAction({\"id\": null, \"name\": name, \"updatedComment\": comment}))\r\n                                                            .then((res) => {\r\n                                                                dispatch(setIndexTemplateCommentsAction())\r\n                                                            }).catch((err) => { \r\n                                                                console.log(err) \r\n                                                            });\r\n                                                    }}\r\n                                                    key={mappingName}\r\n                                                    defaultValue={comment.comments[mappingName]} /> \r\n                                    : <></>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nfunction Render({json, type, name, comments, dispatch, mode, detail}) {\r\n    let validJson = json\r\n    try {\r\n        if (typeof json === 'string') {\r\n            validJson = JSON.parse(json)\r\n        }\r\n    } catch (error) {\r\n        // console.warn(\"parsing error\", typeof json)\r\n    }\r\n\r\n    if (validJson && type === \"mappings\") {\r\n        return MappingsJson2html(validJson, name, comments, dispatch, mode, detail)\r\n    } else if (validJson && type === \"settings\") {\r\n        return SettingsJson2html(validJson)\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Box style={{minHeight: \"150px\"}}>\r\n                </Box>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Render\r\n"],"sourceRoot":""}
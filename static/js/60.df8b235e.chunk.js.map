{"version":3,"sources":["pages/indices/indexTemplates/index.js","redux/actions/indexTemplateActions.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","root","flexGrow","width","edit","Divider","styled","MuiDivider","spacing","Box","MuiBox","positions","Typography","MuiTypography","fields","id","label","sorting","connect","store","authUser","dsearchReducers","indexTemplateReducers","dispatch","templates","history","useHistory","classes","useState","orderBy","setOrderBy","order","setOrder","useEffect","setIndexTemplatesAction","list","sort","a","b","map","template","i","name","pattern","no","Fragment","title","variant","gutterBottom","display","my","align","role","index","onClick","push","style","cursor","color","component","Paper","className","table","aria-label","field","key","active","direction","event","isAsc","row","scope","client","Client","call","uri","then","response","type","SET_INDEX_TEMPLATES","payload","data","filter","startsWith","addIndexTemplateAction","index_patterns","settings","mappings","method","deleteIndexTemplateAction","setIndexTemplateAction","SET_INDEX_TEMPLATE"],"mappings":"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","file":"static/js/60.df8b235e.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Divider as MuiDivider,\r\n    Link,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography as MuiTypography,\r\n    Button,\r\n    TableSortLabel,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport {setIndexTemplatesAction} from \"../../../redux/actions/indexTemplateActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\n\r\nconst fields = [\r\n    { id: \"no\", label: \"#\", sorting: true},\r\n    { id: \"name\", label: \"이름\", sorting: true},\r\n    { id: \"id\", label: \"아이디\", sorting: true},\r\n    { id: \"edit\", label: \"\", sorting: false},\r\n]\r\n\r\nfunction Templates({dispatch, authUser, templates}) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const [orderBy, setOrderBy] = useState(\"\")\r\n    const [order, setOrder] = useState(\"asc\")\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndexTemplatesAction())\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n        // .map((c, i) => ({...c, no: collectionList.length - 1 - i}))\r\n    let list = templates.sort((a, b) => {\r\n        if(a['name'] > b['name']){\r\n            return 1;\r\n        }else if(a['name'] < b['name']){\r\n            return -1;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }).map((template, i) => {\r\n        return {\r\n            name: template['name'],\r\n            pattern: template['index_patterns'],\r\n            no: i\r\n    }})\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"템플릿\"/>\r\n\r\n            <br/>\r\n\r\n            <Typography variant=\"h3\"\r\n                        gutterBottom\r\n                        display=\"inline\"\r\n            >\r\n                템플릿\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Box align={'right'}>\r\n                {authUser.role.index ?\r\n                    <Link onClick={() => history.push(\"./indices-templates/new\")}\r\n                          style={{cursor: \"pointer\"}}\r\n                          color={\"primary\"}>\r\n                    템플릿 생성\r\n                </Link> : <></>}\r\n            </Box>\r\n\r\n            <br/>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {\r\n                                fields.map(field =>\r\n                                    <TableCell align=\"center\" key={field['id']}>\r\n                                        {\r\n                                            field[\"sorting\"] ?\r\n                                                <TableSortLabel\r\n                                                    active={orderBy === field['id']}\r\n                                                    direction={orderBy === field['id'] ? order : 'asc'}\r\n                                                    onClick={event => {\r\n                                                        setOrderBy(field['id'])\r\n                                                        const isAsc = orderBy === field['id'] && order === 'asc';\r\n                                                        setOrder(isAsc ? 'desc' : 'asc');\r\n                                                    }}\r\n                                                >\r\n                                                    {field['label']}\r\n                                                </TableSortLabel>\r\n                                                :\r\n                                                field['label']\r\n                                        }\r\n                                    </TableCell>)\r\n                            }\r\n                            {/*<TableCell align=\"center\">#</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">이름</TableCell>*/}\r\n                            {/*<TableCell align=\"center\">패턴</TableCell>*/}\r\n                            {/*<TableCell align=\"center\"></TableCell>*/}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            list.sort((a, b) => {\r\n                                if (orderBy && order) {\r\n                                    if (order === 'asc') {\r\n                                        return a[orderBy] > b[orderBy] ? 1 : -1\r\n                                    } else {\r\n                                        return a[orderBy] > b[orderBy] ? -1 : 1\r\n                                    }\r\n                                } else {\r\n                                    return 0\r\n                                }\r\n                            }).map((row, i) => (\r\n                                <TableRow key={row.name}>\r\n                                    <TableCell component=\"th\" scope=\"row\" align=\"center\">{row['no'] + 1}</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Link onClick={() => history.push(`./indices-templates/${row.name}`)}\r\n                                              style={{cursor: \"pointer\"}} >\r\n                                            {row.name}\r\n                                        </Link>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">{row.pattern}</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {authUser.role.index ?\r\n                                            <Button variant={\"outlined\"} color={\"primary\"} onClick={() => history.push(`./indices-templates/${row.name}/edit`)}\r\n                                                  style={{cursor: \"pointer\"}}>수정</Button>\r\n                                            :\r\n                                            <></>\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.indexTemplateReducers \r\n}))(Templates)","import Client from '~/Client'\r\nimport {SET_INDEX_TEMPLATES, SET_INDEX_TEMPLATE} from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexTemplatesAction = () => dispatch => client.call({\r\n    uri: '/elasticsearch/_cat/templates?format=json'\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_TEMPLATES,\r\n    payload: response.data.filter(template => !template['name'].startsWith(\".\"))\r\n}))\r\n\r\n\r\nexport const addIndexTemplateAction = ({template, index_patterns, settings, mappings}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"PUT\",\r\n    data: {\r\n        index_patterns,\r\n        settings,\r\n        mappings\r\n    }\r\n})\r\n\r\nexport const deleteIndexTemplateAction = ({template}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"DELETE\",\r\n})\r\n\r\nexport const setIndexTemplateAction = ({ template }) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`\r\n}).then(response => dispatch({type: SET_INDEX_TEMPLATE, payload: response.data[template]}))"],"sourceRoot":""}
{"version":3,"sources":["redux/actions/migrationActions.js","pages/management/migration/index.js"],"names":["client","Client","Divider","styled","MuiDivider","spacing","connect","store","serverCheck","clusterReducers","dispatch","useDispatch","React","useState","pipeline","setPipeline","templates","setTemplates","collection","setCollection","jdbc","setJdbc","comments","setComments","uploadError","setUploadError","uploadResults","setUploadResults","downloadModal","setDownloadModal","uploadModal","setUploadModal","file","setFile","uploadProgress","setUploadProgress","alertFlag","setAlertFlag","alertMessage","setAlertMessage","alertColor","setAlertColor","handleDownload","fd","json","FormData","append","call","uri","method","headers","data","responseType","then","response","JSON","parse","sessionStorage","getItem","link","document","createElement","href","window","URL","createObjectURL","Blob","type","setAttribute","cluster","name","body","appendChild","click","handleUpload","sendFile","res","a","console","log","result","message","catch","err","Fragment","title","Grid","container","item","xs","Typography","variant","gutterBottom","display","my","Card","mb","CardContent","Box","margin","width","alignItems","justifyContent","m","Button","color","onClick","length","border","Table","key","TableHead","TableRow","TableCell","TableBody","hover","map","dangerouslySetInnerHTML","__html","Snackbar","open","autoHideDuration","onClose","elevation","severity","Dialog","fullWidth","DialogTitle","DialogContent","FormControlLabel","control","Checkbox","checked","onChange","e","target","label","labelPlacement","DialogActions","style","whiteSpace","files","LinearProgress"],"mappings":"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","file":"static/js/77.44d49d45.chunk.js","sourcesContent":["import Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const download = (fd) =>\r\n    client.call({\r\n        uri: `/migration/download`,\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-type\": \"application/json\",\r\n        },\r\n        data: fd,\r\n        responseType: 'blob'\r\n    })\r\n        .then(response => {\r\n            let json = JSON.parse(sessionStorage.getItem('SET_DSEARCH_AUTH_USER'));\r\n            const link = document.createElement('a');\r\n            link.href = window.URL.createObjectURL(new Blob([response.data], {\r\n                type: response.headers['content-type']\r\n            }));\r\n            link.setAttribute('download', `dsearch-${json.cluster.name}-backup.json`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n        })\r\n\r\n\r\nexport const sendFile = (fd) => dispatch => client.call({\r\n    uri: `/migration/upload`,\r\n    method: \"POST\",\r\n    data: fd,\r\n    headers: {\r\n        \"Content-type\": \"multipart/form-data\",\r\n    }\r\n})\r\n\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {\r\n    Card,\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    Grid,\r\n    Snackbar,\r\n    Table,\r\n    TableBody,\r\n    LinearProgress,\r\n    Typography,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    CardContent,\r\n    TableRow,\r\n    TableCell,\r\n    TableHead,\r\n} from \"@material-ui/core\";\r\n\r\nimport { spacing } from \"@material-ui/system\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { download, sendFile  } from \"../../../redux/actions/migrationActions\"\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nfunction Migration() {\r\n    const dispatch = useDispatch()\r\n\r\n    const [pipeline, setPipeline] = React.useState(true);\r\n    const [templates, setTemplates] = React.useState(true);\r\n    const [collection, setCollection] = React.useState(true);\r\n    const [jdbc, setJdbc] = React.useState(true);\r\n    const [comments, setComments] = React.useState(true);\r\n\r\n    const [uploadError, setUploadError] = React.useState(\"\");\r\n    const [uploadResults, setUploadResults] = React.useState(null)\r\n    const [downloadModal, setDownloadModal] = React.useState(false);\r\n    const [uploadModal, setUploadModal] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    function handleDownload() {\r\n        let json = new FormData();\r\n        json.append(\"pipeline\", pipeline)\r\n        json.append(\"templates\", templates)\r\n        json.append(\"collection\", collection)\r\n        json.append(\"jdbc\", jdbc)\r\n        json.append(\"comments\", comments)\r\n\r\n        download(json)\r\n        setDownloadModal(false);\r\n    }\r\n\r\n    function handleUpload() {\r\n        let fd = new FormData();\r\n        fd.append('filename', file);\r\n\r\n        setUploadError(\"\");\r\n        setUploadProgress(true);\r\n        dispatch(sendFile(fd))\r\n            .then(async (res) => {\r\n                console.log(res)\r\n                setAlertFlag(true);\r\n                if (res.data.result) {\r\n                    setUploadResults(res.data);\r\n                    setAlertColor(\"info\");\r\n                    setAlertMessage(res.data.message)\r\n                    setUploadModal(false);\r\n                } else {\r\n                    setAlertColor(\"error\");\r\n                    setUploadResults(null);\r\n                    setAlertMessage(\"실패\")\r\n                    setUploadError(res.data.message);\r\n                    setUploadModal(false);\r\n                }\r\n                setFile(null);\r\n                setUploadProgress(false);\r\n            }).catch(async (err) => {\r\n                setUploadError(err);\r\n                setAlertFlag(true);\r\n                setAlertColor(\"error\");\r\n                setAlertMessage(\"실패\");\r\n                setUploadProgress(false);\r\n                setFile(null);\r\n                // await utils.sleep(1000);\r\n            });\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"마이그레이션\" />\r\n            <Grid container={true}>\r\n                <Grid item xs={6}>\r\n                    <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                        마이그레이션\r\n                    </Typography>\r\n                </Grid>\r\n                <Divider my={6} />\r\n            </Grid>\r\n\r\n            <Card mb={6}>\r\n                <CardContent>\r\n                    <Box margin=\"12px\" width=\"100%\" >\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" width=\"500px\" m={2}>\r\n                            이 클러스터의 백업 데이터를 다운로드 하시겠습니까? \r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={() => { setDownloadModal(true) }}>\r\n                                다운로드\r\n                            </Button>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" width=\"500px\" m={2}>\r\n                            백업데이터로 클러스터를 셋팅하시겠습니까?\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={() => { setUploadModal(true) }}>\r\n                                업로드\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box width=\"100%\">\r\n                        {\r\n                            uploadError.length === 0 ? <></> : <Box border=\"1px solid grey\">{uploadError}</Box>\r\n                        }\r\n\r\n                        {\r\n                            uploadResults == null ? <></> : \r\n                            <Table key=\"detailResult\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            <Typography variant=\"h2\">업로드 결과</Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                <TableRow hover>\r\n                                    <TableCell>\r\n                                        <Typography variant=\"h4\">[파이프라인] 총 갯수: {uploadResults.pipeline.length}</Typography>\r\n                                        <br />\r\n                                        {uploadResults.pipeline.length > 0 ? \r\n                                            uploadResults.pipeline.map((item) => {\r\n                                                return <div key={item}  dangerouslySetInnerHTML={ {__html:\" - \" + item} } />\r\n                                            })\r\n                                        : <></>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow hover>\r\n                                    <TableCell>\r\n                                        <Typography variant=\"h4\" >[컬렉션] 총 갯수: {uploadResults.collection.length}</Typography>\r\n                                        <br />\r\n                                        {uploadResults.collection.length > 0 ? \r\n                                            uploadResults.collection.map((item) => {\r\n                                                return <div key={item} dangerouslySetInnerHTML={ {__html:\" - \" + item} } />\r\n                                            })\r\n                                        : <></>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow hover>\r\n                                    <TableCell>\r\n                                        <Typography variant=\"h4\">[JDBC] 총 갯수: {uploadResults.jdbc.length}</Typography>\r\n                                        <br />\r\n                                        {uploadResults.jdbc.length > 0 ? \r\n                                            uploadResults.jdbc.map((item) => {\r\n                                                return <div key={item} dangerouslySetInnerHTML={ {__html: \" - \" + item} } />\r\n                                            })\r\n                                        : <></>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow hover>\r\n                                    <TableCell>\r\n                                    <Typography variant=\"h4\">[템플릿] 총 갯수: {uploadResults.templates.length}</Typography>\r\n                                    <br />\r\n                                    {uploadResults.templates.length > 0 ? \r\n                                            uploadResults.templates.map((item) => {\r\n                                                return <div key={item} dangerouslySetInnerHTML={ {__html: \" - \" + item} } />\r\n                                            })\r\n                                        : <></>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow hover>\r\n                                    <TableCell>\r\n                                        <Typography variant=\"h4\">[템플릿 설명] 총 갯수: {uploadResults.comments.length}</Typography>\r\n                                        <br />\r\n                                        {uploadResults.comments.length > 0 ? \r\n                                            uploadResults.comments.map((item) => {\r\n                                                return <div key={item + \"_comments\"} dangerouslySetInnerHTML={ {__html: \" - \" + item} } />\r\n                                            })\r\n                                        : <></>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        }\r\n                        \r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n            {/* File Upload Modal */}\r\n            <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n            </Snackbar>\r\n\r\n            <Dialog open={downloadModal}\r\n                fullWidth\r\n                onClose={() => setDownloadModal(false)}\r\n            >\r\n                <DialogTitle>\r\n                    데이터 백업\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\"\r\n                                    checked={pipeline}\r\n                                    onChange={(e) => {\r\n                                        setPipeline(e.target.checked)\r\n                                    }} />}\r\n                            label=\"파이프라인\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\"\r\n                                    checked={templates}\r\n                                    onChange={(e) => {\r\n                                        setTemplates(e.target.checked)\r\n                                    }} />}\r\n                            label=\"템플릿\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\"\r\n                                    checked={collection}\r\n                                    onChange={(e) => {\r\n                                        setCollection(e.target.checked)\r\n                                    }} />}\r\n                            label=\"컬렉션\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\"\r\n                                    checked={jdbc}\r\n                                    onChange={(e) => {\r\n                                        setJdbc(e.target.checked)\r\n                                    }} />}\r\n                            label=\"JDBC\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\"\r\n                                    checked={comments}\r\n                                    onChange={(e) => {\r\n                                        setComments(e.target.checked)\r\n                                    }} />}\r\n                            label=\"템플릿 설명\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Box>\r\n                    이 클러스터의 데이터를 백업 하시겠습니까? (json 파일로 저장됩니다.)\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"outlined\" style={{ whiteSpace: \"nowrap\" }} onClick={() => handleDownload()}>백업</Button>\r\n                    <Button onClick={() => setDownloadModal(false)}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={uploadModal}\r\n                fullWidth\r\n                onClose={() => setUploadModal(false)}\r\n            >\r\n                <DialogTitle>\r\n                    데이터 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <input\r\n                        type='file'\r\n                        onChange={(e) => {\r\n                            setFile(e.target.files[0])\r\n                        }}\r\n                    />\r\n                    <Box m={2}>\r\n                    {\r\n                        uploadProgress ? <LinearProgress /> : <></>\r\n                    }\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"outlined\" style={{ whiteSpace: \"nowrap\" }} onClick={() => handleUpload()}>업로드</Button>\r\n                    <Button onClick={() => setUploadModal(false)}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    serverCheck: store.clusterReducers.serverCheck\r\n}))(Migration);"],"sourceRoot":""}
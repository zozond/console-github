{"version":3,"sources":["pages/indices/collection/ControlBox.js","pages/indices/collection/Source.js"],"names":["Box","styled","MuiBox","spacing","positions","Button","MuiButton","Grid","MuiGrid","options","timer","connect","store","authUser","dsearchReducers","collectionReducers","dispatch","collection","job","React","useState","actionOpen","setActionOpen","actionAnchorRef","useRef","connected","setConnected","processUI","setProcessUI","errorSnackbar","setErrorSnackbar","errorMessage","setErrorMessage","isRunningJob","useEffect","setCollection","clearTimeout","err","setTimeout","fetchJob","setCollectionJob","then","catch","error","handleClose","event","current","contains","target","handleAction","action","editCollectionAction","response","console","log","container","my","ml","item","xs","mt","style","alignSelf","CircularProgress","m","color","fontWeight","height","Fragment","Switch","onChange","editCollectionScheduleAction","checked","disabled","role","index","display","ButtonGroup","variant","ref","width","minWidth","maxWidth","size","onClick","prevOpen","Popper","open","anchorEl","undefined","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","map","option","MenuItem","key","handleMenuItemClick","Alert","iconMapping","success","fontSize","severity","info","border","LinearProgress","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","Typography","MuiTypography","Card","MuiCard","useStyles","makeStyles","theme","formControl","root","flexGrow","edit","typography","padding","TEMPLATE_LIST","TEMPLATE","NO_SELECTED","jdbcReducers","JdbcList","classes","editModal","setEditModal","mode","setMode","setAnchorEl","setOpen","setPlacement","sourceName","setSourceName","launcherYaml","setLauncherYaml","host","setHost","port","setPort","jdbcId","setJdbcId","cron","setCron","templateValue","setTemplateValue","invalid","setInvalid","aceEditor","toggleEditModal","currentTarget","editor","setValue","clearSelection","newPlacement","jdbcHitList","sourceAsMap","name","CardContent","align","mx","Table","TableBody","TableRow","TableCell","component","Link","cursor","filter","jdbcObj","source","invalidCheck","trim","test","length","isValidCron","Object","keys","editCollectionSourceAction","launcher","yaml","getValue","alert","p","TextField","value","fullWidth","alignItems","justifyContent","marginBottom","FormControl","InputLabel","Select","labelId","i","tabSize","placeholder","setOptions","useWorker","type","onMouseOver","prev","Boolean","Fade","timeout","className","Dialog","DialogTitle","DialogContent","DialogActions"],"mappings":"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","file":"static/js/71.03bd5972.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    CircularProgress,\r\n    Grid as MuiGrid,\r\n    Grow, LinearProgress,\r\n    MenuItem,\r\n    MenuList,\r\n    Paper,\r\n    Popper, Snackbar,\r\n    Switch,\r\n} from \"@material-ui/core\";\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport {\r\n    editCollectionAction,\r\n    editCollectionScheduleAction,\r\n    setCollection,\r\n    setCollectionJob\r\n} from \"../../../redux/actions/collectionActions\";\r\nimport {connect} from \"react-redux\";\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions);\r\nconst Grid = styled(MuiGrid)(spacing, positions);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     formControl: {\r\n//         minWidth: 250,\r\n//     },\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//     },\r\n//     edit: {\r\n//         width: '100%'\r\n//     },\r\n//     typography: {\r\n//         padding: theme.spacing(2),\r\n//     },\r\n// }));\r\n\r\nconst options = ['연속실행', '색인실행', '전파실행', '교체실행'];\r\n\r\n// let testScheduleFlag = true\r\nlet timer = null\r\n\r\n\r\nlet pollingDelay = 2000\r\nfunction ControlBox({dispatch, authUser, collection, job}) {\r\n    const [actionOpen, setActionOpen] = React.useState(false);\r\n    const actionAnchorRef = React.useRef(null);\r\n    const [connected, setConnected] = useState(false)\r\n    const [processUI, setProcessUI] = useState(false)\r\n    const [errorSnackbar, setErrorSnackbar] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n    // job이 있을 경우 데이터가 생김..\r\n    const isRunningJob = job['status'] ? true : false\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setCollection(collection['id']))\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setCollection(collection['id']))\r\n        \r\n        const fetchJob = () => {\r\n            dispatch(setCollectionJob(collection['id']))\r\n                .then(job => {\r\n                    setConnected(true); \r\n                    if (timer != null) {\r\n                        try {\r\n                            clearTimeout(timer)\r\n                            timer = null\r\n                        } catch(err) {}\r\n                    }\r\n                    timer = setTimeout(fetchJob, pollingDelay)\r\n                })\r\n                .catch(error => {\r\n                    setConnected(false); \r\n                    if (timer != null) {\r\n                        try {\r\n                            clearTimeout(timer)\r\n                            timer = null\r\n                        } catch(err) {}\r\n                    }\r\n                    timer = setTimeout(fetchJob, pollingDelay)\r\n                })\r\n        }\r\n        if (timer != null) {\r\n            try {\r\n                clearTimeout(timer)\r\n                timer = null\r\n            } catch(err) {}\r\n        }\r\n\r\n        timer = setTimeout(() => fetchJob(), 500);\r\n        return () => {\r\n            try {\r\n                clearTimeout(timer)\r\n            } catch(error) {\r\n                // ignore..\r\n            }\r\n        }\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleMenuItemClick = (event, option, index) => {\r\n        if ('연속실행' === option) {\r\n            handleAction('all')\r\n        } else if ('색인실행' === option) {\r\n            handleAction('indexing')\r\n        } else if ('전파실행' === option) {\r\n            handleAction('propagate')\r\n        } else if ('교체실행' === option) {\r\n            handleAction('expose')\r\n        }\r\n        setActionOpen(false);\r\n    };\r\n    const handleToggle = () => {\r\n        setActionOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event) => {\r\n        if (actionAnchorRef.current && actionAnchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setActionOpen(false);\r\n    };\r\n\r\n    function handleEditSchedule(event) {\r\n        setProcessUI(true)\r\n        dispatch(editCollectionScheduleAction(collection['id'], event.target.checked))\r\n            .then(response => {\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 2000)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setErrorMessage(\"\" + error)\r\n                setErrorSnackbar(true)\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 2000)\r\n            })\r\n    }\r\n    function handleAction(action) {\r\n        setProcessUI(true)\r\n        // actions: all, indexing, propagate, expose, stop_propagation, stop_indexing\r\n        dispatch(editCollectionAction(collection['id'], action))\r\n            .then(response => {\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 4000)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setErrorMessage(\"\" + error)\r\n                setErrorSnackbar(true)\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 4000)\r\n            })\r\n    }\r\n\r\n    function handleErrorSnackbarClose() {\r\n        setErrorSnackbar(false)\r\n    }\r\n\r\n    if (connected === false) {\r\n        return (\r\n            <Grid container my={0} ml={4}>\r\n                <Grid item xs={9} mt={2} style={{alignSelf: \"center\"}}>\r\n                    <Box>\r\n                        연결 중...\r\n                    </Box>\r\n                    <Box>\r\n                        <CircularProgress m={2} color=\"secondary\" />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    if (processUI) {\r\n        return (\r\n            <Grid container my={0} ml={4}>\r\n                <Grid item xs={3} >\r\n                    <Grid container my={3}>\r\n                        <Grid item xs={3} mt={2}>\r\n                            <Box style={{fontWeight: \"bold\"}}>스케쥴</Box>\r\n                        </Grid>\r\n                        <Grid item xs={9}>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={3}>\r\n                        <Grid item xs={3} mt={5} style={{height: '37px'}}>\r\n                            <b>상태</b>\r\n                        </Grid>\r\n                        <Grid item xs={9}>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid item xs={9} mt={2} style={{alignSelf: \"center\"}}>\r\n                    <Box>\r\n                        <CircularProgress m={2} color=\"secondary\" />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container my={3} ml={4}>\r\n                <Grid item xs={3} mt={2}>\r\n                    <Box style={{fontWeight: \"bold\"}}>스케쥴</Box>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    <Switch onChange={handleEditSchedule}\r\n                            checked={collection['scheduled']}\r\n                            disabled={!authUser.role.index}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container my={3} ml={4}>\r\n                <Grid item xs={3} mt={2} style={{height: '40px'}}>\r\n                    <b>상태</b>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    {/* 컨트롤 가능한 상태 */}\r\n                    <Box style={{display: isRunningJob === false && collection['scheduled'] === false ? \"block\" : \"none\"}}>\r\n                        <ButtonGroup variant=\"contained\" color=\"primary\" ref={actionAnchorRef}>\r\n                            <Button disabled={true}\r\n                                    style={{width: '100%', minWidth: \"150px\", maxWidth: \"300px\", color: \"black\"}}\r\n                            >\r\n                                수동 실행\r\n                            </Button>\r\n                            {authUser.role.index ?\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    onClick={handleToggle}\r\n                                    disabled={!authUser.role.index}\r\n                                >\r\n                                    <ArrowDropDownIcon/>\r\n                                </Button>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </ButtonGroup>\r\n                        <Popper open={actionOpen} anchorEl={actionAnchorRef.current} role={undefined}\r\n                                transition disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                    }}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList id=\"split-button-menu\">\r\n                                                {options.map((option, index) => (\r\n                                                    <MenuItem\r\n                                                        key={option}\r\n                                                        onClick={(event) => handleMenuItemClick(event, option, index)}\r\n                                                    >\r\n                                                        {option}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </Box>\r\n                    <Box style={{\r\n                        display: isRunningJob === false && collection['scheduled'] === true ? \"block\" : \"none\",\r\n                        width: '100%', minWidth: \"150px\", maxWidth: \"400px\", color: \"black\" }}\r\n                    >\r\n                        <Alert iconMapping={{ success: <ScheduleIcon fontSize=\"inherit\" /> }}\r\n                               severity=\"success\"\r\n                               style={{display: isRunningJob ? 'none' : 'flex'}}\r\n                        >스케쥴 대기중</Alert>\r\n                    </Box>\r\n\r\n                    <Box style={{\r\n                        display: (isRunningJob === true && collection['scheduled'] === false) || (isRunningJob === true && collection['scheduled'] === true) ? \"block\" : \"none\",\r\n                        width: '100%', minWidth: \"150px\", maxWidth: \"400px\", color: \"black\" }}\r\n                    >\r\n                        <Box style={{display: job['currentStep'] === 'FULL_INDEX' || job['currentStep'] === 'DYNAMIC_INDEX' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" style={{alignSelf: \"center\"}}/> }}\r\n                                   severity=\"info\"\r\n                                   action={<Button color=\"inherit\" style={{border: \"1px solid silver\"}} size=\"small\" onClick={() => handleAction('stop_indexing')}> 정지 </Button> }\r\n                            >\r\n                                <LinearProgress/>\r\n                                <Box mt={2}>\r\n                                    색인을 진행하고 있습니다.\r\n                                </Box>\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                        <Box style={{display: job['currentStep'] === 'PROPAGATE' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" style={{alignSelf: \"center\"}}/> }}\r\n                                   severity=\"info\"\r\n                                   action={<Button color=\"inherit\" style={{border: \"1px solid silver\"}} size=\"small\" onClick={() => handleAction('stop_propagation')}> 취소 </Button> }\r\n                            >\r\n                                <LinearProgress />\r\n                                <Box mt={2}>\r\n                                    전파를 진행하고 있습니다.\r\n                                </Box>\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                        <Box style={{display: job['currentStep'] === 'EXPOSE' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" /> }}\r\n                                   severity=\"info\"\r\n                            >\r\n                                <LinearProgress />\r\n                                교체를 진행하고 있습니다.\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                    </Box>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right'}}\r\n                autoHideDuration={6000}\r\n                open={errorSnackbar}\r\n                onClose={handleErrorSnackbarClose}\r\n                severity=\"error\"\r\n                message={\"요청이 실패되었습니다. \" + errorMessage}\r\n                key={\"errorSnackbar\"}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ authUser: store.dsearchReducers.authUser, ...store.collectionReducers }))(ControlBox);\r\n","import React, {useEffect, useState, useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Fade,\r\n    Grid as MuiGrid,\r\n    Link,\r\n    MenuItem,\r\n    Paper,\r\n    Popper,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TextField,\r\n    Typography as MuiTypography,\r\n    FormControl,\r\n    InputLabel,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport {connect} from \"react-redux\";\r\nimport {editCollectionSourceAction, setCollection} from \"../../../redux/actions/collectionActions\";\r\nimport {isValidCron} from 'cron-validator'\r\nimport ControlBox from \"./ControlBox\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-yaml\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\n\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions);\r\nconst Grid = styled(MuiGrid)(spacing, positions);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst TEMPLATE_LIST = [\"ndjson\", \"csv\", \"file\", \"procedure\", \"database\"]\r\nconst TEMPLATE = {\r\n    \"ndjson\" : \r\n`scheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: ndjson\r\npath: /data/source/search-prod.ndjson\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: true\r\nthreadSize: 1`,\r\n\r\n    \"csv\" : \r\n`scheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: csv\r\npath: /data/source/search-prod.csv\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: true\r\nthreadSize: 1`,\r\n\r\n\"file\" : \r\n`scheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: file\r\npath: /data/source/prodExt_dump\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: true\r\nthreadSize: 1\r\nheaderText:\"name,color,price\"\r\ndelimiter: \"^\"`,\r\n\r\n    \"procedure\": \r\n`scheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: procedure\r\nbulkSize: 1000\r\ndriverClassName: \"Altibase.jdbc.driver.AltibaseDriver\"\r\nfilterClass: \"com.danawa.fastcatx.indexer.filter.DanawaProductFilter\"\r\nurl: \"jdbc:Altibase://localhost:20200/DANAWA_ALTI\"\r\nuser: \"root\"\r\npassword: \"qwerty123456\"\r\nprocedureName: \"procedureName1\"\r\ndumpFormat: \"konan\"\r\ngroupSeq: 1\r\nbwlimit: \"10240\"\r\npath: \"/data/product/VM\"\r\nrsyncIp: \"remote server IP\"\r\nrsyncPath: \"search_data_alti\"\r\nencoding: CP949\r\nprocedureSkip: true\r\nrsyncSkip: true\r\nthreadSize: 1\r\n`,\r\n\r\n    \"database\": \r\n`scheme: http\r\nhost: localhost\r\nport: 9200\r\nbulkSize: 10000\r\nfetchSize: 10000\r\ntype: jdbc\r\npipeLine: \"pipeline\"\r\nthreadSize: 1\r\ndataSQL : \"SELECT * FROM myTable\"`\r\n};\r\nconst NO_SELECTED = 'NO_SELECTED';\r\nconst DEFAULT_CRON = '0 0 * * *'\r\nconst DEFAULT_YAML = `\r\n============================= ndjson / csv template\r\nscheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: ndjson /csv\r\npath: /data/source/search-prod.ndjson   or   /data/source/search-prod.csv\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: false\r\nthreadSize: 1\r\n\r\n============================= rsync template\r\nscheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: procedure\r\nbulkSize: 1000\r\ndriverClassName: \"Altibase.jdbc.driver.AltibaseDriver\"\r\nfilterClass: \"com.danawa.fastcatx.indexer.filter.DanawaProductFilter\"\r\nurl: \"jdbc:Altibase://localhost:20200/DANAWA_ALTI\"\r\nuser: \"root\"\r\npassword: \"qwerty123456\"\r\nprocedureName: \"procedureName1\"\r\ndumpFormat: \"konan\"\r\ngroupSeq: 1\r\nbwlimit: \"10240\"\r\npath: \"/data/product/VM\"\r\nrsyncIp: \"remote server IP\"\r\nrsyncPath: \"search_data_alti\"\r\nencoding: CP949\r\nprocedureSkip: true\r\nrsyncSkip: true\r\nthreadSize: 1\r\n\r\n============================= DB template\r\nscheme: http\r\nhost: localhost\r\nport: 9200\r\nbulkSize: 10000\r\nfetchSize: 10000\r\ntype: jdbc\r\npipeLine: \"pipeline\"\r\nthreadSize: 1\r\ndataSQL : \"SELECT * FROM myTable\"\r\n`;\r\n\r\nfunction Source({dispatch, authUser, collection, JdbcList}) {\r\n    const classes = useStyles();\r\n    const [editModal, setEditModal] = useState(null)\r\n    const [mode, setMode] = useState(\"VIEW\")\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [open, setOpen] = React.useState(null);\r\n    const [placement, setPlacement] = React.useState();\r\n\r\n    const [sourceName, setSourceName] = useState(\"\")\r\n    const [launcherYaml, setLauncherYaml] = useState(\"\")\r\n    const [host, setHost] = useState(\"\")\r\n    const [port, setPort] = useState(\"\")\r\n    const [jdbcId, setJdbcId] = useState(NO_SELECTED)\r\n    const [cron, setCron] = useState(\"\")\r\n    const [templateValue, setTemplateValue] = useState(TEMPLATE_LIST[0]);\r\n\r\n    const [invalid, setInvalid] = useState({})\r\n\r\n    const aceEditor = useRef(null)\r\n\r\n    useEffect(() => {\r\n        setInvalid({})\r\n        if (collection['sourceName'] === undefined || collection['sourceName'] === null || collection['sourceName'] === \"\") {\r\n            /* FORCE_EDIT(생성하고 아무런 데이터가 없을 때) 모드일때만 */\r\n            setMode(\"FORCE_EDIT\");\r\n            // aceEditor.current.editor.setValue(DEFAULT_YAML)\r\n            aceEditor.current.editor.setValue(TEMPLATE[TEMPLATE_LIST[0]]);\r\n        } else {\r\n            setSourceName(collection['sourceName']);\r\n            setHost((collection['launcher']||{})['host']||\"\");\r\n            setPort((collection['launcher']||{})['port']||\"\");\r\n            // setJdbcId(collection['jdbcId']);\r\n            setJdbcId(collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId'])\r\n            setCron(collection['cron']);\r\n            setLauncherYaml((collection['launcher']||{})['yaml']||\"\");\r\n            aceEditor.current.editor.setValue((collection['launcher']||{})['yaml']||\"\")\r\n            aceEditor.current.editor.clearSelection()\r\n        }\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (mode === \"EDIT\") {\r\n                setSourceName(collection['sourceName']);\r\n                setHost((collection['launcher']||{})['host']||\"\");\r\n                setPort((collection['launcher']||{})['port']||\"\");\r\n                // setJdbcId(collection['jdbcId']);\r\n                setJdbcId(collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId'])\r\n                setCron(collection['cron']);\r\n                setLauncherYaml((collection['launcher']||{})['yaml']||\"\");\r\n                aceEditor.current.editor.setValue((collection['launcher']||{})['yaml']||\"\")\r\n                aceEditor.current.editor.clearSelection()\r\n            }\r\n        } catch (error) {\r\n            console.log('change ace editor')\r\n        }\r\n    }, [mode]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    function toggleEditModal(event) {\r\n        setEditModal(editModal === null ? event.currentTarget : null)\r\n    }\r\n\r\n    const handleClick = (newPlacement) => (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setOpen((prev) => placement !== newPlacement || !prev);\r\n        setPlacement(newPlacement);\r\n    }\r\n\r\n    function handleSaveProcess() {\r\n        setInvalid({})\r\n        let invalidCheck = {}\r\n        if (sourceName.trim() === \"\") {\r\n            invalidCheck['sourceName'] = true\r\n        }\r\n        if (host.trim() === \"\" || !/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/gi.test(host)) {\r\n            invalidCheck['host'] = true\r\n        }\r\n        if (port === \"\") {\r\n            invalidCheck['port'] = true\r\n        }\r\n        if(cron.length === 0){\r\n            setCron(DEFAULT_CRON)\r\n        }else if (!isValidCron(cron)) {\r\n            invalidCheck['cron'] = true\r\n        }\r\n\r\n        if (Object.keys(invalidCheck).length > 0) {\r\n            setInvalid(invalidCheck)\r\n            return false\r\n        }\r\n        \r\n        dispatch(editCollectionSourceAction(collection['id'], {\r\n            sourceName,\r\n            cron: (cron.length === 0 ? DEFAULT_CRON : cron),\r\n            jdbcId: (jdbcId === NO_SELECTED ? '' : jdbcId),\r\n            launcher: {\r\n                yaml: aceEditor.current.editor.getValue() || '',\r\n                host,\r\n                port,\r\n            }\r\n        })).then(response => {\r\n            dispatch(setCollection(collection['id']))\r\n            setMode(\"VIEW\")\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(error)\r\n        })\r\n    }\r\n\r\n    const handleTemplateValue = (event) => {\r\n        setTemplateValue(event.target.value);\r\n        aceEditor.current.editor.setValue(TEMPLATE[event.target.value]);\r\n    }\r\n\r\n    let jdbcHitList = [\r\n        { id: NO_SELECTED, sourceAsMap: {name: '선택안함'} },\r\n        ...((JdbcList['hits']||{})['hits']||[])\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <br/>\r\n\r\n            <Card>\r\n                <CardContent>\r\n                    <Box style={{display: mode === \"VIEW\" ? \"block\" : \"none\"}}>\r\n                        <Grid container>\r\n                            <Grid item xs={10}>\r\n\r\n                                <ControlBox />\r\n\r\n                            </Grid>\r\n                            <Grid item xs={2} align={\"right\"}>\r\n                                {authUser.role.index ? <Button mx={1} variant={\"outlined\"} onClick={() => setMode(\"EDIT\")}>\r\n                                    수정\r\n                                </Button> : <></>}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Box>\r\n                                    <Table>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>파라미터</TableCell>\r\n                                                <TableCell>\r\n                                                    <Link style={{cursor: \"pointer\"}}\r\n                                                          onClick={toggleEditModal}\r\n                                                    >YAML</Link>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행호스트</TableCell>\r\n                                                <TableCell>{(collection['launcher'] || {})['host']}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행포트</TableCell>\r\n                                                <TableCell>{(collection['launcher'] || {})['port'] === 0 ? \"\" : (collection['launcher'] || {})['port']}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>JDBC</TableCell>\r\n                                                <TableCell>\r\n                                                    {\r\n                                                        jdbcHitList.filter(jdbcObj => (collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId']) === jdbcObj['id'])\r\n                                                            .map(jdbcObj => {\r\n                                                                const source = jdbcObj['sourceAsMap']\r\n                                                                return (\r\n                                                                    <React.Fragment key={source['name']}>\r\n                                                                        {source['name']}\r\n                                                                    </React.Fragment>\r\n                                                                )\r\n                                                            })\r\n                                                    }\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>크론주기</TableCell>\r\n                                                <TableCell> {collection['cron']} </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n\r\n\r\n                    {/*======================================= EDIT MODE  ===========================================*/}\r\n\r\n                    <Box style={{display: mode === \"EDIT\" || mode === \"FORCE_EDIT\" ? \"block\" : \"none\"}}>\r\n                        <Grid container>\r\n                            <Grid item xs={8}>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={4} align={\"right\"}>\r\n                                <Button mx={1}\r\n                                        variant={\"outlined\"}\r\n                                        onClick={handleSaveProcess}\r\n                                        style={{display: authUser.role.index ? 'inline' : 'none'}}\r\n                                >\r\n                                    저장\r\n                                </Button>\r\n                                <Button style={{display: authUser.role.index ? mode === 'EDIT' ? \"inline\" : \"none\" : \"none\"}} mx={1}\r\n                                        variant={\"outlined\"}\r\n                                        onClick={() => setMode(\"VIEW\")}\r\n                                >\r\n                                    취소\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Box p={5}>\r\n                                    <Table>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>이름</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField value={sourceName}\r\n                                                               onChange={event => setSourceName(event.target.value)}\r\n                                                               fullWidth\r\n                                                               error={invalid['sourceName']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>파라미터 YAML</TableCell>\r\n                                                <TableCell>\r\n                                                    {/*<TextareaAutosize value={launcherYaml}*/}\r\n                                                    {/*                  onChange={event => setLauncherYaml(event.target.value)}*/}\r\n                                                    {/*                  style={{width: \"100%\", minHeight: \"200px\"}}*/}\r\n                                                    {/*/>*/}\r\n                                                    <Box display=\"flex\" alignItems=\"center\"  justifyContent=\"space-between\" width=\"100%\" marginBottom=\"8px\">\r\n                                                        <div></div>\r\n                                                        <FormControl style={{width: \"200px\"}}>\r\n                                                            <InputLabel id=\"demo-simple-select-label\">수집소스 템플릿</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-label\"\r\n                                                                id=\"demo-simple-select\"\r\n                                                                value={templateValue}\r\n                                                                onChange={handleTemplateValue}\r\n                                                            >\r\n                                                                {\r\n                                                                    TEMPLATE_LIST.map((item, i) => (<MenuItem key={i} value={item}>{item}</MenuItem>))\r\n                                                                }\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Box>\r\n                                                    <AceEditor\r\n                                                        ref={aceEditor}\r\n                                                        mode=\"yaml\"\r\n                                                        theme=\"kuroir\"\r\n                                                        fontSize=\"15px\"\r\n                                                        height={\"400px\"}\r\n                                                        width=\"100%\"\r\n                                                        tabSize={2}\r\n                                                        placeholder=\"type: 'jdbc'\"\r\n                                                        setOptions={{ useWorker: false }}\r\n                                                        onChange={() => {\r\n                                                            let yaml = aceEditor.current.editor.getValue()\r\n                                                            if (launcherYaml !== yaml) {\r\n                                                                setLauncherYaml(yaml)\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>JDBC</TableCell>\r\n                                                <TableCell>\r\n                                                    <Select value={jdbcId}\r\n                                                            onChange={event => setJdbcId(event.target.value)}\r\n                                                            style={{minWidth: \"100%\"}}\r\n                                                            error={invalid['jdbcId']||false}\r\n                                                    >\r\n                                                        {\r\n                                                            jdbcHitList.map((jdbcObj, index) => {\r\n                                                                return (\r\n                                                                    <MenuItem key={index}\r\n                                                                              value={jdbcObj['id']}\r\n                                                                    >\r\n                                                                        {(jdbcObj['sourceAsMap']||{})['name']||\"\"}\r\n                                                                    </MenuItem>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </Select>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행호스트</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField value={host}\r\n                                                               onChange={event => setHost(event.target.value)}\r\n                                                               fullWidth\r\n                                                               placeholder={\"127.0.0.1\"}\r\n                                                               error={invalid['host']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행포트</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField value={port}\r\n                                                               onChange={event => setPort(event.target.value)}\r\n                                                               fullWidth\r\n                                                               placeholder={\"5005\"}\r\n                                                               type={\"number\"}\r\n                                                               error={invalid['port']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>크론주기</TableCell>\r\n                                                <TableCell>\r\n                                                    <Grid container>\r\n                                                        <Grid item xs={11}>\r\n                                                            <TextField value={cron}\r\n                                                                       onChange={event => setCron(event.target.value)}\r\n                                                                       fullWidth\r\n                                                                       placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                       error={invalid['cron']||false}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                        <Grid item xs={1}>\r\n                                                            <Link onMouseOver={handleClick('top')}>예제</Link>\r\n                                                            <Popper open={Boolean(open)} anchorEl={anchorEl}\r\n                                                                    placement={placement} transition>\r\n                                                                {({TransitionProps}) => (\r\n                                                                    <Fade {...TransitionProps} timeout={350}>\r\n                                                                        <Paper>\r\n                                                                            <Typography className={classes.typography}>\r\n                                                                                예제<br/>\r\n                                                                                */1 * * * * : 1분마다 한 번씩<br/>\r\n                                                                                */5 * * * * : 5분마다 한 번씩<br/>\r\n                                                                                0 5 1 * * : 매달 1일 새벽 5시에 실행.<br/>\r\n                                                                                0 5,11 * * 0,3 : 매주 일요일과 수요일 새벽 5시와 밤\r\n                                                                                11시.<br/>\r\n                                                                                0 5,11 * * * : 새벽 5시와 밤 11시\r\n                                                                            </Typography>\r\n                                                                        </Paper>\r\n                                                                    </Fade>\r\n                                                                )}\r\n                                                            </Popper>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog open={Boolean(editModal)}\r\n                    fullWidth\r\n                    onClose={toggleEditModal}\r\n            >\r\n                <DialogTitle>\r\n                    설정\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <pre>\r\n                        {(collection['launcher'] || {})['yaml']}\r\n                    </pre>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={toggleEditModal}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.collectionReducers,\r\n    ...store.jdbcReducers\r\n}))(Source);\r\n"],"sourceRoot":""}
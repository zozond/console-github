{"version":3,"sources":["redux/actions/clusterInfoActions.js","pages/indices/cluster/index.js"],"names":["client","Client","useStyles","makeStyles","headerField","fontSize","fontWeight","headerValue","primaryShard","border","replicaShard","Card","styled","MuiCard","spacing","sizing","Divider","MuiDivider","Grid","MuiGrid","TableRow","MuiTableRow","palette","TableCell","MuiTableCell","Shard","Button","ClusterSummary","cluster","classes","Fragment","Typography","variant","gutterBottom","display","mt","CardContent","container","alignItems","justify","item","xs","md","className","nodes","count","total","Number","toLocaleString","indices","shards","docs","store","size","Hidden","smUp","ShardButton","prirep","label","ClusterShardMap","React","useState","checkedA","checkedB","state","setState","filter","setFilter","handleChange","event","target","name","checked","indicesArr","Object","values","forEach","indicesInfo","status","index","charAt","push","newMap","Map","isFilterIndex","filterSplit","trim","split","isMatched","i","length","String","startsWith","match","error","nodesRow","assignedArr","unassignedArr","indicesRow","shardsRow","node","shard","set","filterUnassignedArr","matchedCount","indexObj","history","useHistory","style","overflow","Box","my","TextField","fullWidth","placeholder","value","onChange","FormControlLabel","control","Checkbox","color","Table","TableBody","map","nodeRow","nodeRowIndex","key","align","minWidth","textOverflow","ip","master","role","rowSpan","keys","colSpan","TableHead","indicesInfoIndex","textAlign","backgroundColor","health","pink","yellow","Link","cursor","onClick","uuid","pri","rep","get","element","elementIndex","data","dataIndex","nodeName","connect","clusterInfoReducers","dispatch","useEffect","call","uri","then","response","type","SET_INDICES_INFO","payload","catch","err","console","SET_CLUSTER_INFO","SET_NODES_INFO","SET_SHARDS_INFO","title"],"mappings":"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","file":"static/js/69.71b03296.chunk.js","sourcesContent":["import {SET_CLUSTER_INFO,SET_NODES_INFO, SET_INDICES_INFO,SET_HEALTH_INFO,SET_SHARDS_INFO} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setShardsInfoActions = key => dispatch => client.call({uri: `/elasticsearch/_cat/shards?format=json`})\r\n    .then(response => dispatch({type: SET_SHARDS_INFO, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const setNodesInfoActions = key => dispatch => client.call({uri: `/elasticsearch/_cat/nodes?s=name:asc&format=json`})\r\n    .then(response => dispatch({type: SET_NODES_INFO, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const setIndicesInfoActions = key => dispatch => client.call({uri: `/elasticsearch/_cat/indices?format=json`})\r\n    .then(response => dispatch({type: SET_INDICES_INFO, payload: response.data}))\r\n    .catch(err => console.error(err))    \r\n\r\nexport const setClusterInfoActions = key => dispatch => client.call({uri: `/elasticsearch/_cluster/stats?human`})\r\n    .then(response => dispatch({type: SET_CLUSTER_INFO, payload: response.data}))\r\n    .catch(err => console.error(err))     \r\n\r\nexport const setHealthInfoActions = key => dispatch => client.call({uri: `/elasticsearch/_cluster/health`})\r\n    .then(response => dispatch({type: SET_HEALTH_INFO, payload: response.data}))\r\n    .catch(err => console.error(err))    \r\n \r\n\r\n    ","import React, {useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    setClusterInfoActions,\r\n    setIndicesInfoActions,\r\n    setNodesInfoActions,\r\n    setShardsInfoActions\r\n} from '@actions/clusterInfoActions'\r\nimport Helmet from \"react-helmet\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Divider as MuiDivider,\r\n    FormControlLabel,\r\n    Grid as MuiGrid,\r\n    Hidden,\r\n    Table,\r\n    TableBody,\r\n    TableCell as MuiTableCell,\r\n    TableHead,\r\n    TableRow as MuiTableRow,\r\n    TextField,\r\n    Typography,\r\n    Link,\r\n} from \"@material-ui/core\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {connect} from \"react-redux\";\r\nimport {pink, yellow} from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles({\r\n    headerField: {fontSize: '1.2em', fontWeight: \"bold\"},\r\n    headerValue: {fontSize: '1.2em', fontWeight: \"bold\"},\r\n    primaryShard: {border: \"1px solid\",},\r\n    replicaShard: {border: \"1px dashed\", },\r\n});\r\n\r\nconst Card = styled(MuiCard)(spacing, sizing);\r\nconst Divider = styled(MuiDivider)(spacing, sizing);\r\nconst Grid = styled(MuiGrid)(spacing, sizing);\r\nconst TableRow = styled(MuiTableRow)(spacing, sizing, palette);\r\nconst TableCell = styled(MuiTableCell)`\r\n    border: 1px solid rgba(224, 224, 224, 1);\r\n    padding: 3px;\r\n`;\r\nconst Shard = styled(Button)`\r\n    min-width: 25px;\r\n    max-width: 25px;\r\n    width: 25px;\r\n    margin: 2px;\r\n    min-height: 25px;\r\n    max-height: 25px;\r\n    height: 25px;\r\n    font-size: 0.9em;\r\n    padding: 2px;\r\n`;\r\n\r\nfunction ClusterSummary({cluster}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h4\" gutterBottom display=\"inline\">\r\n                총 사용량\r\n            </Typography>\r\n            <Card mt={2}>\r\n                <CardContent>\r\n                    <Grid container alignItems={\"center\"} justify={\"space-between\"} mt={3}>\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerField}>노드</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerValue}>{cluster.nodes.count.total ? Number(cluster.nodes.count.total).toLocaleString() : \"0\"}</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerField}>인덱스</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerValue}>{cluster.indices.count ? Number(cluster.indices.count).toLocaleString() : \"0\"}</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerField}>샤드</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerValue}>{cluster.indices.shards.total ? Number(cluster.indices.shards.total).toLocaleString() : \"0\"}</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerField}>문서</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerValue}>{cluster.indices.docs.count ? Number(cluster.indices.docs.count).toLocaleString() : \"0\"}</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerField}>용량</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} md={1}>\r\n                            <Typography className={classes.headerValue}>{cluster.indices.store.size}</Typography>\r\n                        </Grid>\r\n                        <Hidden smUp>\r\n                            <Grid item xs={3}> </Grid>\r\n                            <Grid item xs={3}> </Grid>\r\n                        </Hidden>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction ShardButton({prirep, label}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <Shard className={prirep === 'p' ? classes.primaryShard : prirep === 'r' ? classes.replicaShard : {} } variant=\"outlined\">\r\n                {label}\r\n            </Shard>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction ClusterShardMap({indices, nodes, shards}) {\r\n    const [state, setState] = React.useState({\r\n        checkedA: false,\r\n        checkedB: false,\r\n    });\r\n    const [filter, setFilter] = React.useState(\"\")\r\n\r\n    const handleChange = (event) => {\r\n        setState({...state, [event.target.name]: event.target.checked});\r\n    };\r\n\r\n    //닫힌 인덱스, 특수인덱스에 따른 처리\r\n    let indicesArr = []\r\n    Object.values(indices).forEach(indicesInfo => {\r\n        if (state.checkedA && indicesInfo.status === 'close') {\r\n            indicesArr.push(indicesInfo)\r\n        } else if (state.checkedB && indicesInfo.index.charAt(0) === '.') {\r\n            indicesArr.push(indicesInfo)\r\n        } else if (indicesInfo.status === 'open' && indicesInfo.index.charAt(0) !== '.') {\r\n            indicesArr.push(indicesInfo)\r\n        }\r\n    })\r\n\r\n    //샤드 표시를 위한 MAP 생성\r\n    let newMap = new Map()\r\n    Object.values(nodes).forEach((nodesRow) => {\r\n        let assignedArr = []\r\n        let unassignedArr = []\r\n        Object.values(indicesArr).forEach((indicesRow) => {\r\n            Object.values(shards).forEach((shardsRow) => {\r\n                if (indicesRow.index === shardsRow.index && nodesRow.name === shardsRow.node) {\r\n                    assignedArr.push({\r\n                        node: shardsRow.node,\r\n                        index: shardsRow.index,\r\n                        shard: shardsRow.shard,\r\n                        state: shardsRow.state,\r\n                        prirep: shardsRow.prirep\r\n                    })\r\n                } else if (indicesRow.index === shardsRow.index && shardsRow.state === 'UNASSIGNED') {\r\n                    unassignedArr.push({\r\n                        node: 'unassigned',\r\n                        index: shardsRow.index,\r\n                        shard: shardsRow.shard,\r\n                        state: shardsRow.state,\r\n                        prirep: shardsRow.prirep\r\n                    })\r\n                }\r\n            })\r\n        })\r\n        newMap.set(nodesRow.name, assignedArr)\r\n\r\n        let filterUnassignedArr = []\r\n        for (let i = 0; i < unassignedArr.length; i++) {\r\n            if(!isFilterIndex(unassignedArr[i]['index'])) {\r\n                filterUnassignedArr.push(unassignedArr[i])\r\n            }\r\n        }\r\n\r\n        if (filterUnassignedArr.length > 0) {\r\n            newMap.set('unassigned', filterUnassignedArr)\r\n        }\r\n    })\r\n\r\n    function isFilterIndex(index) {\r\n        const filterSplit = filter.trim().split(\",\")\r\n        if (filter.trim() === \"\" || filterSplit[0] === \"\") {\r\n            return false\r\n        }\r\n\r\n        let isMatched = true\r\n        for (let i = 0; i < filterSplit.length; i++) {\r\n            try {\r\n                if (String(index).startsWith(filterSplit[i].trim()) || String(index).match(filterSplit[i].trim())) {\r\n                    isMatched = false;\r\n                    break;\r\n                }\r\n            } catch(error) {\r\n                // ignore\r\n            }\r\n        }\r\n        return isMatched;\r\n    }\r\n\r\n    const matchedCount = Object.values(indicesArr).filter(indexObj => !isFilterIndex(indexObj['index'])).length;\r\n    \r\n    const history = useHistory();\r\n    \r\n    function moveIndexDetail(uuid) {\r\n        history.push(`./indices/${uuid}`)\r\n    }\r\n\r\n    function moveServerDetail(nodeName) {\r\n        history.push(`./management/server?nodename=${nodeName}`);\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h4\" gutterBottom display=\"inline\">\r\n                샤드 배치\r\n            </Typography>\r\n            <Card mt={2} style={{overflow: \"auto\"}}>\r\n                <CardContent>\r\n                    <Box my={3}>\r\n                        <TextField fullWidth placeholder={\"인덱스 필터 (ex: product, example-index, -index)\"} value={filter} onChange={event => setFilter(event.target.value)}/>\r\n                    </Box>\r\n                    <FormControlLabel control={ <Checkbox checked={state.checkedA} onChange={handleChange} name=\"checkedA\" color=\"primary\"/> } label=\"닫힌 인덱스\" />\r\n                    <FormControlLabel control={ <Checkbox checked={state.checkedB} onChange={handleChange} name=\"checkedB\" color=\"primary\"/> } label=\". 특수 인덱스\" />\r\n\r\n                    {\r\n                        matchedCount === 0 ?\r\n                            <Table>\r\n                                <TableBody>\r\n                                    {\r\n                                        Object.values(nodes).map((nodeRow, nodeRowIndex) => {\r\n                                            return (\r\n                                            <TableRow key={nodeRowIndex}>\r\n                                                <TableCell align=\"center\" style={{\r\n                                                    fontSize: \"0.5em\",\r\n                                                    minWidth: \"80px\",\r\n                                                    textOverflow: \"ellipsis\",\r\n                                                    overflow: \"hidden\"\r\n                                                }}>\r\n                                                    <Typography>{nodeRow.name}</Typography>\r\n                                                    <Typography>{nodeRow.ip}</Typography>\r\n                                                    <Typography>{nodeRow.master === '*' ? '마스터노드' : ''}</Typography>\r\n                                                    <Typography>{nodeRow.role}</Typography>\r\n                                                </TableCell>\r\n                                                {\r\n                                                    nodeRowIndex === 0 ?\r\n                                                        <TableCell rowSpan={Object.keys(nodes).length} colSpan={20} align=\"center\">\r\n                                                            선택된 인덱스가 없습니다.\r\n                                                        </TableCell>\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                            </TableRow>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                            :\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell style={{\r\n                                            fontSize: \"0.5em\",\r\n                                            minWidth: \"100px\",\r\n                                            textOverflow: \"ellipsis\",\r\n                                            overflow: \"hidden\"\r\n                                        }}>\r\n                                        </TableCell>\r\n                                        {\r\n                                            Object.values(indicesArr).map((indicesInfo, indicesInfoIndex) => {\r\n                                                    if(isFilterIndex(indicesInfo['index'])) {\r\n                                                        return null\r\n                                                    }\r\n                                                    return (\r\n                                                        <TableCell key={indicesInfoIndex} style={{\r\n                                                            fontSize: \"1em\",\r\n                                                            minWidth: \"100px\",\r\n                                                            textOverflow: \"ellipsis\",\r\n                                                            overflow: \"hidden\",\r\n                                                            textAlign: \"left\",\r\n                                                            backgroundColor: indicesInfo.health === 'red' ? pink['100'] : indicesInfo.health === 'yellow' ? yellow['A400'] : '#ffffff'\r\n                                                        }}>\r\n                                                            <Link style={{cursor: \"pointer\"}} onClick={() => moveIndexDetail(indicesInfo.uuid)}>{indicesInfo.index}</Link>\r\n                                                            <Typography>샤드: P({indicesInfo.pri ? Number(indicesInfo.pri).toLocaleString() : \"0\"}) R({indicesInfo.rep ? Number(indicesInfo.rep).toLocaleString() : \"0\"})</Typography>\r\n                                                            <Typography>문서: {indicesInfo['docs.count'] ? Number(indicesInfo['docs.count']).toLocaleString() : \"0\"}</Typography>\r\n                                                            <Typography>크기: {indicesInfo['store.size']}</Typography>\r\n                                                            {/*<Typography>상태: {indicesInfo.health}</Typography>*/}\r\n                                                        </TableCell>\r\n                                                    )\r\n                                                }\r\n                                            )}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        newMap.get('unassigned') ?\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">미할당</TableCell>\r\n                                                {\r\n                                                    Object.values(indicesArr).map((element, elementIndex) => {\r\n                                                        if(isFilterIndex(element.index)) {\r\n                                                            return null\r\n                                                        }\r\n                                                        return (\r\n                                                            <TableCell key={elementIndex}>\r\n                                                                {\r\n                                                                    Object.values(newMap.get('unassigned')).map((data, dataIndex) => {\r\n                                                                        if (element.index === data.index) {\r\n                                                                            return (\r\n                                                                                <ShardButton prirep={data.prirep} label={data.shard} key={dataIndex} />\r\n                                                                            )\r\n                                                                        }else{\r\n                                                                            return <></>;\r\n                                                                        }\r\n                                                                    })\r\n                                                                }\r\n                                                            </TableCell>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </TableRow>\r\n                                            : <></>\r\n                                    }\r\n                                    {Object.values(nodes).map((nodeRow, nodeRowIndex) => \r\n                                        <TableRow key={nodeRowIndex}>\r\n                                            <TableCell align=\"center\">\r\n                                            <Link style={{cursor: \"pointer\"}} onClick={() => moveServerDetail(nodeRow.name)}>{nodeRow.name}</Link>\r\n                                                <Typography>{nodeRow.ip}</Typography>\r\n                                                <Typography>{nodeRow.master === '*' ? '마스터노드' : ''}</Typography>\r\n                                                <Typography>{nodeRow.role}</Typography>\r\n                                            </TableCell>\r\n                                            {\r\n                                                Object.values(indicesArr).map((element, elementIndex) => {\r\n                                                    if(isFilterIndex(element.index)) {\r\n                                                        return null\r\n                                                    }\r\n                                                    return (\r\n                                                        <TableCell key={elementIndex}>\r\n                                                            {\r\n                                                                Object.values(newMap.get(nodeRow.name)).map((data, dataIndex) => {\r\n                                                                    if (element.index === data.index) {\r\n                                                                        return <ShardButton key={dataIndex} prirep={data.prirep} label={data.shard} />\r\n                                                                    }else{\r\n                                                                        return <></>\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        </TableCell>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                    }\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction ClusterInfo({dispatch, shards, nodes, indices, cluster}) {\r\n    useEffect(() => {\r\n        dispatch(setIndicesInfoActions())\r\n        dispatch(setClusterInfoActions())\r\n        dispatch(setNodesInfoActions())\r\n        dispatch(setShardsInfoActions())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"클러스터\"/>\r\n\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                클러스터\r\n            </Typography>\r\n\r\n            <br/>\r\n\r\n            <Divider my={6}/>\r\n\r\n            {/*{cluster.cluster_name}*/}\r\n\r\n            <ClusterSummary cluster={cluster}/>\r\n\r\n            <br/>\r\n\r\n            <ClusterShardMap indices={indices} nodes={nodes} shards={shards}/>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    indices: store.clusterInfoReducers.indices,\r\n    shards: store.clusterInfoReducers.shards,\r\n    nodes: store.clusterInfoReducers.nodes,\r\n    cluster: store.clusterInfoReducers.cluster\r\n}))(ClusterInfo);\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/DynamicTable/index.js","pages/analysis/dictionary/Set.js","pages/analysis/dictionary/Synonym.js","pages/analysis/dictionary/Space.js","pages/analysis/dictionary/Synonym2Way.js","pages/analysis/dictionary/Custom.js","pages/analysis/dictionary/WrapperTabPanel.js","utils.js"],"names":["useStyles","makeStyles","theme","input","border","DynamicTable","dataList","from","limit","showCheckBox","onSelectClick","isEdit","onUpdate","onDelete","classes","useState","selected","setSelected","array","setArray","useEffect","map","data","fields","field","rowCount","forEach","length","rows","i","cols","j","push","id","text","splice","TableContainer","component","Paper","Table","size","TableHead","TableRow","index","Fragment","key","TableCell","padding","Checkbox","defaultChecked","onChange","event","checked","ids","row","handleSelectAllClick","target","Box","align","TableBody","rowIdx","col","colIdx","includes","concat","filter","select","InputBase","className","value","cloneArray","slice","handleChange","fullWidth","b","justifyContent","display","width","IconButton","iconButton","onClick","updateFields","console","log","handleEdit","OfflinePin","Delete","prototype","PropTypes","isRequired","Button","styled","MuiButton","spacing","sizing","palette","MuiBox","formControl","minWidth","form","alignItems","marginLeft","flex","borderBottom","divider","height","margin","right","textAlign","checkedList","searchedKeyword","connect","store","authUser","dsearchReducers","dictionary","setting","result","dataSet","dispatch","useDispatch","searchColumns","setSearchColumns","isMatch","setMatch","mode","setMode","pageNum","setPageNum","rowSize","newCreateId","React","useRef","newCreateKeyword","newCreateValue","newKeyword","deleteDialogOpen","setDeleteDialogOpen","createDialogOpen","setCreateDialogOpen","message","setMessage","resetFlag","setResetFlag","resetMessage","setResetMessage","alertFlag","setAlertFlag","alertMessage","setAlertMessage","alertColor","setAlertColor","moreMenu","setMoreMenu","overwrite","setOverwrite","resetDialogOpen","setResetDialogOpen","fileDialogOpen","setFileDialogOpen","file","setFile","uploadProgress","setUploadProgress","toggleCheckbox","handlePagination","setDictionary","handleSearchClick","keyword","current","a","deleteDictionary","utils","sleep","handleCreateData","createId","createKeyword","createValue","createDictionary","msg","undefined","setTimeout","column","hits","hit","createLabels","colId","find","colKeyword","colValue","Card","CardContent","Grid","container","item","xs","FormControl","Select","MenuItem","placeholder","inputRef","onKeyUp","keyCode","type","aria-label","Search","color","md","variant","mx","downloadDictionary","e","currentTarget","ArrowDropDown","Menu","anchorEl","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","role","analysis","disabled","m","Snackbar","autoHideDuration","elevation","severity","Dialog","DialogTitle","style","cursor","DialogContent","TextField","autoFocus","label","onKeyPress","m5","mt","DialogActions","mr","DialogContentText","fd","FormData","append","resetDict","then","res","catch","err","files","FormControlLabel","control","labelPlacement","LinearProgress","sendFile","createSearchColumn","window","confirm","checkedListId","columns","reduce","o","k","Object","assign","updateDictionary","ml","focus","dictionaryReducers","activeIndex","settings","Viewer","Set","Synonym","Space","Synonym2Way","Custom","ms","Promise","resolve"],"mappings":"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","file":"static/js/61.928f9f7a.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    IconButton,\r\n    InputBase,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Delete as DeleteIcon, OfflinePin as OfflinePinIcon} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: { border: \"0px\" },\r\n}));\r\n\r\nfunction DynamicTable({dataList, from = 0, limit = 100000, showCheckBox = false, onSelectClick, isEdit = false, onUpdate = () => {}, onDelete = () => {}}) {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([])\r\n    const [array, setArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        setArray([...dataList.map(data => data.data)])\r\n    }, [dataList])\r\n\r\n    useEffect(() => {\r\n        setSelected([])\r\n    }, [showCheckBox])\r\n\r\n\r\n    const fields = dataList.map(data => data.field);\r\n\r\n    let rowCount = 0;\r\n    dataList.forEach(data => rowCount < data.data.length ? rowCount = data.data.length : rowCount);\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n        let cols = [];\r\n        for (let j = 0; j < fields.length; j++) {\r\n            if (array[j]) {\r\n                if (typeof array[j][i] !== 'object') {\r\n                    cols.push({id: array[j][i], text: array[j][i]})\r\n                } else {\r\n                    cols.push({id: array[j][i]['id'], text: array[j][i]['text']})\r\n                }\r\n            }\r\n        }\r\n        rows.push(cols)\r\n    }\r\n    rows = rows.splice(from, limit)\r\n\r\n    function handleSelectAllClick(checked) {\r\n        let ids = []\r\n        rows.forEach(row => {\r\n            onSelectClick(row[0].id, checked)\r\n            ids.push(row[0].id)\r\n        })\r\n        checked ? setSelected(ids) : setSelected([])\r\n    }\r\n    function handleSelectClick(id, checked) {\r\n        onSelectClick(id, checked)\r\n        checked ? setSelected(selected.concat(id)) : setSelected(selected.filter(select => select !== id))\r\n    }\r\n    function handleChange(event, id, colIdx, rowIdx) {\r\n        let cloneArray = array.slice()\r\n        cloneArray[colIdx][rowIdx]['text'] = event.target.value\r\n        setArray(cloneArray)\r\n    }\r\n    function handleEdit(id, rowIdx) {\r\n        let cols = []\r\n        let updateFields = []\r\n        for (let i = 0; i < array.length; i++) {\r\n            cols.push(array[i][rowIdx]['text'] || '')\r\n            console.log(fields[i])\r\n            updateFields.push(fields[i] || '')\r\n        }\r\n        onUpdate(id, cols, updateFields)\r\n    }\r\n    function handleDelete(id) {\r\n        onDelete(id)\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            fields.map((field, index) => (\r\n                                <React.Fragment key={field}>\r\n                                    {\r\n                                        showCheckBox && index === 0  ?\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox defaultChecked={false} onChange={(event) => handleSelectAllClick(event.target.checked)}/>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <TableCell>{field}</TableCell>\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        {\r\n                            showCheckBox && isEdit ?\r\n                                <TableCell>\r\n                                    <Box align={\"center\"}>\r\n                                        액션\r\n                                    </Box>\r\n                                </TableCell>\r\n                                :\r\n                                null\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((cols, rowIdx) => {\r\n                            return (\r\n                                <TableRow key={rowIdx}>\r\n                                    {\r\n                                        cols.map((col, colIdx) => {\r\n                                            return (\r\n                                                <React.Fragment key={colIdx}>\r\n                                                    {\r\n                                                        showCheckBox && colIdx === 0 ?\r\n                                                            <TableCell padding=\"checkbox\">\r\n                                                                <Checkbox checked={selected.includes(col.id)}\r\n                                                                          onChange={(event) => handleSelectClick(col.id, event.target.checked)}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <TableCell>\r\n                                                        {\r\n                                                            showCheckBox && isEdit ?\r\n                                                                // 수정 모드\r\n                                                                <InputBase className={classes.input}\r\n                                                                           value={col.text|| ''}\r\n                                                                           /*순서 주의 (colIdx, rowIdx)*/\r\n                                                                           onChange={(event) => handleChange(event, col.id, colIdx, rowIdx)}\r\n                                                                           fullWidth\r\n                                                                           b={0}\r\n                                                                />\r\n                                                                :\r\n                                                                // 조회 모드\r\n                                                                col.text\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        showCheckBox && isEdit ?\r\n                                            <TableCell>\r\n                                                <Box align={\"center\"} justifyContent={\"space-between\"} display=\"flex\" width=\"100%\">\r\n                                                    <Box></Box>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleEdit(cols[0]['id'], rowIdx)}\r\n                                                    >\r\n                                                        <OfflinePinIcon/>\r\n                                                    </IconButton>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleDelete(cols[0]['id'])}\r\n                                                    >\r\n                                                        <DeleteIcon/>\r\n                                                    </IconButton>\r\n\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nDynamicTable.prototype = {\r\n    dataList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DynamicTable","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Set({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m5={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Set\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Set)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        const createSearchColumn = createId !== '' ? 'id' : createKeyword !== '' ? 'keyword' : 'value'\r\n        // const createSearchKeyword = createId !== '' ? createId : createKeyword !== '' ? createKeyword : createValue\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        setMatch(true)\r\n        setSearchColumns(createSearchColumn)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    \r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                          checked={isMatch}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                             {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true} \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') handleCreateData();\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Synonym\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Space({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        console.log(result['lastPageNum']);\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            // 수정된 사항\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n            // data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][\"value\"] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            } \r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Space\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Space)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    // authUser.role.analysis = false;\r\n\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment style={{justifyContent: \"space-between\"}}>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            \r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {\r\n                        message !== \"\" ? \r\n                        <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"synonym_2way\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async(res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState, useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n        if (newCreateId.current) {\r\n            newCreateId.current.focus();\r\n        }\r\n        if (newCreateKeyword.current) {\r\n            newCreateKeyword.current.focus();\r\n        }\r\n        if (newCreateValue.current) {\r\n            newCreateValue.current.focus();\r\n        }\r\n    }, [newCreateId, newCreateKeyword, newCreateValue]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    \r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        // 등록 메시지 만들기\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { newCreateKeyword.current =\"\"; setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                        >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> \r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n            \r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData();\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData()\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                    if (e.key === 'Enter') {\r\n                                                        handleCreateData();\r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                        {\r\n                            message !== \"\" ? \r\n                            <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                                : <></>\r\n                        }\r\n                    <Button \r\n                        onClick={\r\n                            handleCreateData\r\n                        } \r\n                        color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n\r\n                        { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Custom\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res.data);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Set from './Set'\r\nimport Synonym from './Synonym'\r\nimport Space from './Space'\r\nimport Synonym2Way from './Synonym2Way'\r\nimport Custom from './Custom'\r\n\r\nfunction WrapperTabPanel({ activeIndex, settings, dataSet }) {\r\n    const setting = settings[activeIndex]\r\n    const dictionary = setting['id']\r\n    const type = setting['type']\r\n\r\n    // console.log(\"settings \", settings);\r\n    // console.log(\"dictionary \", dictionary);\r\n    // console.log(\"type \", type);\r\n    // console.log(\"dataSet \", dataSet);\r\n\r\n    let Viewer = null\r\n    switch (type) {\r\n        case \"SET\": Viewer = Set; break;\r\n        case \"SYNONYM\": Viewer = Synonym; break;\r\n        case \"SPACE\": Viewer = Space; break; // Set 과 동일함...\r\n        case \"COMPOUND\": Viewer = Synonym; break; // Synonym 과 동일함...\r\n        case \"SYNONYM_2WAY\": Viewer = Synonym2Way; break; // Synonym 과 동일함...\r\n        case \"CUSTOM\": Viewer = Custom; break; // Synonym 과 동일함...\r\n        default: Viewer = () => <React.Fragment>지원하지 않는 타입 입니다.</React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Viewer dictionary={dictionary}\r\n                    setting={setting}\r\n                    dataSet={dataSet}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.dictionaryReducers}))(WrapperTabPanel)","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils"],"sourceRoot":""}
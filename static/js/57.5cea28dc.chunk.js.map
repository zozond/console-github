{"version":3,"sources":["pages/role/index.js","../node_modules/@material-ui/core/esm/Switch/Switch.js","redux/actions/roleManagementActions.js"],"names":["Card","styled","MuiCard","spacing","Divider","MuiDivider","useStyles","makeStyles","table","minWidth","roleTable","marginTop","warning","color","red","StyledTableCell","withStyles","theme","body","fontSize","TableCell","StyledTableRow","root","backgroundColor","palette","background","default","TableRow","TextFieldSpacing","MuiTextField","TextField","StyledMenu","paper","border","props","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","primary","main","common","white","MenuItem","connect","store","roleManagementReducers","dsearchReducers","dispatch","roleList","userRolesList","authUser","classes","useTheme","fullScreen","useMediaQuery","breakpoints","down","React","useState","selectedId","setSelectedId","openDropDown","setOpenDropDown","openAddModal","setOpenAddModal","openEditModal","setOpenEditModal","name","setName","nameError","setNameError","analysis","setAnalysis","index","setIndex","search","setSearch","manage","setManage","toggleDropDownButton","event","currentTarget","toggleAddModal","toggleEditModal","role","find","setRoleListAction","useEffect","isManager","Fragment","title","variant","gutterBottom","display","my","container","alignItems","justify","item","xs","align","style","aria-controls","aria-haspopup","onClick","id","anchorEl","keepMounted","open","Boolean","onClose","disabled","undefined","userRoles","removeRoleAction","then","response","finally","className","aria-label","width","map","row","key","component","scope","checked","onChange","target","fullWidth","noValidate","autoComplete","value","error","size","inputProps","m","addRoleAction","console","log","catch","ml","mr","mb","mt","editRoleAction","alert","Switch","ref","_props$color","_props$edge","edge","_props$size","other","_objectWithoutProperties","icon","thumb","clsx","edgeStart","edgeEnd","concat","capitalize","SwitchBase","_extends","type","checkedIcon","switchBase","input","track","height","overflow","padding","boxSizing","position","flexShrink","zIndex","verticalAlign","marginLeft","marginRight","top","left","grey","transition","transitions","create","duration","shortest","transform","opacity","colorPrimary","fade","action","hoverOpacity","black","colorSecondary","secondary","sizeSmall","boxShadow","shadows","borderRadius","client","Client","call","uri","SET_ROLE_LIST","payload","data","err","method","SET_ROLE"],"mappings":"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","file":"static/js/57.5cea28dc.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {makeStyles, useTheme, withStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    Grid,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n    Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField as MuiTextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {ArrowDropDown} from \"@material-ui/icons\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport {\r\n    addRoleAction,\r\n    editRoleAction,\r\n    removeRoleAction,\r\n    setRoleListAction\r\n} from \"../../redux/actions/roleManagementActions\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 600,\r\n    },\r\n    roleTable: {\r\n        marginTop: \"30px\",\r\n        minWidth: 300\r\n    },\r\n    warning: {\r\n        color: red[500],\r\n        marginTop: \"30px\"\r\n    }\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\n\r\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\r\n\r\nconst TextField = styled(TextFieldSpacing)`\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n        '&:focus': {\r\n            backgroundColor: theme.palette.primary.main,\r\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n                color: theme.palette.common.white,\r\n            },\r\n        },\r\n    },\r\n}))(MenuItem);\r\n\r\nfunction Role({dispatch, roleList, userRolesList, authUser}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [selectedId, setSelectedId] = React.useState(\"\")\r\n\r\n    const [openDropDown, setOpenDropDown] = React.useState(null);\r\n    const [openAddModal, setOpenAddModal] = React.useState(false);\r\n    const [openEditModal, setOpenEditModal] = React.useState(false);\r\n\r\n    const [name, setName] = React.useState(\"\");\r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [analysis, setAnalysis] = React.useState(false);\r\n    const [index, setIndex] = React.useState(false);\r\n    const [search, setSearch] = React.useState(false);\r\n    const [manage, setManage] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(setRoleListAction())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    function handleSelectCheckbox(id) {\r\n        if (selectedId === id) {\r\n            setSelectedId(\"\")\r\n        } else {\r\n            setSelectedId(id)\r\n        }\r\n    }\r\n\r\n    function toggleDropDownButton(event) {\r\n        if (openDropDown === null) {\r\n            setOpenDropDown(event.currentTarget);\r\n        } else {\r\n            setOpenDropDown(null);\r\n        }\r\n    }\r\n\r\n    function toggleAddModal(){\r\n        setName(\"\")\r\n        setAnalysis(false)\r\n        setIndex(false)\r\n        setSearch(false)\r\n        setManage(false)\r\n        setOpenAddModal(!openAddModal);\r\n    }\r\n\r\n    function handleRoleAddProcess() {\r\n        if (name === \"\") {\r\n            setNameError(true)\r\n            return false\r\n        }\r\n        dispatch(addRoleAction({\r\n            name, analysis, index, search, manage\r\n        })).then(response => {\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.error(error)\r\n        }).finally(() => {\r\n            dispatch(setRoleListAction())\r\n            toggleAddModal()\r\n            toggleDropDownButton()\r\n        })\r\n    }\r\n\r\n\r\n\r\n    function toggleEditModal() {\r\n        if (openEditModal === false) {\r\n            const role = roleList.find(role => role['id'] === selectedId)\r\n            setName(role['name'])\r\n            setAnalysis(role['analysis'])\r\n            setIndex(role['index'])\r\n            setSearch(role['search'])\r\n            setManage(role['manage'])\r\n        } else {\r\n            dispatch(setRoleListAction())\r\n        }\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n\r\n    function handleRoleEditProcess() {\r\n        if (name === \"\") {\r\n            setNameError(true)\r\n            return false\r\n        }\r\n        dispatch(editRoleAction(selectedId, {\r\n            name, analysis, index, search, manage\r\n        })).then(response => {\r\n            console.log(response)\r\n            toggleEditModal()\r\n        }).catch(error => {\r\n            console.error(error)\r\n            alert(\"실패\")\r\n        }).finally(() => {\r\n            toggleDropDownButton()\r\n        })\r\n    }\r\n\r\n    function handleRoleRemoveProcess() {\r\n        dispatch(removeRoleAction(selectedId))\r\n            .then(response => setSelectedId(\"\"))\r\n            .finally(() => {\r\n                toggleDropDownButton()\r\n                dispatch(setRoleListAction())\r\n            })\r\n    }\r\n\r\n    const isManager = authUser['role']['manage']\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"역할\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                역할\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Grid container spacing={6} alignItems=\"center\" justify=\"center\">\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <div align={\"right\"} style={{display: isManager ? 'block' : 'none'}}>\r\n                                <Button\r\n                                    aria-controls=\"customized-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={toggleDropDownButton}\r\n                                >\r\n                                    작업\r\n                                    <ArrowDropDown/>\r\n                                </Button>\r\n\r\n                                <StyledMenu\r\n                                    id=\"customized-menu\"\r\n                                    anchorEl={openDropDown}\r\n                                    keepMounted\r\n                                    open={Boolean(openDropDown)}\r\n                                    onClose={toggleDropDownButton}\r\n                                >\r\n                                    <StyledMenuItem onClick={toggleAddModal}>\r\n                                        <ListItemIcon>\r\n                                            <InboxIcon fontSize=\"small\"/>\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"추가\"/>\r\n                                    </StyledMenuItem>\r\n                                    <StyledMenuItem disabled={selectedId === \"\"} onClick={toggleEditModal}>\r\n                                        <ListItemIcon>\r\n                                            <SendIcon fontSize=\"small\"/>\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"수정\"/>\r\n                                    </StyledMenuItem>\r\n                                    <StyledMenuItem disabled={selectedId === \"\" || userRolesList.find(userRoles => userRoles['roleId'] === selectedId) !== undefined } onClick={handleRoleRemoveProcess}>\r\n                                        <ListItemIcon>\r\n                                            <DraftsIcon fontSize=\"small\"/>\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"삭제\"/>\r\n                                    </StyledMenuItem>\r\n                                </StyledMenu>\r\n                            </div>\r\n\r\n                            <TableContainer>\r\n                                <Table className={classes.table} aria-label=\"customized table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            {\r\n                                                isManager ?\r\n                                                    <StyledTableCell align=\"center\" style={{width: \"10%\"}}>#</StyledTableCell>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                            <StyledTableCell align=\"center\" style={{width: \"40%\"}}>역할</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>분석 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>인덱스 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>검색 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>관리 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>사용 여부</StyledTableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {roleList.map(row => (\r\n                                            <StyledTableRow key={row['id']}>\r\n                                                {\r\n                                                    isManager ?\r\n                                                        <StyledTableCell component=\"th\"\r\n                                                                         scope=\"row\"\r\n                                                                         align=\"center\"\r\n                                                        >\r\n                                                            <Checkbox color=\"primary\"\r\n                                                                      checked={selectedId === row['id']}\r\n                                                                      onChange={event => handleSelectCheckbox(row['id'], event.target.checked)}\r\n                                                            />\r\n                                                        </StyledTableCell>\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    {row['name'] || ''}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['analysis']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['index']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['search']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['manage']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    {\r\n                                                        userRolesList.find(userRoles => userRoles['roleId'] === row['id']) ?\r\n                                                            <Box component={\"span\"}>사용</Box>\r\n                                                            :\r\n                                                            <Box component={\"span\"}>미사용</Box>\r\n                                                    }\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Dialog open={openAddModal}\r\n                    onClose={toggleAddModal}\r\n                    fullScreen={fullScreen}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">역할 추가</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <form noValidate autoComplete=\"off\">\r\n\r\n                        <Grid container spacing={6}>\r\n                            <Grid item xs={3}> 이름 </Grid>\r\n                            <Grid item xs={8}>\r\n                                <TextField value={name} onChange={event => setName(event.target.value)} error={nameError}/>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container className={classes.roleTable}>\r\n                            <Grid item xs={3}>\r\n                                권한\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n\r\n                                <Table size=\"small\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">쓰기권한</TableCell>\r\n                                            <TableCell align=\"center\">영역</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={analysis}\r\n                                                    onChange={event => setAnalysis(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                분석\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={index}\r\n                                                    onChange={event => setIndex(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                인덱스\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={search}\r\n                                                    onChange={event => setSearch(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                검색\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={manage}\r\n                                                    onChange={event => setManage(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                관리\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container>\r\n                            <Grid item xs={12} m={5}>\r\n                                <Box className={classes.warning}>\r\n                                    * 모든영역에 대한 읽기권한은 기본적으로 존재합니다.\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleRoleAddProcess} color=\"primary\"> 추가 </Button>\r\n                    <Button onClick={toggleAddModal} color=\"primary\"> 취소 </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n            <Dialog open={openEditModal}\r\n                    onClose={toggleEditModal}\r\n                    fullScreen={fullScreen}\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">역할 수정 </DialogTitle>\r\n                <DialogContent>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <Grid container spacing={6}>\r\n                            <Grid item xs={3}> 이름 </Grid>\r\n                            <Grid item xs={8}>\r\n                                <TextField value={name} onChange={event => setName(event.target.value)} error={nameError}/>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container className={classes.roleTable}>\r\n                            <Grid item xs={3}>\r\n                                권한\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n\r\n                                <Table size=\"small\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">쓰기권한</TableCell>\r\n                                            <TableCell align=\"center\">영역</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={analysis}\r\n                                                    onChange={event => setAnalysis(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                분석\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={index}\r\n                                                    onChange={event => setIndex(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                인덱스\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={search}\r\n                                                    onChange={event => setSearch(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                검색\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={manage}\r\n                                                    onChange={event => setManage(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                관리\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} ml={5} mr={5} mb={5} mt={3}>\r\n                                <Box className={classes.warning}>\r\n                                    * 모든영역에 대한 읽기권한은 기본적으로 존재합니다.\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleRoleEditProcess} color=\"primary\"> 수정 </Button>\r\n                    <Button onClick={toggleEditModal} color=\"primary\"> 취소 </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.roleManagementReducers, ...store.dsearchReducers}))(Role);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      width: 34 + 12 * 2,\n      height: 14 + 12 * 2,\n      overflow: 'hidden',\n      padding: 12,\n      boxSizing: 'border-box',\n      position: 'relative',\n      flexShrink: 0,\n      zIndex: 0,\n      // Reset the stacking context.\n      verticalAlign: 'middle' // For correct alignment with the text.\n\n    },\n\n    /* Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: {\n      marginLeft: -8\n    },\n\n    /* Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: {\n      marginRight: -8\n    },\n\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1,\n      // Render above the focus ripple.\n      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n      transition: theme.transitions.create(['left', 'transform'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&$checked': {\n        transform: 'translateX(20px)'\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        opacity: 0.5\n      },\n      '&$disabled + $track': {\n        opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.primary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.secondary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      width: 40,\n      height: 24,\n      padding: 7,\n      '& $thumb': {\n        width: 16,\n        height: 16\n      },\n      '& $switchBase': {\n        padding: 4,\n        '&$checked': {\n          transform: 'translateX(16px)'\n        }\n      }\n    },\n\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n      left: '-100%',\n      width: '300%'\n    },\n\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n      boxShadow: theme.shadows[1],\n      backgroundColor: 'currentColor',\n      width: 20,\n      height: 20,\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the track element. */\n    track: {\n      height: '100%',\n      width: '100%',\n      borderRadius: 14 / 2,\n      zIndex: -1,\n      transition: theme.transitions.create(['opacity', 'background-color'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n      opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n    }\n  };\n};\nvar Switch = React.forwardRef(function Switch(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"edge\", \"size\"]);\n\n  var icon = React.createElement(\"span\", {\n    className: classes.thumb\n  });\n  return React.createElement(\"span\", {\n    className: clsx(classes.root, className, {\n      'start': classes.edgeStart,\n      'end': classes.edgeEnd\n    }[edge], size === \"small\" && classes[\"size\".concat(capitalize(size))])\n  }, React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    icon: icon,\n    checkedIcon: icon,\n    classes: {\n      root: clsx(classes.switchBase, classes[\"color\".concat(capitalize(color))]),\n      input: classes.input,\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    ref: ref\n  }, other)), React.createElement(\"span\", {\n    className: classes.track\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['start', 'end', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the switch.\n   * `small` is equivalent to the dense switch styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSwitch'\n})(Switch);","import {SET_ROLE, SET_ROLE_LIST} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setRoleListAction = () => dispatch => client.call({\r\n    uri: `/roles`\r\n}).then(response => dispatch({type: SET_ROLE_LIST, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const addRoleAction = role => dispatch => client.call({\r\n    uri: `/roles`,\r\n    method: \"POST\",\r\n    data: role\r\n}).then(response => dispatch({type: SET_ROLE, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const editRoleAction = (id, role) => dispatch => client.call({\r\n    uri: `/roles/${id}`,\r\n    method: \"PUT\",\r\n    data: role\r\n}).then(response => dispatch({type: SET_ROLE, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const removeRoleAction = (id) => dispatch => client.call({\r\n    uri: `/roles/${id}`,\r\n    method: \"DELETE\"\r\n})"],"sourceRoot":""}
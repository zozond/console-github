{"version":3,"sources":["components/DynamicTable/index.js","pages/analysis/dictionary/Set.js","pages/analysis/dictionary/Synonym.js","pages/analysis/dictionary/Space.js","pages/analysis/dictionary/Synonym2Way.js","pages/analysis/dictionary/Custom.js","pages/analysis/dictionary/WrapperTabPanel.js","utils.js"],"names":["useStyles","makeStyles","theme","input","border","DynamicTable","dataList","from","limit","showCheckBox","onSelectClick","isEdit","onUpdate","onDelete","classes","useState","selected","setSelected","array","setArray","useEffect","map","data","fields","field","rowCount","forEach","length","rows","i","cols","j","push","id","text","splice","TableContainer","component","Paper","Table","size","TableHead","TableRow","index","Fragment","key","TableCell","padding","Checkbox","defaultChecked","onChange","event","checked","ids","row","handleSelectAllClick","target","Box","align","TableBody","rowIdx","col","colIdx","includes","concat","filter","select","InputBase","className","value","cloneArray","slice","handleChange","fullWidth","b","justifyContent","display","width","IconButton","iconButton","onClick","updateFields","console","log","handleEdit","OfflinePin","Delete","prototype","PropTypes","isRequired","Button","styled","MuiButton","spacing","sizing","palette","MuiBox","formControl","minWidth","form","alignItems","marginLeft","flex","borderBottom","divider","height","margin","right","textAlign","checkedList","searchedKeyword","connect","store","authUser","dsearchReducers","dictionary","setting","result","dataSet","dispatch","useDispatch","searchColumns","setSearchColumns","isMatch","setMatch","mode","setMode","pageNum","setPageNum","rowSize","newCreateId","React","useRef","newCreateKeyword","newCreateValue","newKeyword","deleteDialogOpen","setDeleteDialogOpen","createDialogOpen","setCreateDialogOpen","message","setMessage","alertFlag","setAlertFlag","alertMessage","setAlertMessage","alertColor","setAlertColor","moreMenu","setMoreMenu","overwrite","setOverwrite","resetDialogOpen","setResetDialogOpen","fileDialogOpen","setFileDialogOpen","file","setFile","uploadProgress","setUploadProgress","toggleCheckbox","handlePagination","setDictionary","handleSearchClick","keyword","current","a","deleteDictionary","utils","sleep","handleCreateData","createId","createKeyword","createValue","createDictionary","msg","undefined","setTimeout","column","hits","hit","createLabels","colId","find","colKeyword","colValue","Card","CardContent","Grid","container","item","xs","FormControl","Select","MenuItem","placeholder","inputRef","onKeyUp","keyCode","type","aria-label","Search","color","md","variant","mx","downloadDictionary","e","currentTarget","ArrowDropDown","Menu","anchorEl","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","role","analysis","disabled","m","Dialog","DialogTitle","style","cursor","DialogContent","TextField","autoFocus","label","onKeyPress","m5","mt","DialogActions","mr","DialogContentText","Snackbar","autoHideDuration","elevation","severity","fd","FormData","append","resetDict","window","location","reload","files","FormControlLabel","control","labelPlacement","LinearProgress","sendFile","then","res","catch","err","createSearchColumn","confirm","checkedListId","columns","reduce","o","k","Object","assign","updateDictionary","ml","focus","dictionaryReducers","activeIndex","settings","Viewer","Set","Synonym","Space","Synonym2Way","Custom","ms","Promise","resolve"],"mappings":"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","file":"static/js/61.3c2524c8.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    IconButton,\r\n    InputBase,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Delete as DeleteIcon, OfflinePin as OfflinePinIcon} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: { border: \"0px\" },\r\n}));\r\n\r\nfunction DynamicTable({dataList, from = 0, limit = 100000, showCheckBox = false, onSelectClick, isEdit = false, onUpdate = () => {}, onDelete = () => {}}) {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([])\r\n    const [array, setArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        setArray([...dataList.map(data => data.data)])\r\n    }, [dataList])\r\n\r\n    useEffect(() => {\r\n        setSelected([])\r\n    }, [showCheckBox])\r\n\r\n\r\n    const fields = dataList.map(data => data.field);\r\n\r\n    let rowCount = 0;\r\n    dataList.forEach(data => rowCount < data.data.length ? rowCount = data.data.length : rowCount);\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n        let cols = [];\r\n        for (let j = 0; j < fields.length; j++) {\r\n            if (array[j]) {\r\n                if (typeof array[j][i] !== 'object') {\r\n                    cols.push({id: array[j][i], text: array[j][i]})\r\n                } else {\r\n                    cols.push({id: array[j][i]['id'], text: array[j][i]['text']})\r\n                }\r\n            }\r\n        }\r\n        rows.push(cols)\r\n    }\r\n    rows = rows.splice(from, limit)\r\n\r\n    function handleSelectAllClick(checked) {\r\n        let ids = []\r\n        rows.forEach(row => {\r\n            onSelectClick(row[0].id, checked)\r\n            ids.push(row[0].id)\r\n        })\r\n        checked ? setSelected(ids) : setSelected([])\r\n    }\r\n    function handleSelectClick(id, checked) {\r\n        onSelectClick(id, checked)\r\n        checked ? setSelected(selected.concat(id)) : setSelected(selected.filter(select => select !== id))\r\n    }\r\n    function handleChange(event, id, colIdx, rowIdx) {\r\n        let cloneArray = array.slice()\r\n        cloneArray[colIdx][rowIdx]['text'] = event.target.value\r\n        setArray(cloneArray)\r\n    }\r\n    function handleEdit(id, rowIdx) {\r\n        let cols = []\r\n        let updateFields = []\r\n        for (let i = 0; i < array.length; i++) {\r\n            cols.push(array[i][rowIdx]['text'] || '')\r\n            console.log(fields[i])\r\n            updateFields.push(fields[i] || '')\r\n        }\r\n        onUpdate(id, cols, updateFields)\r\n    }\r\n    function handleDelete(id) {\r\n        onDelete(id)\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            fields.map((field, index) => (\r\n                                <React.Fragment key={field}>\r\n                                    {\r\n                                        showCheckBox && index === 0  ?\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox defaultChecked={false} onChange={(event) => handleSelectAllClick(event.target.checked)}/>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <TableCell>{field}</TableCell>\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        {\r\n                            showCheckBox && isEdit ?\r\n                                <TableCell>\r\n                                    <Box align={\"center\"}>\r\n                                        액션\r\n                                    </Box>\r\n                                </TableCell>\r\n                                :\r\n                                null\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((cols, rowIdx) => {\r\n                            return (\r\n                                <TableRow key={rowIdx}>\r\n                                    {\r\n                                        cols.map((col, colIdx) => {\r\n                                            return (\r\n                                                <React.Fragment key={colIdx}>\r\n                                                    {\r\n                                                        showCheckBox && colIdx === 0 ?\r\n                                                            <TableCell padding=\"checkbox\">\r\n                                                                <Checkbox checked={selected.includes(col.id)}\r\n                                                                          onChange={(event) => handleSelectClick(col.id, event.target.checked)}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <TableCell>\r\n                                                        {\r\n                                                            showCheckBox && isEdit ?\r\n                                                                // 수정 모드\r\n                                                                <InputBase className={classes.input}\r\n                                                                           value={col.text|| ''}\r\n                                                                           /*순서 주의 (colIdx, rowIdx)*/\r\n                                                                           onChange={(event) => handleChange(event, col.id, colIdx, rowIdx)}\r\n                                                                           fullWidth\r\n                                                                           b={0}\r\n                                                                />\r\n                                                                :\r\n                                                                // 조회 모드\r\n                                                                col.text\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        showCheckBox && isEdit ?\r\n                                            <TableCell>\r\n                                                <Box align={\"center\"} justifyContent={\"space-between\"} display=\"flex\" width=\"100%\">\r\n                                                    <Box></Box>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleEdit(cols[0]['id'], rowIdx)}\r\n                                                    >\r\n                                                        <OfflinePinIcon/>\r\n                                                    </IconButton>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleDelete(cols[0]['id'])}\r\n                                                    >\r\n                                                        <DeleteIcon/>\r\n                                                    </IconButton>\r\n\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nDynamicTable.prototype = {\r\n    dataList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DynamicTable","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Set({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m5={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                        <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                    </Snackbar>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('dictionaryName', dictionary)\r\n                        dispatch(resetDict(fd))\r\n                        setResetDialogOpen(false)\r\n                        window.location.reload();\r\n                    }} color=\"secondary\">\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                        </Snackbar>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Set\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then((res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                handlePagination(0);\r\n                            }).catch((err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Set)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        const createSearchColumn = createId !== '' ? 'id' : createKeyword !== '' ? 'keyword' : 'value'\r\n        // const createSearchKeyword = createId !== '' ? createId : createKeyword !== '' ? createKeyword : createValue\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        setMatch(true)\r\n        setSearchColumns(createSearchColumn)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    \r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                          checked={isMatch}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                             {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true} \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') handleCreateData();\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                        <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                    </Snackbar>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('dictionaryName', dictionary)\r\n                        dispatch(resetDict(fd))\r\n                        setResetDialogOpen(false)\r\n                        window.location.reload();\r\n                    }} color=\"secondary\">\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                        </Snackbar>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Synonym\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        dispatch(sendFile(fd))\r\n                            .then((res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                handlePagination(0);\r\n                            }).catch((err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Space({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        console.log(result['lastPageNum']);\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            // 수정된 사항\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n            // data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][\"value\"] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            } \r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                        <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                    </Snackbar>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('dictionaryName', dictionary)\r\n                        dispatch(resetDict(fd))\r\n                        setResetDialogOpen(false)\r\n                        window.location.reload();\r\n                    }} color=\"secondary\">\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                        </Snackbar>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Space\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then((res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                handlePagination(0);\r\n                            }).catch((err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Space)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    // authUser.role.analysis = false;\r\n\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment style={{justifyContent: \"space-between\"}}>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            \r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {\r\n                        message !== \"\" ? \r\n                        <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                        <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                    </Snackbar>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('dictionaryName', dictionary)\r\n                        dispatch(resetDict(fd))\r\n                        setResetDialogOpen(false)\r\n                        window.location.reload();\r\n                    }} color=\"secondary\">\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                        </Snackbar>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"synonym_2way\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        dispatch(sendFile(fd))\r\n                            .then((res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                handlePagination(0);\r\n                            }).catch((err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState, useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    // 파일 업로드\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n        if (newCreateId.current) {\r\n            newCreateId.current.focus();\r\n        }\r\n        if (newCreateKeyword.current) {\r\n            newCreateKeyword.current.focus();\r\n        }\r\n        if (newCreateValue.current) {\r\n            newCreateValue.current.focus();\r\n        }\r\n    }, [newCreateId, newCreateKeyword, newCreateValue]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    \r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        // 등록 메시지 만들기\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { newCreateKeyword.current =\"\"; setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                        >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> \r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n            \r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData();\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData()\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                    if (e.key === 'Enter') {\r\n                                                        handleCreateData();\r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                        {\r\n                            message !== \"\" ? \r\n                            <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                                : <></>\r\n                        }\r\n                    <Button \r\n                        onClick={\r\n                            handleCreateData\r\n                        } \r\n                        color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                        <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                    </Snackbar>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('dictionaryName', dictionary)\r\n                        dispatch(resetDict(fd))\r\n                        setResetDialogOpen(false)\r\n                        window.location.reload();\r\n                    }} color=\"secondary\">\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                        </Snackbar>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n\r\n                        { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Custom\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then((res) => {\r\n                                console.log(\"onchange res\", res.data);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                handlePagination(0);\r\n                            }).catch((err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Set from './Set'\r\nimport Synonym from './Synonym'\r\nimport Space from './Space'\r\nimport Synonym2Way from './Synonym2Way'\r\nimport Custom from './Custom'\r\n\r\nfunction WrapperTabPanel({ activeIndex, settings, dataSet }) {\r\n    const setting = settings[activeIndex]\r\n    const dictionary = setting['id']\r\n    const type = setting['type']\r\n\r\n    // console.log(\"settings \", settings);\r\n    // console.log(\"dictionary \", dictionary);\r\n    // console.log(\"type \", type);\r\n    // console.log(\"dataSet \", dataSet);\r\n\r\n    let Viewer = null\r\n    switch (type) {\r\n        case \"SET\": Viewer = Set; break;\r\n        case \"SYNONYM\": Viewer = Synonym; break;\r\n        case \"SPACE\": Viewer = Space; break; // Set 과 동일함...\r\n        case \"COMPOUND\": Viewer = Synonym; break; // Synonym 과 동일함...\r\n        case \"SYNONYM_2WAY\": Viewer = Synonym2Way; break; // Synonym 과 동일함...\r\n        case \"CUSTOM\": Viewer = Custom; break; // Synonym 과 동일함...\r\n        default: Viewer = () => <React.Fragment>지원하지 않는 타입 입니다.</React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Viewer dictionary={dictionary}\r\n                    setting={setting}\r\n                    dataSet={dataSet}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.dictionaryReducers}))(WrapperTabPanel)","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils"],"sourceRoot":""}
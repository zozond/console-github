{"version":3,"sources":["pages/indices/index/Mapping.js","../node_modules/@material-ui/core/esm/TableHead/TableHead.js","../node_modules/@material-ui/core/esm/TextField/TextField.js","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js","redux/actions/indexTemplateActions.js","../node_modules/flat/index.js","components/Json2Html/index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","root","flexGrow","width","edit","addIcon","verticalAlign","table","padding","Box","styled","MuiBox","spacing","positions","Card","MuiCard","FormCard","json","m","style","overflow","Json2html","JSON","stringify","type","JsonCard","classes","rowsMin","className","disabled","value","connect","store","indicesReducers","mappings","React","useState","chk","setChk","handleRadioChange","e","target","Fragment","component","row","aria-label","name","defaultValue","checked","onChange","control","color","label","mt","tablelvl2","variant","TableHead","props","ref","_props$component","Component","other","_objectWithoutProperties","Tablelvl2Context","Provider","_extends","clsx","withStyles","display","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextField","autoComplete","_props$autoFocus","autoFocus","children","_props$color","_props$disabled","_props$error","error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","_props$multiline","multiline","onBlur","onFocus","placeholder","_props$required","required","rows","rowsMax","_props$select","select","SelectProps","_props$variant","InputMore","shrink","notched","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","FormControl","InputLabel","htmlFor","Select","labelId","input","FormHelperText","focused","margin","muiFormControl","useFormControl","fcs","formControlState","states","contained","marginDense","dangerouslySetInnerHTML","__html","palette","text","secondary","typography","caption","textAlign","marginTop","main","marginLeft","marginRight","createSvgIcon","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","_props$checkedIcon","checkedIcon","_props$icon","icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","_props$size","size","SwitchBase","capitalize","fontSize","colorPrimary","primary","backgroundColor","fade","action","hoverOpacity","colorSecondary","client","Client","setIndexTemplatesAction","dispatch","call","uri","then","response","SET_INDEX_TEMPLATES","payload","data","filter","template","startsWith","addIndexTemplateAction","index_patterns","settings","method","deleteIndexTemplateAction","setIndexTemplateAction","SET_INDEX_TEMPLATE","setIndexTemplateCommentsAction","hits","length","SET_COMMENTS","list","map","item","addCommentsAction","updatedComment","isBuffer","obj","constructor","keyIdentity","key","flatten","opts","delimiter","maxDepth","transformKey","output","step","object","prev","currentDepth","Object","keys","forEach","isarray","safe","Array","isArray","prototype","toString","isbuffer","isobject","newKey","module","exports","unflatten","overwrite","result","getkey","parsedKey","Number","isNaN","indexOf","reduce","val","isObject","isEmpty","keyPrefix","recipient","addKeys","split","key1","shift","key2","Typography","MuiTypography","Render","comments","mode","folding","validJson","parse","comment","sourceAsMap","topFields","console","log","title","cursor","flatJsonMap","flat","formatKeyFlatJsonMap","replaceKey","replace","sortKey","substring","lastIndexOf","suffix","border","cellSpacing","cellPadding","field","endsWith","index","etc","k","find","o","mappingName","includes","align","join","onKeyPress","n","res","catch","err","MappingsJson2html","flatSettingsMap","SettingsJson2html","minHeight"],"mappings":"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","file":"static/js/40.10c6688e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\"\r\nimport styled from \"styled-components\";\r\nimport Json2html from \"~/components/Json2Html\"\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    TextareaAutosize\r\n} from \"@material-ui/core\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    addIcon: {\r\n        verticalAlign: \"top\"\r\n    },\r\n    table: {\r\n        padding: '10px'\r\n    },\r\n}));\r\n\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\n// const fieldsKeyword = \"fields.\"\r\n// const propertiesKeyword = \"properties.\"\r\n// function parsing(object) {\r\n//     let group1 = {}\r\n//     Object.keys(object).forEach(fullKey => {\r\n//         function getKey(fullKey) {\r\n//             const fieldKey = fullKey.substring(0, fullKey.indexOf(\".\"))\r\n//             const childFullKey = fullKey.substring(fieldKey.length + 1)\r\n//             let tmpGroupKey = \"\"\r\n//             let tmpKey = \"\"\r\n//             if (childFullKey.startsWith(fieldsKeyword)) {\r\n//                 // fields.\r\n//                 let childFieldKey1 = childFullKey.substring(fieldsKeyword.length)\r\n//                 childFieldKey1 = childFieldKey1.substring(0, childFieldKey1.indexOf(\".\"))\r\n//                 if (!group1[`${fieldKey}.${childFieldKey1}`]) {\r\n//                     group1[`${fieldKey}.${childFieldKey1}`] = {}\r\n//                 }\r\n//                 let childFieldKey2 = childFullKey.substring(fieldsKeyword.length + childFieldKey1.length + 1)\r\n//                 tmpGroupKey = `${fieldKey}.${childFieldKey1}`\r\n//                 tmpKey = childFieldKey2\r\n//             } else if (childFullKey.startsWith(propertiesKeyword)) {\r\n//                 // properties.\r\n//                 let childFieldKey1 = childFullKey.substring(propertiesKeyword.length)\r\n//                 childFieldKey1 = childFieldKey1.substring(0, childFieldKey1.indexOf(\".\"))\r\n//                 if (!group1[`${fieldKey}.${childFieldKey1}`]) {\r\n//                     group1[`${fieldKey}.${childFieldKey1}`] = {}\r\n//                 }\r\n//                 let childFieldKey2 = childFullKey.substring(propertiesKeyword.length + childFieldKey1.length + 1)\r\n//                 tmpGroupKey = `${fieldKey}.${childFieldKey1}`\r\n//                 tmpKey = childFieldKey2\r\n//             } else {\r\n//                 if (!group1[fieldKey]) {\r\n//                     group1[fieldKey] = {}\r\n//                 }\r\n//                 tmpGroupKey = fieldKey\r\n//                 tmpKey = childFullKey\r\n//             }\r\n//             return { tmpGroupKey, tmpKey }\r\n//         }\r\n//\r\n//         let result = getKey(fullKey)\r\n//         if (\r\n//             [\"type\", \"enabled\", \"analyzer\", \"copy_to.0\",\r\n//                 \"ignore_above\", \"null_value\", \"doc_value\",\r\n//                 \"similarity\", \"term_vector\", \"store\"\r\n//             ].includes(result['tmpKey'])) {\r\n//             group1[result['tmpGroupKey']][result['tmpKey']] = object[fullKey]\r\n//         } else {\r\n//             let tmpKey = \"\" + result['tmpKey']\r\n//             let tmpGroupKey = \"\" + result['tmpGroupKey']\r\n//             while (true) {\r\n//                 if (tmpKey.startsWith(\"fields\")) {\r\n//                     let tmpResult = getKey(tmpKey.substring(fieldsKeyword.length))\r\n//                     console.log(tmpGroupKey + \".\" + tmpResult['tmpGroupKey'])\r\n//                     if (group1[result['tmpGroupKey'] + \".\" + tmpGroupKey + \".\" + tmpResult['tmpGroupKey']] === undefined) {\r\n//                         group1[result['tmpGroupKey'] + \".\" + tmpGroupKey + \".\" + tmpResult['tmpGroupKey']] = {}\r\n//                     }\r\n//                     group1[result['tmpGroupKey'] + \".\" + tmpGroupKey + \".\" + tmpResult['tmpGroupKey']][tmpResult['tmpKey']] = object[fullKey]\r\n//                     tmpKey = \"\" + tmpResult['tmpKey']\r\n//                     tmpGroupKey = \"\" + tmpResult['tmpGroupKey']\r\n//                 } else if (tmpKey.startsWith(\"properties\")) {\r\n//                     let tmpResult = getKey(tmpKey.substring(propertiesKeyword.length))\r\n//                     if (group1[result['tmpGroupKey'] + \".\" + tmpGroupKey + \".\" + tmpResult['tmpGroupKey']] === undefined) {\r\n//                         group1[result['tmpGroupKey'] + \".\" + tmpGroupKey + \".\" + tmpResult['tmpGroupKey']] = {}\r\n//                     }\r\n//                     group1[result['tmpGroupKey'] + \".\" + tmpGroupKey + \".\" + tmpResult['tmpGroupKey']][tmpResult['tmpKey']] = object[fullKey]\r\n//                     tmpKey = \"\" + tmpResult['tmpKey']\r\n//                     tmpGroupKey = \"\" + tmpResult['tmpGroupKey']\r\n//                 } else {\r\n//                     break\r\n//                 }\r\n//             }\r\n//         }\r\n//     })\r\n//     return group1\r\n// }\r\n\r\n\r\nfunction FormCard({json}) {\r\n    // let dataMap = {}\r\n    // const flatMap = flatten(testJson['properties'] ? testJson['properties'] : testJson)\r\n    // if (json) {\r\n    //     dataMap = parsing(flatten(json['properties'] ? json['properties'] : json))\r\n    // }\r\n    // console.log(json, typeof json)\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardContent m={0}>\r\n                    <Box style={{overflow: \"auto\", minWidth: \"700px\"}}>\r\n                        {Json2html({json: JSON.stringify(json), type: \"mappings\"})}\r\n                    </Box>\r\n\r\n\r\n                    {/*<Box style={{overflow: \"auto\"}}>*/}\r\n                    {/*    <table cellPadding=\"0\" cellSpacing=\"0\"*/}\r\n                    {/*           style={{width: \"100%\", textAlign: \"center\", whiteSpace: \"nowrap\"}}>*/}\r\n                    {/*        <thead>*/}\r\n                    {/*        <tr>*/}\r\n                    {/*            <th style={{height: \"50px\", width: \"50px\", border: \"1px solid silver\"}}>#</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>이름</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>타입</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>색인</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>분석기</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>copy_to</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>ignore_above</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>null_value</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>doc_values</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>similarity</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>term_vector</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>저장</th>*/}\r\n                    {/*            <th style={{border: \"1px solid silver\"}}>기타</th>*/}\r\n                    {/*        </tr>*/}\r\n                    {/*        </thead>*/}\r\n                    {/*        <tbody>*/}\r\n                    {/*        {*/}\r\n                    {/*            Object.keys(dataMap).map((key, index) => {*/}\r\n                    {/*                let tmpObject = dataMap[key]*/}\r\n                    {/*                const type = tmpObject['type'] || \"\"*/}\r\n                    {/*                const enabled = tmpObject['enabled'] === undefined ? true : tmpObject['enabled']*/}\r\n                    {/*                const analyzer = tmpObject['analyzer'] || type === \"text\" ? \"standard\" : \"\"*/}\r\n                    {/*                const copyTo = tmpObject['copy_to.0'] || \"\"*/}\r\n                    {/*                const ignoreAbove = tmpObject['ignore_above'] || \"\"*/}\r\n                    {/*                const nullValue = tmpObject['null_value'] || \"\"*/}\r\n                    {/*                const docValue = tmpObject['doc_value'] === undefined ? true : tmpObject['doc_value']*/}\r\n                    {/*                const similarity = tmpObject['similarity'] || \"BM25\"*/}\r\n                    {/*                const termVector = tmpObject['term_vector'] || \"\"*/}\r\n                    {/*                const store = tmpObject['store'] === undefined ? true : tmpObject['store']*/}\r\n                    {/*                const etc = tmpObject['etc'] || \"\"*/}\r\n\r\n                    {/*                return (*/}\r\n                    {/*                    <tr key={index}>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{index + 1}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{key}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{type}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}><Checkbox*/}\r\n                    {/*                            style={{cursor: \"default\"}} checked={enabled}/></td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{analyzer}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{copyTo}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{ignoreAbove}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{nullValue}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{docValue}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{similarity}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{termVector}</td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}><Checkbox*/}\r\n                    {/*                            style={{cursor: \"default\"}} checked={store}/></td>*/}\r\n                    {/*                        <td style={{border: \"1px solid silver\"}}>{etc}</td>*/}\r\n                    {/*                    </tr>*/}\r\n                    {/*                )*/}\r\n                    {/*            })*/}\r\n                    {/*        }*/}\r\n                    {/*        </tbody>*/}\r\n                    {/*    </table>*/}\r\n                    {/*</Box>*/}\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction JsonCard({json}) {\r\n    const classes = useStyles();\r\n\r\n    return (<div>\r\n        <Card>\r\n            <CardContent>\r\n                <Box>\r\n                    <TextareaAutosize rowsMin={50}\r\n                                      className={classes.edit}\r\n                                      disabled\r\n                                      value={JSON.stringify(json, null, 4)}\r\n                    />\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    </div>)\r\n}\r\n\r\nfunction Mapping({mappings}) {\r\n    const [chk, setChk] = React.useState('form');\r\n\r\n    function handleRadioChange(e) {\r\n        setChk(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <FormControl component=\"fieldset\">\r\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                    <FormControlLabel value=\"form\" checked={chk === \"form\"} onChange={handleRadioChange}\r\n                                      control={<Radio color=\"primary\"/>} label=\"폼\"/>\r\n                    <FormControlLabel value=\"json\" checked={chk === \"json\"} onChange={handleRadioChange}\r\n                                      control={<Radio color=\"primary\"/>} label=\"json\"/>\r\n                </RadioGroup>\r\n            </FormControl>\r\n\r\n            <Box mt={2}>\r\n                {\r\n                    chk === \"form\" ?\r\n                        <FormCard json={mappings}/>\r\n                        :\r\n                        <JsonCard json={mappings}/>\r\n                }\r\n            </Box>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.indicesReducers}))(Mapping);\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar TableHead = React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'thead' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    InputMore.label = label ? React.createElement(React.Fragment, null, label, required && \"\\xA0*\") : label;\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 3,\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      marginLeft: 14,\n      marginRight: 14\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = React.forwardRef(function FormHelperText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), children === ' ' ? // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : children);\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = React.createElement(CheckBoxIcon, null);\nvar defaultIcon = React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","import Client from '~/Client'\r\nimport {SET_INDEX_TEMPLATE, SET_INDEX_TEMPLATES, SET_COMMENTS} from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexTemplatesAction = () => dispatch => client.call({\r\n    uri: '/elasticsearch/_cat/templates?format=json'\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_TEMPLATES,\r\n    payload: response.data.filter(template => !template['name'].startsWith(\".\"))\r\n}))\r\n\r\n\r\nexport const addIndexTemplateAction = ({template, index_patterns, settings, mappings}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"PUT\",\r\n    data: {\r\n        index_patterns,\r\n        settings,\r\n        mappings\r\n    }\r\n})\r\n\r\nexport const deleteIndexTemplateAction = ({template}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"DELETE\",\r\n})\r\n\r\nexport const setIndexTemplateAction = ({ template }) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`\r\n}).then(response => dispatch({type: SET_INDEX_TEMPLATE, payload: response.data[template]}))\r\n\r\n\r\nexport const setIndexTemplateCommentsAction = () => dispatch => client.call({\r\n    uri: `/templates/comments`,\r\n    method: \"GET\",\r\n}).then(response => {\r\n    if(response.data == undefined || response.data.hits == undefined || response.data.hits.hits.length === 0){\r\n        dispatch({type: SET_COMMENTS, payload: []})\r\n    }else{\r\n        let list = response.data.hits.hits.map((item) => {\r\n            return item;\r\n        })\r\n        dispatch({type: SET_COMMENTS, payload: list})\r\n    }\r\n})\r\n\r\nexport const addCommentsAction = ({id, name, updatedComment}) => dispatch => client.call({\r\n    uri: `/templates/comments`,\r\n    method: \"PUT\",\r\n    data: {\r\n        \"name\": name,\r\n        \"id\": id,\r\n        \"data\": updatedComment\r\n    }\r\n})\r\n","module.exports = flatten\nflatten.flatten = flatten\nflatten.unflatten = unflatten\n\nfunction isBuffer (obj) {\n  return obj &&\n    obj.constructor &&\n    (typeof obj.constructor.isBuffer === 'function') &&\n    obj.constructor.isBuffer(obj)\n}\n\nfunction keyIdentity (key) {\n  return key\n}\n\nfunction flatten (target, opts) {\n  opts = opts || {}\n\n  const delimiter = opts.delimiter || '.'\n  const maxDepth = opts.maxDepth\n  const transformKey = opts.transformKey || keyIdentity\n  const output = {}\n\n  function step (object, prev, currentDepth) {\n    currentDepth = currentDepth || 1\n    Object.keys(object).forEach(function (key) {\n      const value = object[key]\n      const isarray = opts.safe && Array.isArray(value)\n      const type = Object.prototype.toString.call(value)\n      const isbuffer = isBuffer(value)\n      const isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      )\n\n      const newKey = prev\n        ? prev + delimiter + transformKey(key)\n        : transformKey(key)\n\n      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&\n        (!opts.maxDepth || currentDepth < maxDepth)) {\n        return step(value, newKey, currentDepth + 1)\n      }\n\n      output[newKey] = value\n    })\n  }\n\n  step(target)\n\n  return output\n}\n\nfunction unflatten (target, opts) {\n  opts = opts || {}\n\n  const delimiter = opts.delimiter || '.'\n  const overwrite = opts.overwrite || false\n  const transformKey = opts.transformKey || keyIdentity\n  const result = {}\n\n  const isbuffer = isBuffer(target)\n  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {\n    return target\n  }\n\n  // safely ensure that the key is\n  // an integer.\n  function getkey (key) {\n    const parsedKey = Number(key)\n\n    return (\n      isNaN(parsedKey) ||\n      key.indexOf('.') !== -1 ||\n      opts.object\n    ) ? key\n      : parsedKey\n  }\n\n  function addKeys (keyPrefix, recipient, target) {\n    return Object.keys(target).reduce(function (result, key) {\n      result[keyPrefix + delimiter + key] = target[key]\n\n      return result\n    }, recipient)\n  }\n\n  function isEmpty (val) {\n    const type = Object.prototype.toString.call(val)\n    const isArray = type === '[object Array]'\n    const isObject = type === '[object Object]'\n\n    if (!val) {\n      return true\n    } else if (isArray) {\n      return !val.length\n    } else if (isObject) {\n      return !Object.keys(val).length\n    }\n  }\n\n  target = Object.keys(target).reduce(function (result, key) {\n    const type = Object.prototype.toString.call(target[key])\n    const isObject = (type === '[object Object]' || type === '[object Array]')\n    if (!isObject || isEmpty(target[key])) {\n      result[key] = target[key]\n      return result\n    } else {\n      return addKeys(\n        key,\n        result,\n        flatten(target[key], opts)\n      )\n    }\n  }, {})\n\n  Object.keys(target).forEach(function (key) {\n    const split = key.split(delimiter).map(transformKey)\n    let key1 = getkey(split.shift())\n    let key2 = getkey(split[0])\n    let recipient = result\n\n    while (key2 !== undefined) {\n      if (key1 === '__proto__') {\n        return\n      }\n\n      const type = Object.prototype.toString.call(recipient[key1])\n      const isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      )\n\n      // do not write over falsey, non-undefined values if overwrite is false\n      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {\n        return\n      }\n\n      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {\n        recipient[key1] = (\n          typeof key2 === 'number' &&\n          !opts.object ? [] : {}\n        )\n      }\n\n      recipient = recipient[key1]\n      if (split.length > 0) {\n        key1 = getkey(split.shift())\n        key2 = getkey(split[0])\n      }\n    }\n\n    // unflatten again for 'messy objects'\n    recipient[key1] = unflatten(target[key], opts)\n  })\n\n  return result\n}\n","import React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField, \r\n    Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\nimport flat from \"flat\";\r\nimport styled from \"styled-components\";\r\nimport {positions, spacing} from \"@material-ui/system\";\r\n\r\nimport {addCommentsAction, setIndexTemplateCommentsAction} from \"../../redux/actions/indexTemplateActions\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\n\r\nfunction SettingsJson2html(settings) {\r\n    if (!settings) {\r\n        return null\r\n    }\r\n\r\n    const flatSettingsMap = flat(settings['settings'] ? settings['settings'] : settings)\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        주요항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>샤드 갯수</TableCell>\r\n                                <TableCell>레플리카 갯수</TableCell>\r\n                                <TableCell>리프레쉬 간격</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_shards']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['settings']||{})['index']||{})['number_of_replicas']|| '-')}</TableCell>\r\n                                <TableCell>{(((settings['defaults']||{})['index']||{})['refresh_interval']|| '-')}</TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h5\"} mt={5}>\r\n                        기타항목\r\n                    </Typography>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>키</TableCell>\r\n                                <TableCell>값</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                Object.keys(flatSettingsMap||{}).map(key => {\r\n                                    return (\r\n                                        <TableRow key={key}>\r\n                                            <TableCell>{key}</TableCell>\r\n                                            <TableCell>{flatSettingsMap[key]||''}</TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction MappingsJson2html(json, name, comments, dispatch, mode, folding) {\r\n    \r\n    let comment = {};\r\n    if(comments && comments.length > 0){\r\n        comments.forEach((item) => {\r\n            let map = item.sourceAsMap;\r\n            if(map[\"name\"] == name){\r\n                comment.id = item.id;\r\n                comment.comments = item.sourceAsMap.comments;\r\n                comment.name = item.sourceAsMap.name;\r\n            }\r\n        })\r\n    }else{\r\n        comment.name = name;\r\n    }\r\n\r\n    let topFields = []\r\n    console.log(mode, folding)\r\n    if(mode === 'view' && folding){\r\n        console.log(\"view, folding\");\r\n        \r\n        topFields = [\r\n            {title: \"타입\", key: \"type\", component: (val) => {return val}},\r\n            // {title: \"색인\", key: \"enabled\", component: (val) => {return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>}},\r\n            {title: \"색인\", key: \"enabled\", component: (val) => {\r\n                if (val !== undefined && val !== null && val === false) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                        </React.Fragment>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n            }},\r\n            {title: \"분석기\", key: \"analyzer\", component: (val) => {return val}},\r\n        ]\r\n    }else{\r\n        console.log(\"else\");\r\n        topFields = [\r\n            {title: \"타입\", key: \"type\", component: (val) => {return val}},\r\n            // {title: \"색인\", key: \"enabled\", component: (val) => {return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>}},\r\n            {title: \"색인\", key: \"enabled\", component: (val) => {\r\n                if (val !== undefined && val !== null && val === false) {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                        </React.Fragment>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n            }},\r\n            {title: \"분석기\", key: \"analyzer\", component: (val) => {return val}},\r\n            {title: \"copy_to\", key: \"copy_to\", component: (val) => {return val}},\r\n            {title: \"ignore_above\", key: \"ignore_above\", component: (val) => {return val}},\r\n            {title: \"null_value\", key: \"null_value\", component: (val) => {return val}},\r\n            {title: \"doc_values\", key: \"doc_values\", component: (val) => {return val}},\r\n            {title: \"similarity\", key: \"similarity\", component: (val) => {return val||\"\"}},\r\n            {title: \"term_vector\", key: \"term_vector\", component: (val) => {return val}},\r\n            {title: \"store\", key: \"store\", component: (val) => {\r\n                    if (val !== undefined && val !== null && val === false) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Checkbox style={{cursor: \"default\"}} checked={false} />\r\n                            </React.Fragment>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Checkbox style={{cursor: \"default\"}} checked={true}/>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                // return <Checkbox style={{cursor: \"default\"}} checked={val||true}/>\r\n            }}\r\n        ]\r\n    }\r\n\r\n    const flatJsonMap = flat(json['properties'] ? json['properties'] : json)\r\n\r\n    let formatKeyFlatJsonMap = {}\r\n    Object.keys(flatJsonMap).forEach(key => {\r\n        const replaceKey = key.replace(/\\.properties/gi, \"\")\r\n\r\n        const sortKey = replaceKey.substring(0, replaceKey.lastIndexOf(\".\"))\r\n        const suffix = replaceKey.substring(replaceKey.lastIndexOf(\".\") + 1)\r\n        if (!formatKeyFlatJsonMap[sortKey]) {\r\n            formatKeyFlatJsonMap[sortKey] = {}\r\n        }\r\n        formatKeyFlatJsonMap[sortKey][suffix] = flatJsonMap[key]\r\n    })\r\n\r\n    return (\r\n        <table border={1} width={\"100%\"} cellSpacing={0} cellPadding={8}>\r\n            <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>이름</th>\r\n                {\r\n                    topFields.map(field => <th key={field['title']}>{field['title']}</th>)\r\n                }\r\n                <th>기타설정</th>\r\n                <th>설명</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                Object.keys(formatKeyFlatJsonMap)\r\n                    .filter(key => !key.endsWith(\".copy_to\")).map((key, index) => {\r\n                    const obj = formatKeyFlatJsonMap[key]\r\n\r\n                    const etc = Object.keys(obj).map(k => {\r\n                        const o = topFields.find(m => m['key'] === k)\r\n                        return o ? null : k + \": \" + obj[k]\r\n                    }).filter(o => o)\r\n\r\n                    let mappingName = key.replace(/\\.fields/gi, \"\");\r\n                    if(mappingName.includes(\"s-prod-v\")){\r\n                        mappingName = \"s-prod-v\";\r\n                    }\r\n\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td align={\"center\"}>{index + 1}</td>\r\n                            <td>{key.replace(/\\.fields/gi, \"\")}</td>\r\n                            {\r\n                                topFields.map(field => <td key={field['title']} align={\"center\"}>{field['component'](obj[field['key']])}</td>)\r\n                            }\r\n                            <td>\r\n                                {etc.join(\", \")}\r\n                            </td>\r\n                            <td>\r\n                                {\r\n                                mode === 'view' ? \r\n                                    mappingName.includes(\".\") ? <></> \r\n                                        :\r\n                                            comment.comments === undefined || comment.comments === null ? \r\n                                            <></> :\r\n                                            <Box width=\"100%\">\r\n                                                {comment.comments[mappingName]}\r\n                                            </Box> \r\n                                : <></> \r\n                                }\r\n                                \r\n                                {\r\n                                    mode === 'edit' ?  \r\n                                        mappingName.includes(\".\") ? <></> :\r\n                                            comment.comments === undefined || comment.comments === null  ? \r\n                                                <TextField \r\n                                                    width=\"100%\"\r\n                                                    onKeyPress={(e) => {\r\n                                                        // if(e.key =='Enter'){\r\n                                                            if(comment.comments == undefined){\r\n                                                                comment.comments = {};\r\n                                                            }\r\n                                                            let n = mappingName + \"\";\r\n                                                            comment.comments[n] = e.target.value;\r\n                                                            dispatch(addCommentsAction({\"id\": null, \"name\": name, \"updatedComment\": comment}))\r\n                                                                .then((res) => {\r\n                                                                    dispatch(setIndexTemplateCommentsAction())\r\n                                                                }).catch((err) => { \r\n                                                                    console.log(err) \r\n                                                                });\r\n                                                        // }\r\n                                                    }}\r\n                                                    onBlur={(e) => {\r\n                                                        if(comment.comments == undefined){\r\n                                                            comment.comments = {};\r\n                                                        }\r\n                                                        let n = mappingName + \"\";\r\n                                                        comment.comments[n] = e.target.value;\r\n                                                        dispatch(addCommentsAction({\"id\": null, \"name\": name, \"updatedComment\": comment}))\r\n                                                            .then((res) => {\r\n                                                                dispatch(setIndexTemplateCommentsAction())\r\n                                                            }).catch((err) => { \r\n                                                                console.log(err) \r\n                                                            });\r\n                                                    }}\r\n                                                    key={mappingName}\r\n                                                    defaultValue={\"\"} /> : \r\n                                                <TextField \r\n                                                    width=\"100%\"\r\n                                                    onKeyPress={\r\n                                                        (e) => {\r\n                                                            // if(e.key =='Enter'){\r\n                                                                let n = mappingName + \"\";\r\n                                                                comment.comments[n] = e.target.value;\r\n                                                                dispatch(addCommentsAction({\"id\": comment.id, \"name\": name, \"updatedComment\": comment}))\r\n                                                                    .then((res) => {\r\n                                                                        dispatch(setIndexTemplateCommentsAction())\r\n                                                                    }).catch((err) => { \r\n                                                                        console.log(err) \r\n                                                                    });\r\n                                                            // }\r\n                                                        }\r\n                                                    }\r\n                                                    onBlur={(e) => {\r\n                                                        if(comment.comments == undefined){\r\n                                                            comment.comments = {};\r\n                                                        }\r\n                                                        let n = mappingName + \"\";\r\n                                                        comment.comments[n] = e.target.value;\r\n                                                        dispatch(addCommentsAction({\"id\": null, \"name\": name, \"updatedComment\": comment}))\r\n                                                            .then((res) => {\r\n                                                                dispatch(setIndexTemplateCommentsAction())\r\n                                                            }).catch((err) => { \r\n                                                                console.log(err) \r\n                                                            });\r\n                                                    }}\r\n                                                    key={mappingName}\r\n                                                    defaultValue={comment.comments[mappingName]} /> \r\n                                    : <></>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nfunction Render({json, type, name, comments, dispatch, mode, folding}) {\r\n    let validJson = json\r\n    try {\r\n        if (typeof json === 'string') {\r\n            validJson = JSON.parse(json)\r\n        }\r\n    } catch (error) {\r\n        // console.warn(\"parsing error\", typeof json)\r\n    }\r\n\r\n    if (validJson && type === \"mappings\") {\r\n        return MappingsJson2html(validJson, name, comments, dispatch, mode, folding)\r\n    } else if (validJson && type === \"settings\") {\r\n        return SettingsJson2html(validJson)\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Box style={{minHeight: \"150px\"}}>\r\n                </Box>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Render\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/indices/pipeline/Summary.js","redux/actions/pipelineActions.js"],"names":["fields","id","label","sorting","connect","store","authUser","dsearchReducers","list","pipelineReducers","pipelineList","dispatch","aceEditor","useRef","useEffect","setPipelineList","name","useState","nameError","setNameError","modalFlag","setModalFlag","successFlag","setSuccessFlag","snackbarFlag","setSnackbarFlag","message","setMessage","key","setKey","flag","setFlag","orderBy","setOrderBy","order","setOrder","isJson","str","JSON","parse","e","closeModal","console","log","viewList","Object","keys","map","l","n","title","no","Fragment","align","role","index","onClick","style","cursor","color","component","Paper","width","field","active","direction","event","isAsc","sort","a","b","x","y","item","variant","whiteSpace","openModalEdit","borderColor","openModalDelete","open","autoHideDuration","onClose","elevation","severity","fullWidth","fontFamily","fontSize","stringify","inputRef","error","placeholder","helperText","ref","mode","theme","height","tabSize","setOptions","useWorker","value","disabled","pipelineName","current","length","replace","editor","getValue","addPipeline","then","res","catch","err","handleAddPipeline","editPipeline","deletePipeline","client","Client","setPipelineAction","pipeline","type","SET_PIPELINE","payload","getPipeline","jsonData","call","uri","method","headers","data","response","SET_PIPELINE_RESULT","getPipelineDetail","SET_PIPELINE_LIST","DELETE_PIPELINE","ADD_PIPELINE"],"mappings":"oXAwBMA,EAAS,CACX,CAAEC,GAAI,KAAMC,MAAO,IAAKC,SAAS,GACjC,CAAEF,GAAI,OAAQC,MAAO,8CAAYC,SAAS,GAC1C,CAAEF,GAAI,OAAQC,MAAO,eAAMC,SAAS,GACpC,CAAEF,GAAI,SAAUC,MAAO,eAAMC,SAAS,IAyW3BC,uBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,SAChCE,KAAMH,EAAMI,iBAAiBC,gBAFlBN,EAlTf,YAAgD,IAA7BO,EAA4B,EAA5BA,SAAUL,EAAkB,EAAlBA,SAAUE,EAAQ,EAARA,KAC7BI,EAAYC,iBAAO,MAEzBC,qBAAU,WACNH,EAASI,iBACV,IAEH,IAAMC,EAAOH,iBAAO,MAPuB,EASTI,oBAAS,GATA,mBASpCC,EAToC,KASzBC,EATyB,OAUTF,oBAAS,GAVA,mBAUpCG,EAVoC,KAUzBC,EAVyB,OAWLJ,oBAAS,GAXJ,mBAWpCK,EAXoC,KAWvBC,EAXuB,OAYHN,oBAAS,GAZN,mBAYpCO,EAZoC,KAYtBC,EAZsB,OAabR,mBAAS,IAbI,mBAapCS,EAboC,KAa3BC,EAb2B,OAcrBV,mBAAS,IAdY,mBAcpCW,EAdoC,KAc/BC,EAd+B,QAenBZ,mBAAS,GAfU,qBAepCa,GAfoC,MAe9BC,GAf8B,SAgBbd,mBAAS,IAhBI,qBAgBpCe,GAhBoC,MAgB3BC,GAhB2B,SAiBjBhB,mBAAS,OAjBQ,qBAiBpCiB,GAjBoC,MAiB7BC,GAjB6B,MAmB3C,SAASC,GAAOC,GACZ,IAEI,MAAwB,kBADbC,KAAKC,MAAMF,GAExB,MAAOG,GACL,OAAO,GAIf,SAASC,KACLC,QAAQC,IAAIf,GACZP,GAAa,GA4FjB,IAAMuB,GAAWC,OAAOC,KAAKtC,GAAMuC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CAACC,MAAOF,EAAGG,GAAIF,MAEjE,OACI,kBAAC,IAAMG,SAAP,KACI,6BAEA,kBAAC,IAAD,CAAKC,MAAO,SACP/C,EAASgD,KAAKC,MACX,kBAAC,IAAD,CACIC,QAhFpB,WACInC,GAAa,GACbU,GAAQ,IA+EQ0B,MAAO,CAAEC,OAAQ,WACjBC,MAAO,WAHX,+CAME,sCAIV,6BAEA,kBAAC,IAAD,CAAgBC,UAAWC,KACvB,kBAAC,IAAD,KACI,kCACI,yBAAKC,MAAM,OACX,8BACA,yBAAKA,MAAM,QACX,yBAAKA,MAAM,SAEf,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEQ9D,EAAO+C,KAAI,SAAAgB,GAAK,OACZ,kBAAC,IAAD,CAAWV,MAAM,SAASzB,IAAKmC,EAAK,IAE5BA,EAAK,QACD,kBAAC,IAAD,CACIC,OAAQhC,KAAY+B,EAAK,GACzBE,UAAWjC,KAAY+B,EAAK,GAAS7B,GAAQ,MAC7CsB,QAAS,SAAAU,GACLjC,GAAW8B,EAAK,IAChB,IAAMI,EAAQnC,KAAY+B,EAAK,IAAoB,QAAV7B,GACzCC,GAASgC,EAAQ,OAAS,SAG7BJ,EAAK,OAGVA,EAAK,YAUjC,kBAAC,IAAD,KAEQnB,GACKwB,MAAK,SAACC,EAAGC,GACN,GAAItC,IAAWE,GAAO,CAClB,IAAIqC,EAAIF,EAAC,MACLG,EAAIF,EAAC,MACT,MAAc,QAAVpC,GACOqC,EAAIC,EAAI,GAAK,EAEbD,EAAIC,GAAK,EAAI,EAGxB,OAAO,KAEdzB,KAAI,SAAC0B,EAAMlB,GACR,OAAQ,kBAAC,IAAD,CAAU3B,IAAK2B,GACnB,kBAAC,IAAD,CAAWF,MAAO,UACboB,EAAI,GAAS,GAElB,kBAAC,IAAD,CAAWpB,MAAO,UACd,kBAAC,IAAD,CAAMG,QAAS,kBAvKpCvD,EAuKoDwE,EAAI,MAtKvE5C,EAAO5B,GACPoB,GAAa,QACbU,GAAQ,GAHZ,IAAmB9B,GAuKoEyE,QAAS,UAAWjB,MAAO,CAAEC,OAAQ,WAAaC,MAAO,UAAW1D,GAAIwE,EAAI,OAAaA,EAAI,QAQ/InE,EAASgD,KAAKC,MACX,kBAAC,IAAD,CAAWF,MAAO,UACd,kBAAC,IAAD,CAAQqB,QAAS,WAAYf,MAAO,UAAWF,MAAO,CAAEkB,WAAY,UAAYnB,QAAS,kBA3KrI,SAAuBiB,GACnB5C,EAAO4C,GACPpD,GAAa,GACbU,GAAQ,GAwK8H6C,CAAcH,EAAI,SAAhH,iBACW,kBAAC,IAAD,MAClBnE,EAASgD,KAAKC,MACX,kBAAC,IAAD,CAAWF,MAAO,UACd,kBAAC,IAAD,CAAQqB,QAAQ,WAAWjB,MAAO,CAAEkB,WAAY,SAAUE,YAAY,MAAOlB,MAAO,OAAQH,QAAS,kBAzKjJ,SAAyBiB,GACrB5C,EAAO4C,GACPpD,GAAa,GACbU,GAAQ,GAsK2I+C,CAAgBL,EAAI,SAA/H,iBACW,kBAAC,IAAD,aAO/C,kBAAC,IAAD,CAAUM,KAAMvD,EAAcwD,iBAAkB,IAAMC,QAAS,WAAQxD,GAAgB,KAClFH,EAAc,kBAAC,IAAD,CAAU4D,UAAW,EAAGR,QAAQ,SAASS,SAAS,QAAlD,IAA2DzD,EAA3D,IAAqE,gBAArE,KACT,kBAAC,IAAD,CAAUwD,UAAW,EAAGR,QAAQ,SAASS,SAAS,SAAlD,IAA4DzD,EAA5D,KAAuE,gBAAvE,MASV,kBAAC,IAAD,CAAQqD,KAAM3D,EACNgE,WAAS,EACTH,QAAS,kBAAMxC,OAEnB,kBAAC,IAAD,KAEiB,IAATX,GAAa,8CACA,IAATA,GAAa,8CACA,IAATA,GAAY,8CACR,+CAGpB,kBAAC,IAAD,KAEiB,IAATA,GAAa,yBAAK2B,MAAO,CAAC4B,WAAY,QAASC,SAAS,SAA3C,IAAsDhD,KAAKiD,UAAU/E,EAAKoB,GAAM,KAAM,GAAtF,KACA,IAATE,GAAa,kBAAC,IAAD,CAAK2B,MAAO,CAACK,MAAO,SACjB,kBAAC,IAAD,CACIsB,WAAS,EAACI,SAAUxE,EAAMyE,MAAOvE,EACjCwE,YAAa,2FACbxF,MAAM,2DACNyF,WAAW,mEAEf,6BACA,kBAAC,IAAD,CACIC,IAAKhF,EACLX,GAAG,YACH4F,KAAK,OACLC,MAAM,SACNR,SAAS,OACTS,OAAQ,QACRC,QAAS,EACTlC,MAAM,OACNmC,WAAY,CAAEC,WAAW,GACzBC,MA9TlC,u1BAiU2B,IAATrE,GAAa,kBAAC,IAAD,CAAK2B,MAAO,CAACK,MAAO,SACjB,kBAAC,IAAD,CACIsB,WAAS,EACTgB,UAAU,EAAMD,MAAOvE,EACvB1B,MAAM,8CACNyF,WAAW,2EAEf,6BACA,kBAAC,IAAD,CACIC,IAAKhF,EACLiF,KAAK,OACLC,MAAM,SACNR,SAAS,OACTS,OAAQ,QACRjC,MAAM,OACNkC,QAAS,EACTC,WAAY,CAAEC,WAAW,GACzBC,MAAO7D,KAAKiD,UAAU/E,EAAKoB,GAAM,KAAM,MAGvD,iGAGpB,kBAAC,IAAD,KAEiB,IAATE,GAAa,qCACA,IAATA,GAAa,kBAAC,IAAD,CAAQ4C,QAAS,WAAYf,MAAO,UAAWH,QAAS,kBA/O7F,WACI,IAAI6C,EAAerF,EAAKsF,QAAQH,MAC7BE,EAAaE,SAAWF,EAAaG,QAAQ,SAAU,IAAID,OAK1DnE,GAAOxB,EAAU0F,QAAQG,OAAOC,cAIpC/E,EAAW,gBAEXhB,EACIgG,YAAY3F,EAAKsF,QAAQH,MAAOvF,EAAU0F,QAAQG,OAAOC,aAC3DE,MAAK,SAACC,GACJpF,GAAgB,GAChBF,GAAe,GACfZ,EAASI,kBAEZ+F,OAAM,SAACC,GACJtF,GAAgB,GAChBF,GAAe,GACfZ,EAASI,kBAEb0B,MAtBItB,GAAa,GA4O8E6F,KAA9D,gBACA,IAATlF,GAAa,kBAAC,IAAD,CAAQ4C,QAAS,WAAYf,MAAO,UAAWH,QAAS,WAnNzFpB,GAAOxB,EAAU0F,QAAQG,OAAOC,cAIpC/E,EAAW,gBACXhB,EACIsG,YAAarF,EAAKhB,EAAU0F,QAAQG,OAAOC,aAC7CE,MAAK,SAACC,GACJpF,GAAgB,GAChBF,GAAe,GACfZ,EAASI,kBAEZ+F,OAAM,SAACC,GACJtF,GAAgB,GAChBF,GAAe,GACfZ,EAASI,kBAEb0B,QAkMqC,gBACb,kBAAC,IAAD,CAAQiC,QAAQ,WAAWjB,MAAO,CAAEkB,WAAY,SAAUE,YAAY,MAAOlB,MAAO,OAAQH,QAAS,kBA/L7H7B,EAAW,gBACXhB,EACIuG,YAAetF,IACjBgF,MAAK,SAACC,GACJpF,GAAgB,GAChBF,GAAe,GACfZ,EAASI,kBAEZ+F,OAAM,SAACC,GACJtF,GAAgB,GAChBF,GAAe,GACfZ,EAASI,uBAEb0B,OAkLwB,gBAEZ,kBAAC,IAAD,CAAQe,QAAS,kBAAMf,OAAvB,uB,iCC9XpB,yPAGM0E,EAAS,IAHf,MAGmBC,GAENC,EAAoB,SAACC,GAAD,OAAc,SAAA3G,GAAQ,OAAIA,EAAS,CAAC4G,KAAMC,IAAcC,QAASH,MAErFI,EAAc,SAACjD,EAAMkD,GAAP,OAAoB,SAAAhH,GAAQ,OAAIwG,EAAOS,KAAK,CACnEC,IAAK,aAAepD,EACpBqD,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAML,IACPf,MAAK,SAAAqB,GAAQ,OAAItH,EAAS,CAAC4G,KAAMW,IAAqBT,QAASQ,EAASD,YAE9DG,EAAoB,SAAC1D,EAAMkD,GAAP,OAAoB,SAAAhH,GAAQ,OAAIwG,EAAOS,KAAK,CACzEC,IAAK,aAAepD,EAAO,UAC3BqD,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAML,IACPf,MAAK,SAAAqB,GAAQ,OAAItH,EAAS,CAAC4G,KAAMW,IAAqBT,QAASQ,EAASD,YAE9DjH,EAAkB,kBAAM,SAAAJ,GAAQ,OAAIwG,EAAOS,KAAK,CACzDC,IAAK,iBACLC,OAAQ,QACTlB,MAAK,SAAAqB,GAAQ,OAAItH,EAAS,CAAC4G,KAAMa,IAAmBX,QAASQ,EAASD,YAE5Dd,EAAiB,SAACzC,GAAD,OAAU,SAAA9D,GAAQ,OAAIwG,EAAOS,KAAK,CAC5DC,IAAK,aAAepD,EACpBqD,OAAQ,WACTlB,MAAK,SAAAqB,GAAQ,OAAItH,EAAS,CAAC4G,KAAMc,IAAiBZ,QAASQ,EAASD,YAE1DrB,EAAc,SAAClC,EAAMkD,GAAP,OAAoB,SAAAhH,GAAQ,OAAIwG,EAAOS,KAAK,CACnEC,IAAK,aAAepD,EACpBqD,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAML,IACPf,MAAK,SAAAqB,GAAQ,OAAItH,EAAS,CAAC4G,KAAMe,IAAcb,QAASQ,EAASD,YAEvDf,EAAe,SAACxC,EAAMkD,GAAP,OAAoB,SAAAhH,GAAQ,OAAIwG,EAAOS,KAAK,CACpEC,IAAK,aAAepD,EACpBqD,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAML,IACPf,MAAK,SAAAqB,GAAQ,OAAItH,EAAS,CAAC4G,KAAMe,IAAcb,QAASQ,EAASD","file":"static/js/61.4b8b53dd.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Link, Paper,\r\n    Snackbar,\r\n    Table,\r\n    TableBody,\r\n    TableCell, TableContainer,\r\n    TableHead,\r\n    TableRow, TableSortLabel,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\nimport {addPipeline, deletePipeline, editPipeline, setPipelineList} from '@actions/pipelineActions'\r\n\r\nconst fields = [\r\n    { id: \"no\", label: \"#\", sorting: false},\r\n    { id: \"name\", label: \"파이프라인 이름\", sorting: true},\r\n    { id: \"edit\", label: \"수정\", sorting: false},\r\n    { id: \"delete\", label: \"삭제\", sorting: false},\r\n]\r\n\r\nconst TEMPLATE = \r\n`{\r\n    \"description\": \"\",\r\n    \"processors\": [\r\n      {\r\n        \"lowercase\": {\r\n            \"field\": \"field\"\r\n        }\r\n      },\r\n      {\r\n        \"html_strip\": {\r\n          \"field\": \"field\"\r\n        }\r\n      },\r\n      {\r\n        \"set\": {\r\n          \"field\": \"field\",\r\n          \"value\": \"value\"\r\n        }\r\n      },\r\n      {\r\n        \"trim\": {\r\n          \"field\": \"field\"\r\n        }\r\n      },\r\n      {\r\n        \"split\": {\r\n          \"field\": \"field\",\r\n          \"separator\": \",\"\r\n        }\r\n      },\r\n      {\r\n        \"gsub\": {\r\n          \"field\": \"field\",\r\n          \"pattern\": \"pattern\",\r\n          \"replacement\": \"replacement\"\r\n        }\r\n      },\r\n      {\r\n        \"remove\": {\r\n          \"field\": \"field\"\r\n        }\r\n      },\r\n      {\r\n        \"script\": {\r\n          \"lang\": \"painless\",\r\n          \"source\": \"\"\r\n        }\r\n      }\r\n    ]\r\n  }`;\r\n\r\nfunction Summary({ dispatch, authUser, list }) {\r\n    const aceEditor = useRef(null)\r\n\r\n    useEffect(() => {\r\n        dispatch(setPipelineList())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const name = useRef(null);\r\n    \r\n    const [nameError, setNameError] = useState(false)\r\n    const [modalFlag, setModalFlag] = useState(false)\r\n    const [successFlag, setSuccessFlag] = useState(false)\r\n    const [snackbarFlag, setSnackbarFlag] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [key, setKey] = useState('')\r\n    const [flag, setFlag] = useState(0);\r\n    const [orderBy, setOrderBy] = useState(\"\")\r\n    const [order, setOrder] = useState(\"asc\")\r\n\r\n    function isJson(str) {\r\n        try {\r\n            let json = JSON.parse(str);\r\n            return (typeof json === 'object');\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function closeModal(){\r\n        console.log(key);\r\n        setModalFlag(false)\r\n    }\r\n\r\n    function openModal(id){\r\n        setKey(id);\r\n        setModalFlag(true);\r\n        setFlag(1);\r\n    }\r\n\r\n    function openModalEdit(item){\r\n        setKey(item);\r\n        setModalFlag(true);\r\n        setFlag(3);\r\n    }\r\n\r\n    function openModalDelete(item){\r\n        setKey(item);\r\n        setModalFlag(true);\r\n        setFlag(4);\r\n    }\r\n\r\n    function openModalAdd(){\r\n        setModalFlag(true);\r\n        setFlag(2);\r\n    }\r\n\r\n    function handleAddPipeline(){\r\n        let pipelineName = name.current.value;\r\n        if(pipelineName.length !== pipelineName.replace(/\\s| /gi, \"\").length){\r\n            setNameError(true);\r\n            return ;\r\n        }\r\n\r\n        if(!isJson(aceEditor.current.editor.getValue())){\r\n            return ;\r\n        }\r\n\r\n        setMessage(\"추가\")\r\n        \r\n        dispatch(\r\n            addPipeline(name.current.value, aceEditor.current.editor.getValue())\r\n        ).then((res)=>{\r\n            setSnackbarFlag(true)\r\n            setSuccessFlag(true)\r\n            dispatch(setPipelineList());\r\n        })\r\n        .catch((err) => {\r\n            setSnackbarFlag(true)\r\n            setSuccessFlag(false)\r\n            dispatch(setPipelineList());\r\n        })\r\n        closeModal()\r\n    }\r\n\r\n    function handleEditPipeline(){\r\n        if(!isJson(aceEditor.current.editor.getValue())){\r\n            return ;\r\n        }\r\n\r\n        setMessage(\"수정\")\r\n        dispatch(\r\n            editPipeline(key, aceEditor.current.editor.getValue())\r\n        ).then((res)=>{\r\n            setSnackbarFlag(true)\r\n            setSuccessFlag(true)\r\n            dispatch(setPipelineList());\r\n        })\r\n        .catch((err) => {\r\n            setSnackbarFlag(true)\r\n            setSuccessFlag(false)\r\n            dispatch(setPipelineList());\r\n        })\r\n        closeModal()\r\n    }\r\n\r\n    function handleDeletePipeline(){\r\n        setMessage(\"삭제\")\r\n        dispatch(\r\n            deletePipeline(key)\r\n        ).then((res)=>{\r\n            setSnackbarFlag(true)\r\n            setSuccessFlag(true)\r\n            dispatch(setPipelineList());\r\n        })\r\n        .catch((err) => {\r\n            setSnackbarFlag(true)\r\n            setSuccessFlag(false)\r\n            dispatch(setPipelineList());\r\n        })\r\n        closeModal()\r\n    }\r\n\r\n    const viewList = Object.keys(list).map((l, n) => ({title: l, no: n}))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n\r\n            <Box align={'right'}>\r\n                {authUser.role.index ?\r\n                    <Link\r\n                        onClick={openModalAdd}\r\n                        style={{ cursor: \"pointer\" }}\r\n                        color={\"primary\"}>\r\n                        파이프라인 추가\r\n                    </Link>\r\n                    : <></>\r\n                }\r\n            </Box>\r\n\r\n            <br/>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table>\r\n                    <colgroup>\r\n                        <col width=\"5%\" />\r\n                        <col />\r\n                        <col width=\"10%\" />\r\n                        <col width=\"10%\" />\r\n                    </colgroup>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {\r\n                                fields.map(field =>\r\n                                    <TableCell align=\"center\" key={field['id']}>\r\n                                        {\r\n                                            field[\"sorting\"] ?\r\n                                                <TableSortLabel\r\n                                                    active={orderBy === field['id']}\r\n                                                    direction={orderBy === field['id'] ? order : 'asc'}\r\n                                                    onClick={event => {\r\n                                                        setOrderBy(field['id'])\r\n                                                        const isAsc = orderBy === field['id'] && order === 'asc';\r\n                                                        setOrder(isAsc ? 'desc' : 'asc');\r\n                                                    }}\r\n                                                >\r\n                                                    {field['label']}\r\n                                                </TableSortLabel>\r\n                                                :\r\n                                                field['label']\r\n                                        }\r\n                                    </TableCell>)\r\n                            }\r\n                            {/*<TableCell align={\"center\"} >#</TableCell>*/}\r\n                            {/*<TableCell align={\"center\"} >파이프라인 이름</TableCell>*/}\r\n                            {/*<TableCell align={\"center\"} >수정</TableCell>*/}\r\n                            {/*<TableCell align={\"center\"} >삭제</TableCell>*/}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            viewList\r\n                                .sort((a, b) => {\r\n                                    if (orderBy && order) {\r\n                                        let x = a['title']\r\n                                        let y = b['title']\r\n                                        if (order === 'asc') {\r\n                                            return x > y ? 1 : -1\r\n                                        } else {\r\n                                            return x > y ? -1 : 1\r\n                                        }\r\n                                    } else {\r\n                                        return 0\r\n                                    }})\r\n                                .map((item, index) => {\r\n                                    return  <TableRow key={index}>\r\n                                        <TableCell align={\"center\"}>\r\n                                            {item['no'] + 1}\r\n                                        </TableCell>\r\n                                        <TableCell align={\"center\"}>\r\n                                            <Link onClick={() => openModal(item['title'])} variant={\"inherit\"} style={{ cursor: \"pointer\" }} color={\"primary\"} id={item['title']} >{item['title']}</Link>\r\n                                        </TableCell>\r\n                                        {/* <TableCell align={\"center\"}>\r\n                                                                <Button variant={\"outlined\"} color={\"primary\"} style={{ whiteSpace: \"nowrap\" }} onClick={()=> openModalEdit(item)} >수정</Button>\r\n                                                            </TableCell>\r\n                                                            <TableCell align={\"center\"}>\r\n                                                                <Button variant=\"outlined\" style={{ whiteSpace: \"nowrap\", borderColor:\"red\", color: \"red\"}} onClick={() => openModalDelete(item)}>삭제</Button>\r\n                                                            </TableCell> */}\r\n                                        {authUser.role.index ?\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Button variant={\"outlined\"} color={\"primary\"} style={{ whiteSpace: \"nowrap\" }} onClick={()=> openModalEdit(item['title'])} >수정</Button>\r\n                                            </TableCell> : <TableCell></TableCell> }\r\n                                        {authUser.role.index ?\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Button variant=\"outlined\" style={{ whiteSpace: \"nowrap\", borderColor:\"red\", color: \"red\"}} onClick={() => openModalDelete(item['title'])}>삭제</Button>\r\n                                            </TableCell> : <TableCell></TableCell> }\r\n                                    </TableRow>\r\n                                })\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <Snackbar open={snackbarFlag} autoHideDuration={3000} onClose={() => { setSnackbarFlag(false); }}>\r\n                {successFlag ? <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {message} {\" 성공\"} </MuiAlert>\r\n                    : <MuiAlert elevation={6} variant=\"filled\" severity=\"error\"> {message}  {\" 실패\"} </MuiAlert> }\r\n            </Snackbar>\r\n\r\n            {/*<Card>*/}\r\n            {/*    <CardContent>*/}\r\n            {/*        */}\r\n            {/*    </CardContent>*/}\r\n            {/*</Card>*/}\r\n\r\n            <Dialog open={modalFlag}\r\n                    fullWidth\r\n                    onClose={() => closeModal()}\r\n            >\r\n                <DialogTitle>\r\n                    {\r\n                        flag === 1 ? \"파이프라인 설정\" :\r\n                            flag === 2 ? \"파이프라인 추가\" : \r\n                                flag === 3? \"파이프라인 수정\":\r\n                                    \"파이프라인 삭제\"\r\n                    }\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        flag === 1 ? <pre style={{fontFamily: \"godic\", fontSize:\"15px\"}}> {JSON.stringify(list[key], null, 2)} </pre> :\r\n                            flag === 2 ? <Box style={{width: \"100%\"}}>\r\n                                            <TextField\r\n                                                fullWidth inputRef={name} error={nameError}\r\n                                                placeholder={\"파이프라인 명칭을 입력해 주세요.\"}\r\n                                                label=\"파이프라인 명칭 입력\"\r\n                                                helperText=\"공백을 넣지 말아주세요\"\r\n                                            />\r\n                                            <br />\r\n                                            <AceEditor\r\n                                                ref={aceEditor}\r\n                                                id=\"aceEditor\"\r\n                                                mode=\"json\"\r\n                                                theme=\"kuroir\"\r\n                                                fontSize=\"15px\"\r\n                                                height={\"300px\"}\r\n                                                tabSize={2}\r\n                                                width=\"100%\"\r\n                                                setOptions={{ useWorker: false }}\r\n                                                value={TEMPLATE}\r\n                                            /> \r\n                                        </Box>: \r\n                                flag === 3 ? <Box style={{width: \"100%\"}}>\r\n                                                <TextField\r\n                                                    fullWidth \r\n                                                    disabled={true} value={key}\r\n                                                    label=\"파이프라인 명칭\"\r\n                                                    helperText=\"명칭은 수정할 수 없습니다.\"\r\n                                                />\r\n                                                <br />\r\n                                                <AceEditor\r\n                                                    ref={aceEditor}\r\n                                                    mode=\"json\"\r\n                                                    theme=\"kuroir\"\r\n                                                    fontSize=\"15px\"\r\n                                                    height={\"300px\"}\r\n                                                    width=\"100%\"\r\n                                                    tabSize={2}\r\n                                                    setOptions={{ useWorker: false }}\r\n                                                    value={JSON.stringify(list[key], null, 2)}\r\n                                                /> \r\n                                            </Box>:\r\n                                    \"이 파이프라인을 삭제하시겠습니까?\"\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {\r\n                        flag === 1 ? <></> :\r\n                            flag === 2 ? <Button variant={\"outlined\"} color={\"primary\"} onClick={() => handleAddPipeline()}>추가</Button> : \r\n                                flag === 3 ? <Button variant={\"outlined\"} color={\"primary\"} onClick={() => handleEditPipeline()}>수정</Button> :\r\n                                <Button variant=\"outlined\" style={{ whiteSpace: \"nowrap\", borderColor:\"red\", color: \"red\"}} onClick={() => handleDeletePipeline()}>삭제</Button>\r\n                    }\r\n                    <Button onClick={() => closeModal()}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    list: store.pipelineReducers.pipelineList\r\n}))(Summary)","import {SET_PIPELINE_LIST,SET_PIPELINE_RESULT, SET_PIPELINE, DELETE_PIPELINE, ADD_PIPELINE} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setPipelineAction = (pipeline) => dispatch => dispatch({type: SET_PIPELINE, payload: pipeline})\r\n\r\nexport const getPipeline = (item, jsonData) => dispatch => client.call({\r\n    uri: \"/pipeline/\" + item,\r\n    method: \"POST\",\r\n    headers: {'Content-type': 'application/json'},\r\n    data: jsonData\r\n}).then(response => dispatch({type: SET_PIPELINE_RESULT, payload: response.data}))\r\n\r\nexport const getPipelineDetail = (item, jsonData) => dispatch => client.call({\r\n    uri: \"/pipeline/\" + item + \"/detail\",\r\n    method: \"POST\",\r\n    headers: {'Content-type': 'application/json'},\r\n    data: jsonData\r\n}).then(response => dispatch({type: SET_PIPELINE_RESULT, payload: response.data}))\r\n\r\nexport const setPipelineList = () => dispatch => client.call({\r\n    uri: \"/pipeline/list\",\r\n    method: \"GET\"\r\n}).then(response => dispatch({type: SET_PIPELINE_LIST, payload: response.data}))\r\n\r\nexport const deletePipeline = (item) => dispatch => client.call({\r\n    uri: \"/pipeline/\" + item,\r\n    method: \"DELETE\"\r\n}).then(response => dispatch({type: DELETE_PIPELINE, payload: response.data}))\r\n\r\nexport const addPipeline = (item, jsonData) => dispatch => client.call({\r\n    uri: \"/pipeline/\" + item,\r\n    method: \"PUT\",\r\n    headers: {'Content-type': 'application/json'},\r\n    data: jsonData\r\n}).then(response => dispatch({type: ADD_PIPELINE, payload: response.data}))\r\n\r\nexport const editPipeline = (item, jsonData) => dispatch => client.call({\r\n    uri: \"/pipeline/\" + item,\r\n    method: \"PUT\",\r\n    headers: {'Content-type': 'application/json'},\r\n    data: jsonData\r\n}).then(response => dispatch({type: ADD_PIPELINE, payload: response.data}))\r\n\r\n"],"sourceRoot":""}
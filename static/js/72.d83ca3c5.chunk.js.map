{"version":3,"sources":["redux/actions/dashBoardActions.js","pages/dashboard/index.js"],"names":["client","Client","useStyles","makeStyles","theme","headerField","fontSize","fontWeight","headerValue","primaryShard","border","replicaShard","margin","spacing","paper","padding","textAlign","color","palette","text","secondary","BorderLinearProgress","withStyles","root","height","backgroundColor","lighten","bar","borderRadius","LinearProgress","Card","styled","MuiCard","sizing","Divider","MuiDivider","Grid","MuiGrid","TableRow","MuiTableRow","TableCell","MuiTableCell","getFinishTime","startTime","estimatedTime","Date","getTime","valueOf","untilTime","time","hours","h","Math","floor","m","month","ceil","d","getElapsed","minutes","WarningIndex","status","indices","history","useHistory","list","Object","values","map","row","health","uuid","forEach","item","index","push","CardContent","Typography","variant","gutterBottom","display","Table","TableBody","length","key","align","Box","justifyContent","alignItems","style","marginRight","Link","cursor","onClick","colSpan","RunningIndex","result","running","indexPercent","classes","indexList","successIndexList","hits","_source","baseId","substring","undefined","keyList","keys","server","collection","nextStep","currentStep","endTime","docSize","width","mr","className","value","Number","minWidth","size","count","newSize","i","unshift","slice","join","convertHumanReadableCount","step","convertStep","TopArea","dispatch","container","xs","BottomArea","alias","resultList","aliasName","row2","storage","store","Fragment","mt","overflow","TableHead","sort","a","b","marginLeft","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","format","replace","toLocaleString","eventCode","connect","dashBoardReducers","useState","setIndexPercent","loopFunc","call","uri","method","data","then","response","type","SET_INDEX_RESULT","payload","catch","err","console","error","getPropagateIndexPercent","setTimeout","setRunningPropagateIndexActions","shardsList","percent","shardPercent","ip","log","useEffect","SET_RUNNING_INDEX","SET_INDEX_STATUS","SET_INDEX_ALIAS","params","SET_DASHBOARD_INDICES_INFO","clearTimeout","title","my"],"mappings":"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","file":"static/js/72.d83ca3c5.chunk.js","sourcesContent":["import {\r\n    SET_DASHBOARD_INDICES_INFO,\r\n    SET_INDEX_ALIAS,\r\n    SET_INDEX_RESULT,\r\n    SET_INDEX_STATUS,\r\n    SET_RUNNING_INDEX\r\n} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexResultActions = key => dispatch => client.call({\r\n  uri: `/elasticsearch/.dsearch_index_history/_search`,\r\n  method: 'post',\r\n  data: {\r\n    \"query\": {\r\n      \"bool\": {\r\n        \"minimum_should_match\": 1,\r\n        \"should\": [\r\n          {\r\n            \"term\": {\r\n              \"jobType\": \"FULL_INDEX\"\r\n            }\r\n          },\r\n          {\r\n            \"term\": {\r\n              \"jobType.keyword\": \"FULL_INDEX\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"sort\": [\r\n      {\r\n        \"endTime\": {\r\n          \"order\": \"desc\"\r\n        }\r\n      }\r\n    ],\r\n    \"size\" : 200\r\n    // ,\r\n    // collapse: {\r\n    //   field: \"index\",\r\n    //   inner_hits: {\r\n    //     name: \"_bundle\",\r\n    //     size: 0\r\n    //   }\r\n    // }\r\n  }\r\n})\r\n  .then(response => dispatch({ type: SET_INDEX_RESULT, payload: response.data }))\r\n  .catch(err => console.error(err))\r\n\r\n// export const setRunningIndexActions = key => dispatch => client.call({uri: `/elasticsearch/.dsearch_last_index_status/_search?q=status:RUNNING`})\r\n//     .then(response => dispatch({type: SET_RUNNING_INDEX, payload: response.data}))\r\n//     .catch(err => console.error(err))\r\n\r\nexport const setIndexStatusActions = key => dispatch => client.call({ uri: `/elasticsearch/_cat/indices?format=json` })\r\n  .then(response => dispatch({ type: SET_INDEX_STATUS, payload: response.data }))\r\n  .catch(err => console.error(err))\r\n\r\n\r\nexport const setIndexAliasActions = key => dispatch => client.call({ uri: `/elasticsearch/_cat/aliases?format=json` })\r\n  .then(response => dispatch({ type: SET_INDEX_ALIAS, payload: response.data }))\r\n  .catch(err => console.error(err))\r\n\r\nexport const setRunningIndexActions = key => dispatch => client.call({ uri: `/dashboard/indexing` })\r\n  .then(response => dispatch({ type: SET_RUNNING_INDEX, payload: response.data }) )\r\n  .catch(err => console.error(err))\r\n\r\nexport const setIndicesActions = () => dispatch =>\r\n  client.call({\r\n    uri: `/elasticsearch/_cat/indices`,\r\n    params: {\r\n      format: \"json\",\r\n    }\r\n  })\r\n    .then(response => dispatch({ type: SET_DASHBOARD_INDICES_INFO, payload: response.data }))\r\n    .catch(error => console.error(error))\r\n\r\n\r\nexport const setRunningPropagateIndexActions = (index) => dispatch => client.call({ uri: `/elasticsearch/${index}/_recovery?format=json&filter_path=**.shards.index.size.percent` })","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    setIndexAliasActions,\r\n    setIndexResultActions,\r\n    setIndexStatusActions,\r\n    setIndicesActions,\r\n    setRunningIndexActions,\r\n    setRunningPropagateIndexActions,\r\n} from '@actions/dashBoardActions'\r\nimport Helmet from \"react-helmet\";\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {\r\n    Box,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Divider as MuiDivider,\r\n    Grid as MuiGrid,\r\n    LinearProgress,\r\n    Link,\r\n    Table,\r\n    TableBody,\r\n    TableCell as MuiTableCell,\r\n    TableHead,\r\n    TableRow as MuiTableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {lighten, makeStyles, withStyles} from \"@material-ui/core/styles\";\r\nimport {connect} from \"react-redux\";\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    headerField: {fontSize: '1.2em', fontWeight: \"bold\"},\r\n    headerValue: {fontSize: '1.2em', fontWeight: \"bold\"},\r\n    primaryShard: {border: \"1px solid\",},\r\n    replicaShard: {border: \"1px dashed\", },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n      },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n      },\r\n}));\r\n\r\nconst BorderLinearProgress = withStyles({\r\n    root: {\r\n      height: 10,\r\n      backgroundColor: lighten('#A9D0F5', 0.5),\r\n    },\r\n    bar: {\r\n      borderRadius: 20,\r\n      backgroundColor: '#013ADF',\r\n    },\r\n  })(LinearProgress);\r\n\r\n\r\nconst Card = styled(MuiCard)(spacing, sizing);\r\nconst Divider = styled(MuiDivider)(spacing, sizing);\r\nconst Grid = styled(MuiGrid)(spacing, sizing);\r\nconst TableRow = styled(MuiTableRow)(spacing, sizing, palette);\r\nconst TableCell = styled(MuiTableCell)`\r\n    border: 1px solid rgba(224, 224, 224, 1);\r\n    padding: 3px;\r\n`;\r\n// const Shard = styled(Button)`\r\n//     min-width: 25px;\r\n//     max-width: 25px;\r\n//     width: 25px;\r\n//     margin: 2px;\r\n//     min-height: 25px;\r\n//     max-height: 25px;\r\n//     height: 25px;\r\n//     font-size: 0.9em;\r\n//     padding: 2px;\r\n// `;\r\n\r\n\r\n// const idxRunning = [\r\n//     {index:\"shop-c\",  docs:40000, lastIndex:\"1시간 5분\", exportDoc:200000},\r\n//     {index:\"community\",  docs:16331, lastIndex:\"30분\", exportDoc:20000}\r\n// ]\r\n\r\n\r\n// const idxWarning = [\r\n//     {status:\"yellow\", index:\"shop-a\", desc:\"레플리카 샤드 이상\"},\r\n//     {status:\"red\", index:\"prod\", desc:\"프라이머리 샤드 이상\"}\r\n// ]\r\n\r\n// const idxResult = [\r\n//     {status:\"success\", index:\"shop-a\", alias:\"shop\", lastSuccess:\"5분전\", elapsed:\"1시간 20분\", docs:140000, storage:\"530mb\"},\r\n//     {status:\"fail\", index:\"shop-b\", alias:\"shop\", lastSuccess:\"56분전\", elapsed:\"1초\", docs:0, storage:\"10kb\"},\r\n// ]\r\n\r\nconst getFinishTime = (startTime, estimatedTime) => {\r\n    var date = new Date().getTime() - new Date(startTime).getTime();\r\n    return (date.valueOf()/ estimatedTime) * 100\r\n}\r\n\r\n\r\nconst untilTime = (time) => {\r\n    var date = new Date().getTime() - new Date(time).getTime();\r\n\r\n    var hours   = ((date / 3600) / 1000) * 60;\r\n\r\n    let h = Math.floor(hours / 60)\r\n    let m = Math.floor(hours % 60)\r\n    // var minutes = Math.ceil(((date - (hours * 3600)) / 60)/ 1000);\r\n    if(h >= 720){\r\n        let month = h / 30 / 24;\r\n        return Math.ceil(month) + \"개월\"\r\n    }else if(h >= 24){\r\n        let d = h / 24;\r\n        return  Math.ceil(d) + '일'\r\n    }else if(h !== 0 && m !== 0) {\r\n        return h+'시간 ' + m+'분'\r\n    }else if(h !== 0 && m === 0) {\r\n        return h+'시간'\r\n    }else{\r\n        return m+'분' \r\n    }\r\n}\r\n\r\nconst getElapsed = time => {\r\n    // epoch_millis to epoch_seconds\r\n    time = time / 1000;\r\n\r\n    let hours   = Math.floor(time / 3600);\r\n    let minutes = Math.ceil((time - (hours * 3600)) / 60);\r\n    if(minutes >= 60){\r\n        hours += 1;\r\n        minutes = 0;\r\n    }\r\n\r\n    if(hours !== 0) {\r\n        return hours+'시간 ' + minutes+'분' \r\n    }else{\r\n        return minutes+'분' \r\n    }\r\n}\r\n\r\nfunction WarningIndex({status, indices}) {\r\n    const history = useHistory();\r\n    function moveDetail(uuid) {\r\n        history.push(`./indices/${uuid}`)\r\n    }\r\n\r\n    let list = [];\r\n    Object.values(status).map(row => {\r\n        if(row.health !== 'green'){\r\n            let uuid = \"\";\r\n            Object.values(indices).forEach(item => {\r\n                if (item.index === row.index) {\r\n                    uuid = item.uuid;\r\n                }\r\n            })\r\n            let item = row;\r\n            item.uuid = uuid;\r\n            list.push(item);\r\n        }\r\n        return row;\r\n    })\r\n\r\n    // console.log(list);\r\n\r\n    return(\r\n        <Card>\r\n            <CardContent>\r\n            <Typography variant=\"h4\" gutterBottom display=\"inline\">\r\n                주의할 인덱스\r\n            </Typography>\r\n            <br/><br/>\r\n            <Table>\r\n\r\n                <TableBody>\r\n                    {\r\n                        list.length > 0 ?\r\n                            list.map(row =>{\r\n                                return(\r\n                                    <TableRow key={row.index}>\r\n                                        <TableCell align=\"center\">\r\n                                            <Box display=\"flex\" justifyContent=\"left\" alignItems=\"center\">\r\n                                                <Brightness1Icon style={{color:row.health, marginRight:\"5px\"}} />\r\n                                                <Link style={{cursor: \"pointer\"}} onClick={() => moveDetail(row['uuid'])}>\r\n                                                    <Typography variant=\"h5\">{row.index}</Typography>\r\n                                                </Link>\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.health === 'yellow' ? <font color=\"orange\"> 레플리카 샤드 이상 </font> :\r\n                                                <font color=\"red\"> 프라이머리 샤드 이상 </font>}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n\r\n                                )\r\n                            })\r\n                            :\r\n                            (\r\n                                <TableRow>\r\n                                    <TableCell colSpan={2} style={{border: \"0px\"}}>\r\n                                        <Box align={\"center\"} style={{height: \"24px\"}}>\r\n                                            {/*정상*/}\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n\r\n}\r\n\r\n\r\nfunction RunningIndex({result, running, status, indices, indexPercent}) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    let indexList = []\r\n    let successIndexList = {};\r\n\r\n    if(result.hits.hits.length >= 0){\r\n        for(let item of result.hits.hits){\r\n            let index = item._source.index;\r\n            let baseId = index.substring(0, index.length-2);\r\n\r\n            if(successIndexList[baseId] === null || successIndexList[baseId] === undefined){\r\n                successIndexList[baseId] = item._source;\r\n            }\r\n        }\r\n    }\r\n\r\n    function convertStep(step){\r\n        let result = \"\";\r\n        if(step === \"FULL_INDEX\"){\r\n            result = \"색인\";\r\n        }else if(step === \"PROPAGATE\"){\r\n            result = \"전파\";\r\n        }else if(step === \"EXPOSE\"){\r\n            result = \"교체\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n    let keyList = Object.keys(running);\r\n    if (keyList.length !== 0) {\r\n        for (let key of keyList) {\r\n            let server = running[key].server;\r\n            if(server !== undefined){\r\n                let baseId = server.collection.baseId;\r\n                let uuid = \"\";\r\n                Object.values(indices).forEach(item => {\r\n                    if (item.index === server.index) {\r\n                        uuid = item.uuid;\r\n                    }\r\n                })\r\n\r\n                let nextStep = server.nextStep;\r\n                let currentStep = server.currentStep;\r\n                if(currentStep === \"FULL_INDEX\"){\r\n                    currentStep = \"색인\";\r\n                }else if(currentStep === \"PROPAGATE\"){\r\n                    currentStep = \"전파\";\r\n                }else if(currentStep === \"EXPOSE\"){\r\n                    currentStep = \"교체\";\r\n                }else{\r\n                    currentStep = \"\";\r\n                }\r\n\r\n                if( successIndexList[baseId] !== undefined\r\n                    && successIndexList[baseId].endTime !== undefined \r\n                    && successIndexList[baseId].startTime !== undefined\r\n                    && successIndexList[baseId].docSize !== undefined){\r\n                    \r\n                    let estimatedTime = successIndexList[baseId].endTime - successIndexList[baseId].startTime;\r\n                    let docSize = successIndexList[baseId].docSize;\r\n\r\n                    getFinishTime(server.startTime, estimatedTime);\r\n                    indexList.push({startTime: server.startTime, index: server.index, estimatedTime: estimatedTime, docSize: docSize, uuid : uuid, currentStep: currentStep, nextStep: nextStep});\r\n                }else{\r\n                    indexList.push({startTime: server.startTime, index: server.index, uuid: uuid, currentStep: currentStep, nextStep: nextStep});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    function moveDetail(uuid) {\r\n        history.push(`./indices/${uuid}`)\r\n    }\r\n    \r\n    function convertHumanReadableCount(docSize){\r\n        let size = docSize+\"\";\r\n        if(size.length <= 3) {\r\n            return size;\r\n        }\r\n        var count = Math.ceil(size.length / 3);\r\n\r\n        var newSize = [];\r\n        for(var i=0; i<count; i++) {\r\n            newSize.unshift(size.slice(-3*(i+1), size.length-(3*i)));\r\n        }\r\n        return newSize.join(',');\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <Card>\r\n            <CardContent>\r\n            <Typography variant=\"h4\" gutterBottom display=\"inline\">\r\n                전체색인 실행중\r\n            </Typography>\r\n            <br/><br/>\r\n            <Table>\r\n                <TableBody>\r\n                    {indexList.length === 0 ? <TableRow><TableCell align=\"center\"> <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\"> <Typography>현재 실행중인 색인 작업이 없습니다.</Typography></Box>  </TableCell></TableRow> : \r\n                        Object.values(indexList).map(row =>\r\n                            <TableRow key={row.index}>\r\n                                <TableCell align=\"center\">\r\n                                    <Link style={{ cursor: \"pointer\" }} onClick={() => moveDetail(row['uuid'])}>\r\n                                        <Typography variant=\"h5\">{row.index}</Typography>\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                                        <Box width=\"100%\" mr={1}>\r\n                                            <BorderLinearProgress\r\n                                                className={classes.margin}\r\n                                                variant=\"determinate\"\r\n                                                color=\"secondary\"\r\n                                                value={Number(getFinishTime(row.startTime, row.estimatedTime))}\r\n                                                // value={Number(`${Math.round( (untilTime(row.startTime) / getElapsed(row.estimatedTime))*100)}`)}\r\n                                            />\r\n                                        </Box>\r\n                                        <Box minWidth={15}>\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\"> </Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    {row.estimatedTime !== undefined ? <> 예상 종료 시간 : {getElapsed(row.estimatedTime)} <br/> </> : <>예상 종료 시간 : - <br /></> }\r\n                                    {row.docSize !== undefined ? <> 예상 처리 문서 건수 : {convertHumanReadableCount(row.docSize)} <br/> </> : <>예상 처리 문서 건수 : - <br /></> }\r\n                                    시작시간 : {untilTime(row.startTime)} 전 시작<br/>\r\n                                    현재 진행중인 상태 :   <b>\r\n                                        {row.currentStep} \r\n                                        {row.currentStep === \"전파\" ? <><br />{indexPercent[row.index]} </>: <> </>}\r\n                                        {row.currentStep === \"전파\" ? \" %\" : <> </>}\r\n                                    </b>\r\n                                    <br />\r\n                                    다음 진행 :\r\n                                    {(row.nextStep === undefined || row.nextStep === null || row.nextStep.length === 0) ? \"없음\" : \" \" + convertStep(row.nextStep[0])}\r\n                                    <br />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    }\r\n\r\n                </TableBody>\r\n            </Table>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n\r\n}\r\n\r\nfunction TopArea({dispatch, result, running, status, indices, indexPercent}) {\r\n    return (\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={6}>\r\n                <RunningIndex result={result} running={running} status={status} indices={indices} indexPercent={indexPercent}/>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <WarningIndex status={status} indices={indices} />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction BottomArea({result, alias, indices}) {\r\n    const history = useHistory();\r\n\r\n    const format = (time) => {\r\n        // var date = new Date(time * 1000);\r\n        var date = new Date(time);\r\n        \r\n        return date.getFullYear() + '-' +\r\n        ('0' + (date.getMonth()+1)).slice(-2)+ '-' +  \r\n        ('0' + date.getDate()).slice(-2) + ' '+\r\n        ('0'+(date.getHours())).slice(-2)+ ':'+\r\n        ('0' + (date.getMinutes())).slice(-2)+ ':'+\r\n        ('0' + (date.getSeconds())).slice(-2)\r\n    }\r\n\r\n\r\n    let resultList = []\r\n    Object.values(result.hits.hits).forEach(row => {\r\n\r\n        let aliasName = \"\"\r\n        Object.values(alias).forEach(row2 =>  {\r\n\r\n            if(row._source.index === row2.index) {\r\n                aliasName = row2.alias\r\n            }\r\n        })\r\n\r\n        let uuid = \"\"\r\n        Object.values(indices).forEach(item => {\r\n            if(item.index === row._source.index){\r\n                uuid = item.uuid;\r\n            }\r\n        })\r\n   \r\n        if(resultList.length <= 50){\r\n            resultList.push(\r\n                {\r\n                    index:row._source.index,\r\n                    alias: aliasName,\r\n                    status: row._source.status,\r\n                    startTime: row._source.startTime,\r\n                    endTime: row._source.endTime,\r\n                    docSize: row._source.docSize,\r\n                    storage: row._source.store,\r\n                    uuid: uuid\r\n                }\r\n            )\r\n        }\r\n    })\r\n\r\n    function moveDetail(uuid) {\r\n        history.push(`./indices/${uuid}`)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Card mt={2} style={{ overflow: \"auto\" }}>\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"h4\" gutterBottom display=\"inline\">\r\n                        전체색인 결과\r\n                    </Typography>\r\n                    <br /> <br />\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">색인 결과</TableCell>\r\n                                <TableCell align=\"center\">인덱스</TableCell>\r\n                                <TableCell align=\"center\">별칭</TableCell>\r\n                                <TableCell align=\"center\">최근 성공</TableCell>\r\n                                <TableCell align=\"center\">소요 시간</TableCell>\r\n                                <TableCell align=\"center\">문서수</TableCell>\r\n                                <TableCell align=\"center\">스토리지 용량</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n\r\n                            {resultList.length === 0 ? <TableRow><TableCell colSpan={7} align=\"center\"> <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\"> <Typography>전체 색인 결과가 없습니다.</Typography></Box> </TableCell></TableRow> : \r\n                            Object.values(resultList).sort((a, b) => {\r\n                                if(a.endTime > b.endTime){\r\n                                    return -1;\r\n                                }else if(a.endTime === b.endTime){\r\n                                    return 0;\r\n                                }else{\r\n                                    return 1;\r\n                                }\r\n                            }).map((row, index) => {\r\n                                return (\r\n                                    <TableRow key={row.index + \"_\" + index}>\r\n                                        <TableCell align=\"center\">\r\n                                            <Box display=\"flex\" justifyContent=\"left\" alignItems=\"center\">\r\n                                                {\r\n                                                    row['status'] && row['status'] === 'SUCCESS' ?\r\n                                                        <Brightness1Icon color=\"primary\"/>\r\n                                                        :\r\n                                                        <Brightness1Icon style={{color: 'red'}}/>\r\n                                                }\r\n                                                <Typography style={{marginLeft: \"5px\"}} >{row['status']}</Typography>\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Link style={{cursor: \"pointer\"}} onClick={() => moveDetail(row['uuid'])}>\r\n                                                <Typography variant=\"h5\">{row.index}</Typography>\r\n                                            </Link>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.alias}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <b>{untilTime(row.endTime)} 전 </b><br/>\r\n                                            {format(row.endTime)}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {getElapsed(row.endTime - row.startTime)}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {\r\n                                                Number(\r\n                                                    ((row||{})[\"docSize\"]||\"\").replace(/[^0-9]/gi, '')||'0'\r\n                                                ).toLocaleString()\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.storage}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n}\r\nlet eventCode = null\r\nfunction DashBoard({dispatch, result, running, status, alias, indices}) {\r\n    const [indexPercent, setIndexPercent] = useState({});\r\n\r\n    function loopFunc() {\r\n        dispatch(setIndexResultActions())\r\n        getPropagateIndexPercent()\r\n\r\n        eventCode = setTimeout(()=>{\r\n            loopFunc()\r\n        }, 1000 * 60 * 3);\r\n    }\r\n\r\n    function getPropagateIndexPercent() {\r\n        let keyList = Object.keys(running);\r\n        if (keyList.length !== 0) {\r\n            for (let key of keyList) {\r\n                let index = running[key].server.index;\r\n                dispatch(setRunningPropagateIndexActions(index))\r\n                    .then((response) => {\r\n                        // console.log(index, response['data'][index]['shards']);\r\n                        let shardsList = response['data'][index]['shards'];\r\n                        let percent = 0;\r\n                        let count = 0;\r\n\r\n                        shardsList.forEach(item => {\r\n                            let shardPercent = item['index']['size']['percent'];\r\n                            percent += Number(shardPercent.substring(0, shardPercent.length - 1));\r\n                            count++;\r\n                        });\r\n\r\n                        let ip = indexPercent;\r\n                        ip[index] = Math.ceil(percent / count) \r\n                        setIndexPercent(ip);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setRunningIndexActions())\r\n        dispatch(setIndexStatusActions())\r\n        dispatch(setIndexAliasActions())\r\n        dispatch(setIndicesActions());\r\n        loopFunc()\r\n        return () => {\r\n            if (eventCode !== null) {\r\n                clearTimeout(eventCode)\r\n            }\r\n        }\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n    getPropagateIndexPercent();\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"대시보드\"/>\r\n\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\"> 대시보드 </Typography>\r\n\r\n            <Divider my={6} />\r\n            <TopArea dispatch={dispatch} result={result} running={running} status={status} indices={indices} indexPercent={indexPercent}/>\r\n            <BottomArea result={result} alias={alias} status={status} indices={indices} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    result: store.dashBoardReducers.result,\r\n    running: store.dashBoardReducers.running,\r\n    status: store.dashBoardReducers.status,\r\n    alias: store.dashBoardReducers.alias,\r\n    indices: store.dashBoardReducers.indices\r\n}))(DashBoard);\r\n"],"sourceRoot":""}